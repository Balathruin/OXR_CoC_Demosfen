-- Actor Effects by Smurth
-- Original code by Rulix aka Bak:
-- rewritten for Coc by Nuor
local DynHud,hud,opt,helm_fx
helmet_active = nil
keep_helm = nil
feature_is_active = nil

function activate_hud()
	if (feature_is_active) then
		return 
	end
	feature_is_active = true
	helm_fx = {
		helm_respirator = "level.add_pp_effector('helm_respirator.ppe',3000,true)",
		helm_exo = "level.add_pp_effector('helm_exo.ppe',3000,true)",
		helm_protective = "level.add_pp_effector('helm_protective.ppe',3000,true)",
		helm_hardhat = "level.add_pp_effector('helm_hardhat.ppe',3000,true)",
		helm_scientific = "level.add_pp_effector('helm_scientific.ppe',3000,true)",
		helm_battle = "level.add_pp_effector('helm_battle.ppe',3000,true)",
		helm_tactic = "level.add_pp_effector('helm_battle.ppe',3000,true)",
		helm_invisible = "",
	}
	opt = {
		-- minimal distance from actor to draw helmet (increase it if helmet disappear when running / jumping)
		cam_dist = 1.6,
		radiation_ppe_threshold = 0.3,
		health = {
			-- health level for heavy injuring sounds
			level1 = 0.1,
			-- health level for light injuring sounds
			level2 = 0.2,
			-- little hit effect (played on every hit > little_delta)
			little_delta = 5,
			little_ppe = "amk_shoot.ppe",
			-- middle hit effect (played in addition of little effect, anm and snd randomly chosen)
			middle_delta = 20,
			middle_anm = {"shell_shock","hit_front","hit_right","hit_back","hit_left","hit_front_left","hit_back_left","hit_front_right","hit_back_right"},
			middle_snd = {"pain_2","pain_3","pain_5","pain_6","pain_7","pain_8"},
			-- huge hit effect (played in addition of little effect, anm and snd randomly chosen)
			huge_delta = 50,
			huge_ppe = "total_recall.ppe",
			huge_anm = {"head_shot","fusker"},
			huge_snd = {"pain_4","pain_1","hit_5","hit_6"},
		},
	}
	
	helmet_active = true
	open_hud()
	RegisterScriptCallback("actor_on_net_destroy",net_destroy)
end

function deactivate_hud()
	if not (feature_is_active) then
		return 
	end
	feature_is_active = false
	helm_fx = nil
	keep_helm = nil
	opt = nil
	helmet_active = nil
	close_hud()
	UnregisterScriptCallback("actor_on_net_destroy",net_destroy)
end

function open_hud()
	hud = get_hud()
	DynHud = DynamicHud()
	if DynHud then
		hud:AddDialogToRender(DynHud)
	end
end

function close_hud()
	if DynHud then
		level.remove_pp_effector(3000)
		level.remove_pp_effector(2020)
		hud:RemoveDialogToRender(DynHud)
    	helmet_active = false
	end
		DynHud = nil
		hud = nil
end
------------------------------------------
function net_destroy()
	close_hud()
end
------------------------------------------
function on_game_start()
	if (axr_main.config:r_value("mm_options","enable_mask_hud",1,false) == false) then return end
	local function actor_on_first_update()
		activate_hud()
	end
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
	RegisterScriptCallback("actor_on_before_death",net_destroy)
end
--//	----------------------------------------------------------
--//	-------------------DynHud class---------------------------
--//	----------------------------------------------------------
class "DynamicHud" (CUIScriptWnd)
function DynamicHud:__init() super()
	self.snd_tg = time_global()
	self.tmr = self.snd_tg
	self.tmr_br = self.snd_tg
	self.helmet_name = ""
	self.cond = 1
	self.suitfirstrun = true
	self.breath_speed = 1
	self.health_play = 0
	self.gas_play = 0
	self.run_play = 0
	self.health = db.actor.health
	self.no_breath = nil -- set to true to disable breath effect
	self.blurval = 0 
	self.blurlt = 0 
	self.blurcyctime = 0 
	self.blurlastphase = 0
end

function DynamicHud:__finalize() end

function DynamicHud:InitHelm(helm)
	if not helm or helm == "" then return end
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_dyn_huds.xml")
	if not self.breath and not system_ini():r_bool_ex(helm,"helmet_no_respi",false) and not self.no_breath and helm~="helm_invisible" then
		self.breath = {}
		for i=1,5 do
			self.breath[i] = xml:InitStatic("hud_blur"..i, self)
			self.breath[i]:Show(false)
		end
	end
	self.helm_hud = {}
	for i=1, self.cnt do
		self.helm_hud[i] = xml:InitStatic(helm..i, self)
		self.helm_hud[i]:Show(false)
	end
end

function DynamicHud:UseHelm(section)
	if helm_fx[section] then
		self.cnt = getFS():file_list_open_ex("$textures_ui_masks$", FS.FS_ListFiles, section.."*.dds"):Size() or 1
		self:InitHelm(section)
		assert(loadstring(helm_fx[section]))()
	end
end

function DynamicHud:Update()
	CUIScriptWnd.Update(self)
	self.tg = time_global()
	if self.tg > self.tmr then
		self.tmr = self.tg+180
		self:HitEffect()
		self:hud_condition()
		self:ActorRadiation()
	end
	if  self.tg > self.tmr_br then
		self.tmr_br = self.tg+60
		if self.helm_hud and self.breath then
			self:init_blurs()
		end
	end
end

--//	OnUpdate Functions	//--
function DynamicHud:hud_condition()
	local helm_obj = db.actor:alive() and (db.actor:item_in_slot(12) or db.actor:item_in_slot(7))
	if not (helm_obj) then 
		return 
	end
	local sys_ini = system_ini()
	local helmet = sys_ini:r_string_ex(helm_obj:section(),"mask_hud")
	local helmet_no_respi = sys_ini:r_bool_ex(helm_obj:section(),"mask_hud_no_respi",false)
	local cam_dist = db.actor:bone_position("bip01_head"):distance_to_sqr(device().cam_pos)	
	if not (helmet_active) or cam_dist > opt.cam_dist then
		if self.helmet_name then
			if not helmet or cam_dist <= opt.cam_dist then
				local snd
				if helmet_no_respi or self.tg < (self.snd_tg-400) then
					snd = sound_object("actor\\gasmask_nobreath")
				else
					snd = sound_object("actor\\gasmask_off")
				end
				snd:play(db.actor,0,sound_object.s2d)
				self.snd_tg = self.tg+snd:length()+120
				self.gas_play = 0
				self.helmet_name = nil
				self.suitfirstrun = true
			else
				self.helmet_name = ""
			end
			if self.helm_hud then self.helm_hud[self.cond]:Show(false) end
			level.remove_pp_effector(3000)
			self.cond = 1
			self:set_blurs(false)
			helm_eat = nil
			return
		end
		if helmet_active or self.health < opt.health.level2 then self:mask_no_resp() end
	else
		if not helmet then
			if self.helm_hud then
				self.helm_hud[self.cond]:Show(false)
				self.helm_hud = nil
			end
			self.helmet_name = nil
			helm_eat = nil
			level.remove_pp_effector(3000)
			self.cond = 1
			self:set_blurs(false)
			self.suitfirstrun = true
			return
		end
		if self.suitfirstrun then
			local snd
			if helmet_no_respi or self.tg < self.snd_tg then
				snd = sound_object("actor\\gasmask_nobreath")
			else
				snd = sound_object("actor\\gasmask_on")
			end
			snd:play(db.actor,0,sound_object.s2d)
			self.snd_tg = self.tg+snd:length()+120
			self.suitfirstrun = false
			self:set_blurs(false)
			return
		end
		
		if helmet_no_respi then
			self:mask_no_resp()
		elseif self.tg>self.snd_tg then
			self:ActorBreathSpeed()
			self.gas_play = self.gas_play < 8 and self.gas_play+1 or 1
			local snd = sound_object("actor\\gas_breath_"..tostring(self.health > 0.2 and self.breath_speed or 8).."_"..self.gas_play)
			self.snd_tg = self.tg+snd:length()*(2.8-self.breath_speed/4)
			snd:play(db.actor,0,sound_object.s2d)
		end
		local cond = (helm_obj and helm_obj:condition()) or 0
		cond = self.cnt and math.floor(((1.0-cond)*self.cnt)+1) or 1
		cond = self.cnt and cond > self.cnt and self.cnt or cond 
		if helmet~=self.helmet_name or cond~=self.cond then
			if self.helmet_name and self.helmet_name ~= "" then										-- remove old
				self.helm_hud[self.cond]:Show(false)
				self.cond = 1
			end
			if self.suitfirstrun == false and cond > self.cond and helmet==self.helmet_name then	--repaired
				local snd_obj = sound_object("material\\glass\\glass_fall03hl")
				snd_obj:play(db.actor,0,sound_object.s2d)
			elseif helmet~=self.helmet_name then													-- changed
				level.remove_pp_effector(3000)
				self:UseHelm(helmet)
			end
			self.helmet_name = helmet
			keep_helm = helmet_no_respi
			self.cond = cond
			self.helm_hud[cond]:Show(true)
		end
--
	end
end

function DynamicHud:ActorBreathSpeed()
	self.breath_speed = math.ceil(8 - ((db.actor.power) * 8))
	self.breath_speed = self.breath_speed == 0 and 1 or self.breath_speed
	self.breath_speed = math.min(8, math.ceil(self.breath_speed + db.actor.bleeding * 0.3))
	self.breath_speed = math.min(8, math.ceil(self.breath_speed + (1-self.health) * 7))
end

function DynamicHud:mask_no_resp()
	self:ActorBreathSpeed()
	self:set_blurs(false)

	local health = self.health

	if self.tg < self.snd_tg or health < 0 then return end

	if health > opt.health.level2 then
		if db.actor.power < 0.3 or self.run_play == 1 then
			self.run_play = self.run_play+1
			if self.run_play > 2 then self.run_play = 1 end
			local snd = sound_object("actor\\run_"..math.ceil(3*self.breath_speed/8).."_"..self.run_play)
			self.snd_tg = self.tg+snd:length()*(2.8-self.breath_speed/4)
			snd:play(db.actor,0,sound_object.s2d)
		else
			self.run_play = 2
		end
		return
	end

	if health <= opt.health.level1 then
		health = 1
		if math.random()<0.1 then
			self.health_play = 0
		else
			self.health_play = self.health_play+1
			if self.health_play > 4 then self.health_play = 1 end
		end
	else
		health = 2
		self.health_play = self.health_play+1
		if self.health_play > 4 then self.health_play = 1 end
	end
	local snd = sound_object("actor\\health_"..health.."_"..self.health_play)
	self.snd_tg = self.tg+snd:length()*(2.8-self.breath_speed/4)
	snd:play(db.actor,0,sound_object.s2d)
end
------------------------------------------------------------------------------------------------
function DynamicHud:HitEffect()
	local health = db.actor.health
	local delta_health = (self.health-health)*100
	self.health = health
	if delta_health > opt.health.little_delta then
		level.add_pp_effector(opt.health.little_ppe, 2011, false)
		level.set_pp_effector_factor(2011, delta_health)

		if delta_health > opt.health.middle_delta then
			local cameffs,sounds
			if delta_health > opt.health.huge_delta then
				level.add_pp_effector(opt.health.huge_ppe, 2012, false)
				level.set_pp_effector_factor(2012, delta_health)
				cameffs = opt.health.huge_anm
				sounds = opt.health.huge_snd
			else
				cameffs = opt.health.middle_anm
				sounds = opt.health.middle_snd
			end
			if not wpn_effects.shott then	--optional for recoil effects
				level.add_cam_effector("camera_effects\\"..cameffs[math.random(#cameffs)]..".anm",999,false,"")
			end					--optional for recoil effects
			local snd_obj = sound_object("actor\\"..sounds[math.random(#sounds)])
			snd_obj:play(db.actor,0,sound_object.s2d)
		end
	end
end
-------------------------------------------------------------------------------------------------
function DynamicHud:ActorRadiation()
	local radiation = db.actor.radiation
	if radiation > 0 then
		if radiation > opt.radiation_ppe_threshold then
			level.add_pp_effector("radiation.ppe", 2020, true)
		else
			level.remove_pp_effector(2020)
		end
		level.set_pp_effector_factor(2020, radiation)
		if math.random()<radiation then
			radiation = radiation>0.5 and math.random()<radiation/1.3 and "click3" or math.random(8)
			local snd = sound_object("detectors\\geiger_"..radiation)
			snd:play(db.actor,0,sound_object.s2d)
		end
	end
end
---------------------------------------------------------------------------------------------------------------------------
function DynamicHud:init_blurs()
	if self.helmet_name and self.helmet_name~="" and self.helmet_name~="helm_invisible" and not(system_ini():r_bool_ex(self.helmet_name,"helmet_no_respi",false)) and self.cond <= math.ceil(self.cnt/2) then
		local zoom = ((67.5/device().fov)-1)*1.5+1
		zoom = zoom < 1.001 and 1.001 or zoom
		local stretchy = 0.75/(math.floor(device().aspect_ratio*1000)/1000)
		stretchy = stretchy < 1 and 1 or stretchy
		local rect = {x = -768*zoom+768,y = (-512*zoom+512)*stretchy-(stretchy-1)*300,w = 1024*zoom,h = 768*zoom*stretchy}
		self:set_blurs(true,rect)
	else
		self:set_blurs(false)
	end
end

function DynamicHud:set_blurs(enabled,rect)
	if not enabled then
		if self.breath and #self.breath > 0 then
			for i=1,#self.breath do
				self.breath[i]:Show(false)
			end
		end
		return
	end
	local period = (7.4-self.breath_speed/1.25) --(1.0+db.actor.power^2) * 1.75
	local expirt = 0.3
	local breathpower = 3
	local delta = (self.tg-self.blurlt)/1000
	local phase = (self.tg-self.blurcyctime)/1000
	self.blurlt = self.tg
--printf("period=%s delta=%s phase=%s blurlt=%s",period,delta,phase,self.blurlt)
	if phase > period then
		phase = phase%period
		self.blurcyctime = self.blurlt-phase*1000
	end
	if self.blurlastphase > phase then
		self.blurlastphase = 0
	end
	local blurdelta = delta*-0.7 -- (self.tg-self.blurlt)/1000*-0.7
	if self.blurlastphase < expirt and phase < expirt then
		blurdelta = blurdelta+(phase-self.blurlastphase)*breathpower
	elseif self.blurlastphase < expirt then
		blurdelta = blurdelta+(expirt-self.blurlastphase)*breathpower
	end
	self.blurlastphase = phase
	self.blurval = self.blurval+blurdelta
--printf("phase1=%s blurdelta=%s blurval=%s cycletime=%s",phase,blurdelta,self.blurval,self.blurcyctime)
	if self.blurval > 0.999 then
		self.blurval = 0.999
	elseif self.blurval < 0 then
		self.blurval = 0
	end
	local tm = math.floor(self.blurval*#self.breath)
	local tmn = (tm+1)
	local v = self.blurval*#self.breath-math.floor(self.blurval*#self.breath)
	v = 1-v
	local v1 = 1-v
--printf("tm=%s v=%s",tm,v)
	if tm ~= 0 then
		self.breath[tm]:SetTextureColor(GetARGB(v*255,255,255,255))
	end
	if tmn ~= 0 then
		self.breath[tmn]:SetTextureColor(GetARGB(v1*255,255,255,255))
	end

	for i=1,#self.breath do
		if i == tm or i == tmn then
			self.breath[i]:Show(true)
			self.breath[i]:SetWndRect(Frect():set(rect.x,rect.y,rect.w,rect.h))
		else
			self.breath[i]:Show(false)
		end
	end
--
end
---------------------------------------------------------------------------------------------------------------------------