function bind(obj)
	bind_container.bind(obj)
end

function on_game_start()
	RegisterScriptCallback("CUIActorMenu_OnItemFocusReceive",on_item_focus)
	RegisterScriptCallback("CUIActorMenu_OnItemDropped",on_icon_dropped)
end

function try_to_cook(itm)
	local sec = itm:section()
	local dummy_id = itm:id()
	if not (bind_container.containers[dummy_id] and bind_container.containers[dummy_id].id) then
		access_inventory(itm)
		return 
	end
	
	local inv_box = level.object_by_id(bind_container.containers[dummy_id].id)
	if not (inv_box and bind_container.get_item_count(inv_box) > 0 and itm:get_remaining_uses() > 0) then
		access_inventory(itm)
		return
	end
	
	itm:set_remaining_uses(itm:get_remaining_uses()-1)
	
	local sys_ini = system_ini()
	local items_to_create = {}
	local items_to_remove = {}
	local size_t = 0
	local function transmutate_items(dummy, item)
		local cooked_section = sys_ini:r_string_ex(item:section(),"cooked_section")
		if (cooked_section and sys_ini:section_exist(cooked_section)) then 
			size_t = size_t + 1
			items_to_create[size_t] = cooked_section
			items_to_remove[size_t] = item:id()
		end
	end
	
	-- iterate all items in the inventory box
	inv_box:iterate_inventory_box(transmutate_items, nil)

	ActorMenu.get_actor_menu():SetMenuMode(1) -- Necessary or crash!
	
	local sim = alife()
	for i=1,size_t do
		local _id = items_to_remove[i]
		local se_obj = sim:object(_id)
		if (se_obj) then 
			sim:release(se_obj)
		end
	end
	
	-- create cooked
	for i=1,size_t do
		local new_section = items_to_create[i]
		sim:create(new_section,inv_box:position(),inv_box:level_vertex_id(),inv_box:game_vertex_id(),inv_box:id())
	end
	
	CreateTimeEvent(0,"cooking_use_container",0,bind_container.use_container,inv_box:id(),dummy_id)
end 

function check_can_cook_functor(obj)
	local id = obj:id()
	if not (bind_container.containers[id] and bind_container.containers[id].id) then 
		return 
	end
	
	local inv_box = level.object_by_id(bind_container.containers[id].id)
	if not (inv_box and bind_container.get_item_count(inv_box) > 0) then 
		return 
	end
	
	if (obj:get_remaining_uses() > 0) then
		return game.translate_string("st_try_to_cook")
	end
end

function on_icon_dropped(obj1,obj2,from_slot,to_slot)
	if (from_slot == EDDListType.iActorBag) and (to_slot == EDDListType.iActorSlot or to_slot == EDDListType.iActorBag) then
		if (obj1:section() == "charcoal" and obj2:section() == "wood_stove") then 
			add_fuel(obj2,obj1)
		end
	end
end

function on_item_focus(obj)
	if (obj:section() == "wood_stove") then 
		ActorMenu.get_actor_menu():highlight_section_in_slot("charcoal",EDDListType.iActorBag)
	elseif (obj:section() == "charcoal") then 
		ActorMenu.get_actor_menu():highlight_section_in_slot("wood_stove",EDDListType.iActorBag)
	end
end

function can_access_inventory(obj)
	if not (obj:parent() and obj:parent():id() == 0) then 
		return
	end
	return bind_container.can_access_inventory(obj)
end

function try_add_fuel(stove_obj)
	if (stove_obj:get_remaining_uses()+1 <= stove_obj:get_max_uses()) then
		return game.translate_string("st_add_cooking_fuel")
	end
end 

function add_fuel(stove_obj,fuel_obj)
	if not (fuel_obj) then 
		local function find_fuel(temp, item)
			if (item:section() == "charcoal") then
				if (fuel_obj == nil or item:get_remaining_uses() <= fuel_obj:get_remaining_uses()) then
					fuel_obj = item
				end
			end
		end
		db.actor:iterate_inventory(find_fuel,nil)
	end
	if not (fuel_obj) then
		return
	end
	if (stove_obj:get_remaining_uses()+1 <= stove_obj:get_max_uses() and fuel_obj:get_remaining_uses() > 0) then 
		stove_obj:set_remaining_uses(stove_obj:get_remaining_uses()+1)
		fuel_obj:set_remaining_uses(fuel_obj:get_remaining_uses()-1)
		if (fuel_obj:get_remaining_uses() <= 0) then 
			local se_obj = alife_object(fuel_obj:id())
			if (se_obj) then 
				alife():release(se_obj,true)
			end
		end
		get_hud():UpdateActorMenu()
	end
end

function access_inventory(obj)
	--add_fuel(obj)
	bind_container.access_inventory(obj)
end