---------------------------------------------------------------------------------------------
--' funtions for upgrade items ----------------------------------------------------
--' Made by Distemper ----------------------------------------------------------------
--' 03.08 --------------------------------------------------------------------------------
-- Altered by Alundaio to allow npc to keep items for an amount of time


cur_hint = nil

local param_ini = ini_file("misc\\stalkers_upgrade_info.ltx")
local cur_price_percent = 1

local RepairItemList = {}
local weapon_upgrades = {}
local effect_funct
local cur_section = ""

function save_state(m_data)
	--alun_utils.debug_write("inventory_upgrades.save_state")
	m_data.RepairItemList = RepairItemList
end

function load_state(m_data)
	RepairItemList = m_data.RepairItemList or RepairItemList
	m_data.RepairItemList = nil
end

----------- Dialog Func--------------------

function lend_item_for_repair(itm,mechanic_name,rt)
	local npc = get_story_object(mechanic_name)
	if (npc) then
		db.actor:transfer_item(itm,npc)
		give_info(npc:section().."_is_repairing")
		news_manager.relocate_item(db.actor, "out", itm:section(), 1)

		if not (RepairItemList[mechanic_name]) then
			RepairItemList[mechanic_name] = {}
		else
			for id,t in pairs(RepairItemList[mechanic_name]) do
				if (t.gt ~= nil) then
					rt = rt + utils.clamp(t.rt - game.get_game_time():diffSec(t.gt),0,t.rt)
				end
			end
		end

		--printf("mechanic name = %s [sec = %s, id = %s]  repair_time = %s",mechanic_name,itm:section(),itm:id(),rt)
		RepairItemList[mechanic_name][itm:id()] = {gt = game.get_game_time(), rt = rt}

		local hud = get_hud()
		if (hud) then
			hud:HideActorMenu()
			--hud:UpdateActorMenu()
		end
	end
end

function has_repair_info(a,b)
	local npc = dialogs.who_is_npc(a,b)
	if (has_alife_info(npc:section().."_is_repairing")) then
		return true
	end
	return false
end

function has_repaired_items(a,b)
	local npc = dialogs.who_is_npc(a,b)
	local sec = npc:section()
	if not (RepairItemList[sec]) then
		return false
	end
	for id,t in pairs(RepairItemList[sec]) do
		if (game.get_game_time():diffSec(t.gt) >= t.rt) then
			return true
		end
	end
	return false
end

function dont_has_repaired_items(a,b)
	local npc = dialogs.who_is_npc(a,b)
	local sec = npc:section()
	if not (RepairItemList[sec]) then
		return true
	end
	for id,t in pairs(RepairItemList[sec]) do
		if (game.get_game_time():diffSec(t.gt) >= t.rt) then
			return false
		end
	end
	return true
end

function give_repaired_items(a,b)
	local npc = dialogs.who_is_npc(a,b)
	local sec = npc:section()
	if not (RepairItemList[sec]) then
		return false
	end

	local process_list = {}
	local itm
	local index = 0
	for id,t in pairs(RepairItemList[sec]) do
		index = index + 1
		if (game.get_game_time():diffSec(t.gt) >= t.rt) then
			itm = level.object_by_id(id)
			if (itm) then
				npc:transfer_item(itm,db.actor)
				news_manager.relocate_item(db.actor, "in", itm:section(), 1)
				process_list[id] = index
				process_list[#process_list+1] = id
			end
		end
	end

	for i=1,#process_list do
		RepairItemList[sec][process_list[i]] = nil
	end

	disable_info(npc:section().."_is_repairing")

	for k,v in pairs(RepairItemList[sec]) do
		if (k) then
			give_info(npc:section().."_is_repairing")
			break
		end
	end

	return true
end

function dm_repair_not_done(a,b)
	local npc = dialogs.who_is_npc(a,b)
	local sec = npc:section()
	if not (RepairItemList[sec]) then
		return "ERROR in dm_repair_not_done [RepairItemList["..sec.."] = nil"
	end

	local lowest,itm_id,gts
	for id,t in pairs(RepairItemList[sec]) do
		gts = t.rt - game.get_game_time():diffSec(t.gt)
		if not (lowest) then
			lowest = gts
			itm_id = id
		end

		if (gts < lowest) then
			lowest = gts
			itm_id = id
		end
	end

	if (lowest and itm_id) then
		local seconds = lowest
		local minutes = seconds/60
		local hours = minutes/60

		local itm = level.object_by_id(itm_id)
		local itm_sec = itm and itm:section()

		local inv_name = game.translate_string(system_ini():r_string_ex(itm_sec,"inv_name") or "")

		local text = {}
		for i=1,9 do 
			text[#text+1] = "st_inventory_upgrade_reply_"..i
		end

		local function set_text(str,...)
			local p = {...}
			local i = 0
			local function sr(a)
				i = i + 1
				return tostring(p[i])
			end
			return string.gsub(str,"%%s",sr)
		end

		if (hours < 1) then
			local m = math.floor(minutes)
			if (m <= 1) then
				return set_text(game.translate_string(text[9]))
			end

			if (npc:section() == "zat_a2_stalker_mechanic") then
				return set_text(game.translate_string(text[math.random(3)]),inv_name,m)
			end
			return set_text(game.translate_string(text[math.random(2)]),inv_name,m)
		elseif (hours < 2) then
			local m = math.floor(minutes - 60)
			if (npc:section() == "zat_a2_stalker_mechanic") then
				return set_text(game.translate_string(text[math.random(3,#text)]),inv_name,m)
			end
			return set_text(game.translate_string(text[7]),inv_name,m)
		else
			local h = math.floor(hours)
			local m = math.floor(minutes - (60*h))
			return set_text(game.translate_string(text[8]),inv_name,h,m)
		end
	end
	return "ERROR in dm_repair_not_done no itm_id"
end
----------- End Dialog Func--------------------

function precondition_functor_a( param1, section )
	local victim = victim_id and (db.storage[victim_id] and db.storage[victim_id].object or level.object_by_id(victim_id))
	if not (victim) then 
		return 2 
	end
	
	local mechanic_name = victim:section()
	
	local ret = 0
	if(param_ini:line_exist(mechanic_name.."_upgr", section)) then
		local param = param_ini:r_string_ex(mechanic_name.."_upgr", section)
		if(param) then
			if(param=="false") then
				ret = 1
			elseif(param~="true") then
				local possibility_table = xr_logic.parse_condlist(victim, mechanic_name.."_upgr", section, param)
				local possibility = possibility_table and xr_logic.pick_section_from_condlist(db.actor, victim, possibility_table)
				if not (possibility == "true") then
					ret = 2
				end
			end
		end
	end
	
	if not (db.actor) then -- needed
		return ret 
	end

	local price = math.floor(system_ini():r_u32(section, "cost")*cur_price_percent)
	local cash = db.actor:money()
	if(cash<price) then
		ret = 2
	end

	return ret
end

function effect_functor_a( param2, section, loading ) --( string, string, int )
	if loading == 0 then
		local money = system_ini():r_u32(section, "cost")
		db.actor:give_money(math.floor(money*-1*cur_price_percent))
		effect_funct = true
	end
end

function get_upgrade_cost(section)
	if db.actor then
		local price = math.floor(system_ini():r_u32(section, "cost")*cur_price_percent)
		return game.translate_string("st_upgr_cost")..": "..price
	end
	return " "
end

function get_possibility_string(mechanic_name, possibility_table)
		local str = ""
	if(cur_hint) then
		for k,v in pairs(cur_hint) do
			str = str.."\\n - "..game.translate_string(v)
		end
	end
	if(str=="") then
		str = " - add hints for this upgrade"
	end
	return str
end

function prereq_functor_a( param3, section )
	local victim = victim_id and (db.storage[victim_id] and db.storage[victim_id].object or level.object_by_id(victim_id))
	if not (victim) then 
		return ""
	end
	
	local mechanic_name = victim:section()
	local str = ""
	if(param_ini:line_exist(mechanic_name.."_upgr", section)) then
		local param = param_ini:r_string_ex(mechanic_name.."_upgr", section)
		if(param) then
			if(param=="false") then
				return str
			else
				cur_hint = nil
				local possibility_table = xr_logic.parse_condlist(victim, mechanic_name.."_upgr", section, param)
				local possibility = possibility_table and xr_logic.pick_section_from_condlist(db.actor, victim, possibility_table)
				if not (possibility == "true") then
					str = str..get_possibility_string(mechanic_name, possibility_table)
				end
			end
		end
	end
	if(db.actor) then
		local price = math.floor(system_ini():r_u32(section, "cost")*cur_price_percent)
		local cash = db.actor:money()
		if(cash<price) then
			return str.."\\n - "..game.translate_string("st_upgr_enough_money")--.." "..price-cash.." RU"
		end
	end
	return str
end

function property_functor_a(param1, name)
	local section_table = utils.parse_names(param1)
	if (#section_table == 0) then 
		return ""
	end
	
	local prop_name = system_ini():r_string_ex(name, "name")
	if(name == "prop_no_buck" or name == "prop_autofire") then
        return game.translate_string(prop_name)
	end
	
	local sysini = system_ini()
	local prop_damage = {}
	local max_protections = {
		["burn_protection"] = sysini:r_float_ex("actor_condition","fire_zone_max_power",1),
		["chemical_burn_protection"] = sysini:r_float_ex("actor_condition","acid_zone_max_power",1),
		["explosion_protection"] = 1,
		["fire_wound_protection"] = sysini:r_float_ex("actor_condition","max_fire_wound_protection",1),
		["radiation_protection"] = sysini:r_float_ex("actor_condition","radio_zone_max_power",1),
		["shock_protection"] = sysini:r_float_ex("actor_condition","electra_zone_max_power",1),
		["strike_protection"] = 1,
		["telepatic_protection"] = sysini:r_float_ex("actor_condition","psi_zone_max_power",1),
		["wound_protection"] = sysini:r_float_ex("actor_condition","max_wound_protection",1)	
	}
	
	local sum = 0
	local str = ""
	local tmp,val
	
	for i=1,#section_table do
		if (name == "prop_night_vision") then
			if (sysini:line_exist(section_table[i],"nightvision_sect")) then
				val = sysini:r_float_ex(section_table[i], "value")
				if (val) then
					if (val > sum) then 
						sum = val 
					end
				end
			end
		elseif (name == "prop_restore_bleeding") then
			sum = sum + (sysini:r_float_ex(section_table[i],"bleeding_restore_speed",0)/0.1*100)
		elseif (name == "prop_restore_health") then
			sum = sum + (sysini:r_float_ex(section_table[i],"health_restore_speed",0)/0.02*100)
		elseif (name == "prop_power") then
			sum = sum + (sysini:r_float_ex(section_table[i],"power_restore_speed",0)/sysini:r_float_ex("actor_condition","max_power_restore_speed",0.01)*100)
		elseif (name == "prop_artefact") then
			sum = sum + sysini:r_float_ex(section_table[i],"artefact_count",0)
		elseif (name == "prop_weightoutfit" or name == "prop_weight") then
			sum = sum + sysini:r_float_ex(section_table[i],"inv_weight",0)
		elseif (name == "prop_tonnage") then
			sum = sum + sysini:r_float_ex(section_table[i],"additional_inventory_weight",0)
		elseif (name == "prop_damage") then
			val = math.abs(sysini:r_float_ex(section_table[i],"hit_fraction_actor") or 0)*100
			prop_damage["hit_fraction_actor"] = prop_damage["hit_fraction_actor"] and prop_damage["hit_fraction_actor"] + val or val
		elseif (name == "prop_wound") then 
			tmp = sysini:r_float_ex(section_table[i],"wound_protection") or 0
			val = ((1*tmp)/max_protections["wound_protection"] * 100)
			prop_damage["wound_protection"] = prop_damage["wound_protection"] and prop_damage["wound_protection"] + val or val		
		elseif (name == "prop_strike") then 
			tmp = sysini:r_float_ex(section_table[i],"strike_protection") or 0
			val = ((1*tmp)/max_protections["strike_protection"] * 100)
			prop_damage["strike_protection"] = prop_damage["strike_protection"] and prop_damage["strike_protection"] + val or val		
		elseif (name == "prop_explo") then 
			tmp = sysini:r_float_ex(section_table[i],"explosion_protection") or 0
			val = ((1*tmp)/max_protections["explosion_protection"] * 100)
			prop_damage["explosion_protection"] = prop_damage["explosion_protection"] and prop_damage["explosion_protection"] + val or val		
		elseif (name == "prop_chem") then
			tmp = sysini:r_float_ex(section_table[i],"chemical_burn_protection") or 0
			val = ((1*tmp)/max_protections["chemical_burn_protection"] * 100)
			prop_damage["chemical_burn_protection"] = prop_damage["chemical_burn_protection"] and prop_damage["chemical_burn_protection"] + val or val	
		elseif (name == "prop_radio") then
			tmp = sysini:r_float_ex(section_table[i],"radiation_protection") or 0
			val = ((1*tmp)/max_protections["radiation_protection"] * 100)
			prop_damage["radiation_protection"] = prop_damage["radiation_protection"] and prop_damage["radiation_protection"] + val or val	
		elseif (name == "prop_thermo") then
			tmp = sysini:r_float_ex(section_table[i],"burn_protection") or 0
			val = ((1*tmp)/max_protections["burn_protection"] * 100)
			prop_damage["burn_protection"] = prop_damage["burn_protection"] and prop_damage["burn_protection"] + val or val	
		elseif (name == "prop_electro") then
			tmp = sysini:r_float_ex(section_table[i],"shock_protection") or 0
			val = ((1*tmp)/max_protections["shock_protection"] * 100)
			prop_damage["shock_protection"] = prop_damage["shock_protection"] and prop_damage["shock_protection"] + val or val	
		elseif (name == "prop_psy") then
			tmp = sysini:r_float_ex(section_table[i],"telepatic_protection") or 0
			val = ((1*tmp)/max_protections["telepatic_protection"] * 100)
			prop_damage["telepatic_protection"] = prop_damage["telepatic_protection"] and prop_damage["telepatic_protection"] + val or val	
		elseif (name == "prop_armor") then
			local bones_koeff_protection = sysini:r_string_ex(section_table[i],"bones_koeff_protection_add")
			if (bones_koeff_protection) then
				local protect = sysini:r_list(bones_koeff_protection,"bip01_spine1")
				if (protect and protect[2]) then
					tmp = tonumber(protect[2]) or 0
					val = ((1*tmp)/max_protections["fire_wound_protection"] * 100)
					prop_damage["fire_wound_protection"] = prop_damage["fire_wound_protection"] and prop_damage["fire_wound_protection"] + val or val
				end
			end
        elseif (name == "prop_ammo_size") then
            sum = sum + sysini:r_float_ex(section_table[i],"ammo_mag_size",0)
        elseif (name == "prop_rpm") then
			local val = sysini:r_float_ex(section_table[i],"rpm",0)
			sum = sum + val
		elseif (name == "prop_dispersion") then
			val = sysini:r_float_ex(section_table[i],"fire_dispersion_base") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"fire_dispersion_base") or 1
				sum = sum + ui_wpn_params.normalize(math.abs(val),0,base_val)
			end
		elseif (name == "prop_bullet_speed") then
			val = sysini:r_float_ex(section_table[i],"bullet_speed") or 0
			if (val ~= 0) then
				sum = sum + val
			end
		elseif (name == "prop_inertion") then 
			val = sysini:r_float_ex(section_table[i],"crosshair_inertion") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"crosshair_inertion") or 3
				sum = sum + ui_wpn_params.normalize(math.abs(val),0,base_val)/2
			end
			val = sysini:r_float_ex(section_table[i],"PDM_disp_accel_factor") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"PDM_disp_accel_factor") or 2.1
				sum = sum + ui_wpn_params.normalize(math.abs(val),0,base_val)/2
			end
		elseif (name == "prop_recoil") then
			val = sysini:r_float_ex(section_table[i],"cam_step_angle_horz") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"cam_step_angle_horz") or 3
				sum = sum - ui_wpn_params.normalize(math.abs(val),0,base_val)/2
			end
			val = sysini:r_float_ex(section_table[i],"cam_dispersion") or 0
			if (val ~= 0) then		
				local base_val = sysini:r_float_ex(cur_section,"cam_dispersion") or 3
				sum = sum - ui_wpn_params.normalize(math.abs(val),0,base_val)/2
			end
		elseif (name == "prop_reliability") then 
			val = sysini:r_float_ex(section_table[i],"misfire_start_prob") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"misfire_start_prob") or 0.01
				sum = sum + ui_wpn_params.normalize(math.abs(val),0,base_val)/3
			end
			val = sysini:r_float_ex(section_table[i],"misfire_end_prob") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"misfire_end_prob") or 0.1
				sum = sum + ui_wpn_params.normalize(math.abs(val),0,base_val)/3
			end
			val = sysini:r_float_ex(section_table[i],"condition_shot_dec") or 0
			if (val ~= 0) then
				local base_val = sysini:r_float_ex(cur_section,"condition_shot_dec") or 0.005
				sum = sum + ui_wpn_params.normalize(math.abs(val),0,base_val)/3
			end
		else
			sum = sum + (sysini:r_float_ex(section_table[i], "value") or 0)
		end
	end
	
	if (name == "prop_damage" or name == "prop_wound" or name == "prop_strike" or name == "prop_explo" or name == "prop_chem" or name == "prop_radio" or name == "prop_thermo" or name == "prop_electro" or name == "prop_psy" or name == "prop_armor") then
		local str = ""
		for k,v in pairs(prop_damage) do
			if (v > 0) then
				str = str .. string.format("%s +%.f",game.translate_string("ui_inv_outfit_"..k),v) .. "%"
			else
				str = str .. string.format("%s %.f",game.translate_string("ui_inv_outfit_"..k),v) .. "%"
			end
		end
		return str
	elseif (name == "prop_night_vision") then
		if (sum == 1) then
			return game.translate_string(prop_name)
		end
		return game.translate_string(prop_name.."_"..sum)
	end
	
	local val_s
	if (sum > 0) then
		val_s = "+" .. utils.round(sum)
	else 
		val_s = tostring(utils.round(sum))
	end 
	
	if (name == "prop_ammo_size" or name == "prop_artefact") then
		return game.translate_string(prop_name) .. " " .. val_s
	elseif (name == "prop_bullet_speed") then 
		return game.translate_string(prop_name) .. " " .. val_s .. " m/s"
	elseif (name == "prop_rpm") then 
		return game.translate_string(prop_name) .. " " .. val_s .. " RPM"
    elseif(name == "prop_tonnage") then
        return string.format("%s +%5.2f %s", game.translate_string(prop_name), sum, game.translate_string("st_kg"))
    elseif(name == "prop_weightoutfit" or name == "prop_weight") then
        return string.format("%s %5.2f %s", game.translate_string(prop_name), sum, game.translate_string("st_kg"))
	end
	
	return game.translate_string(prop_name) .. " " .. val_s  .. "%"
end

function property_functor_b( param1, name )
	return issue_property( param1, name )
end

function property_functor_c( param1, name )
	return issue_property( param1, name )
end

function issue_property( param1, name )
	local prorerty_name = system_ini():r_string_ex(name, "name")
	local t_prorerty_name = game.translate_string(prorerty_name)
	local value_table = utils.parse_names(param1)
	local section = value_table[1]
	if section then
		if not system_ini():line_exist(section, "value") or not system_ini():r_string_ex(section, "value") then
			return t_prorerty_name
		end
		local value = system_ini():r_string_ex(section, "value")
		return t_prorerty_name.." "..string.sub(value, 2, -2)
	else
		return t_prorerty_name
	end
end

local function how_much_repair( item_name, item_condition )
	local ltx = system_ini()
	local cost = ltx:r_u32(item_name, "cost")
	local class = ltx:r_string_ex(item_name, "class")
	local factor = 1.25
	if (class == "E_HLMET" or class == "EQU_STLK" or class == "E_STLK") then 
		factor = 0.75
	end

	return math.floor( cost * ((1 * (1-item_condition)) / (1 / (1-item_condition))) * factor * cur_price_percent )
end

function can_repair_item( item_name, item_condition, mechanic ) --( string, float, string )
	if (item_name=="pri_a17_gauss_rifle") then
		return false
	end
	
	local price = how_much_repair( item_name, item_condition )
	if db.actor:money() < price then
		return false
	end
	
	local obj = db.actor:object(item_name)
	if (obj and IsArtefact(obj)) then 
		return false
	end
	
	cur_section = item_name

	return true
end

function question_repair_item( item_name, item_condition, can, mechanic ) --( string, float, bool, string )
	if(item_name=="pri_a17_gauss_rifle") then
		return game.translate_string("st_gauss_cannot_be_repaired")
	end
	local price = how_much_repair( item_name, item_condition )
	if db.actor:money() < price then
		return game.translate_string("st_upgr_cost")..": "..price.." RU\\n"..game.translate_string("ui_inv_not_enought_money")..": "..price-db.actor:money().." RU"
	end
	return game.translate_string("st_upgr_cost").." "..price.." RU. "..game.translate_string("ui_st_inv_repair").."?"
end

function effect_upgrade_item(item,upgrade_section) -- Alundaio: called from engine (UIInventoryUpgradeWnd.cpp)
	if (axr_main.config:r_value("mm_options","enable_mechanic_feature",1,false) ~= true) then 
		return
	end
	
	local victim = victim_id and (db.storage[victim_id] and db.storage[victim_id].object or level.object_by_id(victim_id))
	if (victim) then
		lend_item_for_repair(item,victim:section(),1500)
	end
end 

function effect_repair_item( item_name, item_condition)
	local price = how_much_repair( item_name, item_condition )
	db.actor:give_money(-price)

	if (axr_main.config:r_value("mm_options","enable_mechanic_feature",1,false) ~= true) then 
		return
	end

	local item
	local function itr(actor,itm)
		if (itm and itm:section() == item_name and itm:condition() == item_condition) then
			item = itm
			return true
		end
		return false
	end

	db.actor:iterate_inventory(itr,db.actor)

	if (item) then
		local victim = victim_id and (db.storage[victim_id] and db.storage[victim_id].object or level.object_by_id(victim_id))
		if (victim) then
			lend_item_for_repair(item,victim:section(),1500)
		end
	end
end

function can_upgrade_item( item_name, mechanic )
	local victim = victim_id and (db.storage[victim_id] and db.storage[victim_id].object or level.object_by_id(victim_id))
	if not (victim) then 
		return false
	end
	cur_section = item_name
	local mechanic_name = victim:section()
	if param_ini:line_exist(mechanic_name, "discount_condlist") then
		local parsed = param_ini:r_string_to_condlist(mechanic_name,"discount_condlist")
		if (parsed) then
			xr_logic.pick_section_from_condlist(db.actor, nil, parsed)
		end
	end
	return true
end

function mech_discount(perc)
	cur_price_percent = perc
end