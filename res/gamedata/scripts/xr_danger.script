--[[
	scheme_type: generic
	author: Alundaio
	modified_by: 
--]]

--------------------
evaid = 188113
actid = 188113
--------------------
--------------------
local math_random = math.random
--------------------

local DangerInertion = {
	[danger_object.grenade] 		= 6000,
	[danger_object.entity_corpse] 	= 25000,
	[danger_object.entity_attacked] = 30000,
	[danger_object.attacked] 		= 60000,
	[danger_object.bullet_ricochet] = 15000,
	[danger_object.enemy_sound] 	= 30000,
	[danger_object.attack_sound] 	= 30000,
	[danger_object.entity_death] 	= 30000
}

local DangerIgnore = {
	[danger_object.grenade] 		= 225,
	[danger_object.entity_corpse] 	= 900,
	[danger_object.entity_attacked] = 2500,
	[danger_object.attacked] 		= 90000,
	[danger_object.bullet_ricochet] = 90000,
	[danger_object.enemy_sound] 	= 625,
	[danger_object.attack_sound] 	= 2500,
	[danger_object.entity_death] 	= 900
}

local bd_types = {
	[danger_object.grenade] 		= "grenade",
	[danger_object.entity_corpse] 	= "entity_corpse",
	[danger_object.entity_attacked] = "entity_attacked",
	[danger_object.attacked] 		= "attacked",
	[danger_object.bullet_ricochet] = "bullet_ricochet",
	[danger_object.enemy_sound] 	= "enemy_sound",
	[danger_object.attack_sound] 	= "attack_sound",
	[danger_object.entity_death] 	= "entity_death"
}
-----------------------------------------------------------------------------
-- 																PUBLIC
-----------------------------------------------------------------------------
function has_danger(npc)
	local id = npc:id()
	local st = db.storage[id]
	return st and st.danger_flag == true
end
-----------------------------------------------------------------------------
-- 																PRIVATE
-----------------------------------------------------------------------------
local function remove_memory_object(npc,obj,perceive_type)
	if (perceive_type == danger_object.hit) then 
		npc:remove_memory_hit_object(obj)
	elseif (perceive_type == danger_object.visual) then 
		npc:remove_memory_visible_object(obj)
	elseif (perceive_type == danger_object.sound) then 
		npc:remove_memory_sound_object(obj)
	end
end

-- Called from Engine!!
function CDangerManager__on_before_add(npc,mem_obj,pos,lvl_time,danger_type,perceive_type)
	local who = mem_obj:object()
	if (danger_type == danger_object.grenade) then
		if (character_community(npc) ~= "zombied" and danger_in_radius(npc,who,danger_type,perceive_type)) then 
			return true
		end
		return false
	elseif (danger_type == danger_object.entity_corpse) then 
		if (who:cast_Stalker() and character_community(npc) == character_community(who) and danger_in_radius(npc,who,danger_type,perceive_type)) then
			return true
		end
		return false
	elseif (danger_type == danger_object.entity_death) then
		-- 'who' would be the person that died
	elseif (IsStalker(who) and npc:relation(who) ~= game_object.enemy) then
		remove_memory_object(npc,mem_obj,perceive_type)
		return false
	end
	
	if not (danger_in_radius(npc,who,danger_type,perceive_type)) then 
		remove_memory_object(npc,mem_obj,perceive_type)
		return false
	end
	
	return true
end

local function get_danger_name(best_danger)
	local best_danger_object = best_danger:object()
	local bd_type = best_danger:type()

	if bd_type ~= danger_object.grenade and best_danger:dependent_object() ~= nil then
		best_danger_object = best_danger:dependent_object()
	end

	if best_danger_object == nil then
		return "none"
	end
	return best_danger_object:name()
end

local function npc_on_death_callback(npc,who)
	if (IsStalker(npc) and character_community(npc) ~= "zombied") then
		--utils.save_var(npc,"death_by_id",who:id())
		local st = db.storage[npc:id()]
		if (st) then
			st.killer_last_known_position = vector():set(who:position())
		end
	end
end

local function get_rand_vertex(npc,vo)
	local dir = npc:position():sub(vo:position())
	dir = vector_rotate_y(dir,math_random(MinVectorRotateY,MaxVectorRotateY))
	return vo:vertex_in_direction(vo:level_vertex_id(),dir,math_random(MinDistance,MaxDistance))
end

function danger_in_radius(npc,best_danger,bd_type,perceive_type)
	local coeff = 1
	if (perceive_type == danger_object.sound) then
		if (level.rain_factor() > 0) then
			coeff = coeff - level.rain_factor()/3
		end
		if (level.get_time_hours() < 3 or level.get_time_hours() > 22) then 
			coeff = coeff - 0.30
		end
		local state = state_mgr.get_state(npc)
		if (state == "sleep") then 
			coeff = coeff - 0.30
		end
	end
	
	local st = db.storage[npc:id()]
	if (st.danger and st.danger.disabled) then 
		return false
	end
	
	local ignore_distance = (st.danger and st.danger[bd_type] and st.danger[bd_type][1] or DangerIgnore[bd_type] or 0) * coeff
	if (ignore_distance <= 0) then
		return false
	end

	return best_danger:position():distance_to_sqr(npc:position()) < ignore_distance
end

local function is_danger(npc,best_danger,script)
	if (IsWounded(npc)) then
		return false
	end

	if (axr_task_manager.hostages_by_id[npc:id()]) then 
		return false 
	end
	
	local best_danger_object = best_danger:object()
	local bd_type = best_danger:type()

	if (bd_type == danger_object.grenade) then
		return best_danger:dependent_object() ~= nil
	end

	-- only react to grenade and attacked for story, companion and safe zoned npcs
	if (bd_type ~= danger_object.attacked) and (npc:has_info("npcx_is_companion") or story_objects.story_id_by_object_id[npc:id()] or xr_combat_ignore.npc_in_safe_zone(npc)) then 
		return false
	end
	
	if (bd_type == danger_object.entity_corpse) then
		local corpse_st = db.storage[best_danger_object:id()]
		if not (corpse_st and corpse_st.death_time and corpse_st.death_by_id) then
			return false
		end

		if (game.get_game_time():diffSec(corpse_st.death_time) > 12000) then
			return false
		end
		
		local killer = db.storage[corpse_st.death_by_id] and db.storage[corpse_st.death_by_id].object
		if not (killer and (IsMonster(killer) or IsStalker(killer)) and killer:alive() and npc:relation(killer) >= game_object.enemy and character_community(killer) ~= character_community(npc)) then
			return false
		end
		
		if (xr_combat_ignore.ignore_enemy_by_overrides(npc,killer)) then 
			return false 
		end

 		return true
	elseif (bd_type == danger_object.entity_death) then 
		return true
	end

	best_danger_object = best_danger:dependent_object() or best_danger_object
	if not (best_danger_object and best_danger_object:alive()) then 
		return false
	end

	return xr_combat_ignore.is_enemy(npc, best_danger_object,true,true)
end

-----------------------------------------------------------------------------
-- 															ON GAME START
-----------------------------------------------------------------------------
function on_game_start()
	RegisterScriptCallback("npc_on_death_callback",npc_on_death_callback)
end

----------------------------------------------------------------------------------------------------------------------
-- 																EVALUATORS
----------------------------------------------------------------------------------------------------------------------
class "evaluator_danger" (property_evaluator)
function evaluator_danger:__init(name, storage, npc) super (nil, name)
	self.a = storage
end

local function eval_danger(self)
	local npc = self.object
	local danger = npc:best_danger()

	if not (danger) then
		return false
	end

	local tg = time_global()
	local bd_type = danger:type()
	
	if (self.a.inertion) then
		if (self.a.type == bd_type) then 
			if (tg < self.a.danger_time) then
				return true
			end
			self.a.danger_time = nil
			self.a.type = nil
			return false
		end
		self.a.danger_time = nil
		self.a.type = nil
	end

	local new_danger_time = (bd_type == danger_object.entity_corpse and danger:object():death_time() or danger:time()) + (self.a[bd_type] and self.a[bd_type][2] or DangerInertion[bd_type])
	if (tg >= new_danger_time) then
		return false
	end
	
	if not (is_danger(npc,danger)) then 
		return false 
	end

	self.a.danger_time = new_danger_time
	self.a.type = bd_type

	return true
end

function evaluator_danger:evaluate()
	--alun_utils.debug_write("eva_danger")
	local danger = eval_danger(self) or false
	db.storage[self.object:id()].danger_flag = danger
	
	if (danger == false) then
		local bd = self.object:best_danger()
		if (bd) then 
			self.object:remove_danger(bd)
		end
	end
	
	return danger
end

-----------------------------------------------------------------------
-- 														ACTION
-----------------------------------------------------------------------
class "action_danger" ( action_base )
function action_danger:__init( name, storage )  super ( nil, name )
	self.a = storage
end
function action_danger:initialize()
	action_base.initialize( self )
	self.a.stage = 1
	self.object:set_desired_direction()
	self.a.last_state = state_mgr.get_state(self.object)
end

local function script_action_danger_grenade(npc,st,bd,best_danger_object,dependent_object,bd_type)
	--alun_utils.debug_write("script_action_danger_grenade")
	-- In this case dependent_object should be actual grenade object; best_danger_object should be nade thrower
	local bdo = dependent_object or best_danger_object

	local bdo_pos = bdo and bdo:position()
	local dist = bdo_pos and npc:position():distance_to_sqr(bdo_pos)

	local be = npc:best_enemy() or best_danger_object and npc:relation(best_danger_object) > 0 and best_danger_object

	local tg = time_global()

	if (dist and dist >= 150) then
		--[[
		if (be and npc:see(be)) then
			state_mgr.set_state(npc,"hide_na",nil,nil,{look_object = be})
			if (not alun_utils.squad_in_los(npc,be)) then
				local wpn = npc:best_weapon()
				if (wpn) then
					local relation = npc:relation(be)
					local look_pos = vector():set(be:position())

					look_pos.y = relation >= 2 and look_pos.y + 1 or look_pos.y - (math_random(25,35)/100)
					npc:set_sight(look.fire_point,look_pos)

					if (npc:target_body_state() == move.crouch) then
						st.__warning_shot_tmr = not st.__warning_shot_tmr and tg+500 or st.__warning_shot_tmr
						if (tg < st.__warning_shot_tmr) then
							npc:set_item(object.fire1,wpn,1,1)
							xr_sound.set_sound_play(npc:id(),"tolls")
						end
					end
					
					npc:set_body_state(move.crouch)
				end
			end
		else
			state_mgr.set_state(npc,"threat_danger",nil,nil,{look_position = bdo_pos})
		end
		--]]
		local sm = db.storage[npc:id()].state_mgr
		if (sm and sm.target_state ~= "threat_danger") then
			npc:clear_animations()
			sm:set_state("threat_danger",nil,nil,{look_position = bdo_pos}, state_mgr.fast_set_true)
			sm.animation:set_state(nil, true)
			sm.animation:set_control()
			sm.animstate:set_state(nil,true)
			sm.animstate:set_control()
		end	
		st.lvid = utils.send_to_nearest_accessible_vertex(npc,npc:level_vertex_id())
		return
	end

	if not (st.lvid) then 
		st.stage = 1
	end
	
	if (st.stage == 1) then
		local dir = bdo_pos and vector():set(npc:position()):sub(bdo_pos) or npc:direction()
		dir = vector_rotate_y(dir,math_random(-20,20))

		local new_vid = npc:vertex_in_direction(npc:level_vertex_id(),dir,math_random(20,35))
		st.lvid = nil

		if (new_vid and (not st.lvid or (new_vid ~= st.lvid and new_vid ~= npc:level_vertex_id())))then
			st.lvid = new_vid
		end

		if not (new_vid) then
			local node = position_node(5)
			node = node:select_best_vertex_id(npc,dir,npc:level_vertex_id(),20,35)

			if (node and node.vertex_id and node.vertex_id ~= npc:level_vertex_id()) then
				st.lvid = node.vertex_id
			end
		end

		if (st.lvid and st.lvid ~= npc:level_vertex_id()) then
			st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)
			st.stage = 2
			
			local sm = db.storage[npc:id()].state_mgr
			if (sm) then
				npc:clear_animations()
				sm:set_state("assault",nil,nil,{look_object = dist <= 100 and nil or bdo}, state_mgr.fast_set_true)
				sm.animation:set_state(nil, true)
				sm.animation:set_control()
				sm.animstate:set_state(nil,true)
				sm.animstate:set_control()
			end	
			
			return
		end

		state_mgr.set_state(npc,"hide_na",nil,nil,{look_object = be and npc:see(be) and be or bdo},state_mgr.fast_set_true)
	elseif (st.stage == 2) then
		if (npc:level_vertex_id() == st.lvid) then
			st.stage = 1
			return
		end
		state_mgr.set_state(npc,"assault",nil,nil,{look_object = dist <= 100 and nil or bdo})
		utils.send_to_nearest_accessible_vertex(npc,st.lvid)
	end
end

local function script_action_danger_corpse(npc,st,bd,best_danger_object,dependent_object,bd_type)
	--alun_utils.debug_write("script_action_danger_corpse")
	-- In this case corpse is best_danger_object; dependent_object should be killer or it's probably nil
	local bdo = best_danger_object or dependent_object

	local dst = db.storage[bdo:id()]
	local killer = dependent_object or dst and dst.death_by_id and (db.storage[dst.death_by_id] and db.storage[dst.death_by_id].object)

	-- force hostile to killer
	if (st.stage >= 4 and killer and killer:id() == 0 and killer:alive() and npc:relation(killer) == game_object.neutral and npc:see(killer) and killer:position():distance_to_sqr(npc:position()) <= 2500) then
		local squad = get_object_squad(npc)
		if (squad) then
			for k in squad:squad_members() do
				npc = db.storage[k.id] and db.storage[k.id].object
				if(npc) then
					npc:force_set_goodwill( -1000, killer)
				end
			end
		else
			npc:force_set_goodwill( -1000, killer)
		end
		--printf("xr_danger.script_action_danger_corpse: forced enemies %s and %s",npc:name(), killer:name())
	end

	--printf("stage = %s",st.stage)
	if (st.stage == 1) then
		if (math.random(1,100) < 50) then 
			st.stage = 3
		end
	end
	
	if not (st.lvid) then 
		st.stage = 1
	end
	
	if (st.stage == 1) then
		st.lvid = bdo:level_vertex_id()
		st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)

		state_mgr.set_state(npc,"assault",nil,nil,{look_object = bdo})
		st.rnd = math_random(30)

		st.stage = 2
	elseif (st.stage == 2) then
		if not (st.rnd and st.lvid) then
			st.stage = 1
			return 
		end 
		
		local dist = bdo and bdo:position():distance_to_sqr(npc:position()) or 0
		if (st.lvid == npc:level_vertex_id() or dist <= st.rnd) then
			local rnd = math_random(100)
			
			local bw = npc:best_weapon()
			if (bw and IsWeapon(bw)) then
				local hand_dependence = system_ini():r_float_ex(bw:section(),"hand_dependence",1)
				if (hand_dependence < 2) then
					rnd = 100
					st.searched = true
				end
			end
				
			if (rnd <= 33) then
				xr_sound.set_sound_play(npc:id(),"search")
				state_mgr.set_state(npc,"check_corpse",nil,nil,{look_position = dst and dst.killer_last_known_position})
				st.dtimer = time_global() + math_random(3000,5000)
			elseif (dist <= 5 and not st.searched) then
				st.searched = true
				state_mgr.set_state(npc,"kick_corpse")
				st.dtimer = time_global() + 3000
			else
				state_mgr.set_state(npc,"raid",nil,nil,{look_position = dst and dst.killer_last_known_position})
			end

			st.stage = 3
			return
		end
		st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)
		state_mgr.set_state(npc,"assault",nil,nil,{look_position = dst and dst.killer_last_known_position})
	elseif (st.stage == 3) then
		if (st.dtimer and time_global() < st.dtimer) then
			return
		end

		local dist_to_killer = dst and dst.killer_last_known_position and npc:position():distance_to_sqr(dst.killer_last_known_position) or 30

		local new_vid = random_choice(alun_utils.try_to_strafe(npc),alun_utils.try_go_backward(npc,6),alun_utils.try_go_cover(npc,dst and dst.killer_last_known_position or bdo and bdo:position() or npc:position()))

		if (new_vid and (not st.lvid or new_vid ~= st.lvid))then
			st.lvid = new_vid
		end

		if not (new_vid) then
			local dir = dst and dst.killer_last_known_position and vector():set(dst.killer_last_known_position):sub(npc:position()) or killer and vector():set(killer:position()):sub(npc:position()) or npc:direction()
			local node = position_node(3)
			node = node:select_best_vertex_id(npc,dir,npc:level_vertex_id(),10,dist_to_killer/2)

			if (node and node.vertex_id and node.vertex_id ~= npc:level_vertex_id()) then
				st.lvid  = node.vertex_id
			end
		end

		if (st.lvid) then
			st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)
			state_mgr.set_state(npc,"assault",nil,nil,{look_position = dst and dst.killer_last_known_position})
			st.stage = 4
			return
		end
		st.dtimer = time_global() + math_random(5000,7000)
		st.stage = 5
		state_mgr.set_state(npc,"threat_danger",nil,nil,{look_position = dst and dst.killer_last_known_position})
		return
	elseif (st.stage == 4) then
		if (npc:level_vertex_id() == st.lvid) then
			st.dtimer = time_global() + math_random(5000,7000)
			st.stage = 5
			state_mgr.set_state(npc,"hide_na",nil,nil,{look_position = dst and dst.killer_last_known_position})
			return
		end
		st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)
	elseif (st.stage == 5) then
		if (st.dtimer and time_global() < st.dtimer) then
			return
		end
		st.lvid = nil
		st.stage = 6
	elseif (st.stage == 6) then
		local new_vid = alun_utils.try_go_cover(npc,dst and dst.killer_last_known_position or bdo and bdo:position() or npc:position())
		if (new_vid) then 
			st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)
			state_mgr.set_state(npc,"hide_na",nil,nil,{look_position = dst and dst.killer_last_known_position or dst.object and dst.object:position()})
		end
	end
end

local function script_action_react_to_alarm(npc,st,smart)
	--printf("[%s] script_action_react_to_alarm %s",smart:name(),npc:name())
	local tg = time_global()

	if not (st.lvid) then 
		st.stage = 1
	end
	
	if (st.stage == 1) then
		local bdo,nearest_dist
		-- get closest alarm setter
		for id,pos in pairs(smart.smart_alarm_position) do 
			local obj = db.storage[id] and db.storage[id].object
			if (obj and obj:alive()) then 
				local dist = obj:position():distance_to_sqr(npc:position())
				if (nearest_dist == nil or dist < nearest_dist) then 
					bdo = obj
					nearest_dist = dist
				end
			else
				smart.smart_alarm_position[id] = nil
			end
		end
	
		st.last_pos = bdo and vector():set(bdo:position())
		local target_vertex_id = random_choice(alun_utils.try_to_strafe(npc),alun_utils.try_go_cover(npc,st.last_pos or npc:position()))

		if (target_vertex_id) then
			st.lvid = utils.send_to_nearest_accessible_vertex(npc,target_vertex_id)
			state_mgr.set_state(npc,"assault",nil,nil,{look_position = st.last_pos})
			st.stage = 2
			return
		end

		st.dtimer = tg + math_random(5000,6000)
		st.stage = 3
		return
	elseif (st.stage == 2) then
		if (npc:level_vertex_id() == st.lvid) then
			st.dtimer = tg + math_random(5000,7000)
			st.stage = 3
			return
		end
		st.lvid = utils.send_to_nearest_accessible_vertex(npc,st.lvid)
	elseif (st.stage == 3) then
		if (st.dtimer and tg < st.dtimer) then
			state_mgr.set_state(npc,"threat_danger",nil,nil,{look_position = st.last_pos})
			return
		end
		st.stage = 1
	end
end

function action_danger:execute()
	action_base.execute(self)
	
	--alun_utils.debug_write("BEFORE scripted_danger_action_planner",true)
	local npc = self.object

	local best_danger = npc:best_danger()
	if not (best_danger) then
		return
	end
	
	if (npc:path_type() ~= game_object.level_path) then 
		npc:set_path_type(game_object.level_path)
	end

	local best_danger_object = best_danger:object()
	local bd_type = best_danger:type()
	local dependent_object = best_danger:dependent_object()

	if (bd_type == danger_object.grenade) then
		script_action_danger_grenade(npc,self.a,best_danger,best_danger_object,dependent_object,bd_type)
		return
	elseif (bd_type == danger_object.entity_corpse) then
		script_action_danger_corpse(npc,self.a,best_danger,best_danger_object,dependent_object,bd_type)
		return
	end

	local se_obj = alife_object(npc:id())
	if (se_obj and se_obj.m_smart_terrain_id ~= 65535) then
		local smart = alife_object(se_obj.m_smart_terrain_id)
		if (smart and smart.npc_info[npc:id()] and smart:check_alarm() and smart.smart_alarm_position) then
			script_action_react_to_alarm(npc,self.a,smart)
			return
		end
	end
	--alun_utils.debug_write("AFTER scripted_danger_action_planner")
end

function action_danger:finalize()
	self.a.stage = 1
	if (self.a.last_state) then
		state_mgr.set_state(self.object,self.a.last_state)
	end
	
	for k,v in pairs(db.used_level_vertex_ids) do 
		db.used_level_vertex_ids[k] = nil
	end 
	
	self.a.__warning_shot_tmr = nil
	utils.send_to_nearest_accessible_vertex(self.object,self.object:level_vertex_id())
	action_base.finalize(self)
end

----------------------------------------------------------------------------------------------------------------------
-- false - engine danger, true - script danger
----------------------------------------------------------------------------------------------------------------------
class "evaluator_check_danger" (property_evaluator)
function evaluator_check_danger:__init(name, storage) super (nil, name)
	self.a = storage
end
function evaluator_check_danger:evaluate()
	--alun_utils.debug_write("eva_check_danger")
	
	if (self.a.disable) then
		return false
	end
	
	if not (IsStalker(self.object)) then 
		return false 
	end

	if not (self.object:alive()) then 
		return false 
	end 
	
	if (self.object:best_enemy()) then 
		return false 
	end
	
	if (IsWounded(self.object)) then 
		return false 
	end 
	
	if (character_community(self.object) == "zombied") then
		return false
	end

	local bd = self.object:best_danger()
	if not (bd) then
		return false
	end
	
	local id = self.object:id()
	if not (db.storage[id].danger_flag) then
		return false 
	end
	
	local bd_type = bd:type()
	if (self.object:has_info("npcx_is_companion") and bd_type == danger_object.entity_corpse) then 
		return false
	end 
	
	if (bd_type == danger_object.entity_corpse or bd_type == danger_object.grenade) then
		return true
	end
	
	local se_obj = alife_object(id)
	if (se_obj and se_obj.m_smart_terrain_id ~= 65535) then
		local smart = alife_object(se_obj.m_smart_terrain_id)
		if (smart and smart.npc_info[id] and smart:check_alarm() and smart.smart_alarm_position) then
			return true
		end 
	end
	
	return false
end
class "position_node"
function position_node:__init(amt)
	self.node = {}
	for i=1,amt do
		self.node[i] = {}
	end
end

function position_node:select_best_vertex_id(object,dir,lvid,min_dist,max_dist,find_furthest)
	local close
	min_dist = min_dist and (min_dist <= max_dist and min_dist or max_dist) or 10
	max_dist = max_dist and (max_dist >= min_dist and max_dist or min_dist) or 30
	for i=1, #self.node do
		local direction = vector_rotate_y(utils.vector_copy_by_val(dir), math_random(-180,180))

		self.node[i].vertex_id = level.vertex_in_direction(lvid, direction, math_random(min_dist,max_dist) )

		if (self.node[i].vertex_id and alun_utils.accessible(object,self.node[i].vertex_id) and self.node[i].vertex_id ~= lvid) then
			self.node[i].distance = self.node[i].vertex_id == lvid and -1 or object:position():distance_to_sqr(level.vertex_position(self.node[i].vertex_id))

			if not (close) then
				close = i --self.node[i].vertex_id
			end

			if (close) then
				if (find_furthest) then
					if (self.node[close] and self.node[close].distance < self.node[i].distance) then
						close = i
					end
				else
					if (self.node[close] and self.node[i].distance < self.node[close].distance) then
						close = i
					end
				end
			end
		end
	end
	return close and self.node[close]
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function setup_generic_scheme(npc,ini,scheme,section,stype,temp)
	local st = xr_logic.assign_storage_and_bind(npc,ini,"danger","danger",temp)
	db.storage[npc:id()].danger_flag = false
	db.storage[npc:id()].danger_flag_scripted = nil
end

function add_to_binder(npc,ini,scheme,section,storage,temp)
	local manager = npc:motivation_action_manager()

	manager:remove_evaluator(stalker_ids.property_danger)
	manager:add_evaluator(stalker_ids.property_danger,evaluator_danger("danger", storage, npc))
	manager:add_evaluator(evaid,evaluator_check_danger("script_danger",storage,npc))
	
	local danger_action = manager:action(stalker_ids.action_danger_planner)		
	local danger_action_planner = cast_planner(danger_action)

	danger_action_planner:remove_evaluator(stalker_ids.property_danger)
	danger_action_planner:add_evaluator(stalker_ids.property_danger,evaluator_danger("danger", storage, npc))
	
	local wp = world_property

	danger_action:add_precondition( wp(evaid, false) )
	
	temp.action = action_danger("danger", storage)
	
	temp.action:add_precondition( wp(evaid, true) )
	temp.action:add_precondition( wp(stalker_ids.property_danger, true) )
	temp.action:add_effect( wp(evaid,false) )
	--temp.action:add_effect( wp(stalker_ids.property_danger, false) )
	
	manager:add_action(actid,temp.action)
end

function configure_actions(npc,ini,scheme,section,stype,temp)
	local wp = world_property
	
	temp.action:add_precondition( wp(stalker_ids.property_alive, true) )
	temp.action:add_precondition( wp(stalker_ids.property_enemy, false) )

	local manager = npc:motivation_action_manager()
	local action
	local p = {
				xr_actions_id.alife,
				xr_actions_id.state_mgr + 1,
				xr_actions_id.state_mgr + 2
	}
	
	for i=1,#p do
		action = manager:action(p[i])
		if (action) then
			action:add_precondition( wp(evaid,false) )
		else
			printf("xr_danger: no action id p[%s]",i)
		end
	end
end 

function reset_generic_scheme(npc,scheme,section,stype,st)
	if (st.danger) then
		local danger_section = st.ini:r_string_ex(section,"danger") or ""
		if (danger_section ~= "") then
			local val = st.ini:r_float_ex(danger_section,"ignore_distance") -- compatibility with existing logics and ignore_distance = 0
			if (val and val == 0) then 
				st.danger.disabled = true
			else
				for bd_type,v in pairs(bd_types) do
					if (st.ini:line_exist(danger_section,v)) then
						st.danger[bd_type] = {st.ini:r_mult(danger_section,v,DangerIgnore[bd_type],DangerInertion[bd_type])}
						st.danger[bd_type][1] = tonumber(st.danger[bd_type][1])
						st.danger[bd_type][2] = tonumber(st.danger[bd_type][2])
					end
				end
			end
		end
	end
end

