local coc_ranking_array_size = 100				-- Top100
coc_ranking_list = {}
local actor_rank_place
dialog_closed = false

----------------------------------------------------------------------------
-- Engine->lua function calls 
----------------------------------------------------------------------------

-- PDA Tabs 
-- It's now possible to add new button tabs to pda*.xml.
-- You can use ActorMenu.get_pda_menu():GetActiveSection() to find out active pda tab
-- UI returned must be CUIScriptWnd
function set_active_subdialog(section)
	--printf("section=%s",section)
	if (section == "eptTasks") then 
	
	elseif (section == "eptRanking") then 
	
	elseif (section == "eptLogs") then 
	
	elseif (section == "eptRelations") then 
		return ui_pda_relations_tab.get_ui()
	elseif (section == "eptContacts") then
		return ui_pda_contacts_tab.get_ui()
	elseif (section == "eptEncyclopedia") then
		return ui_pda_encyclopedia_tab.get_ui()
	end
end 

local map_spot_property = {}
function property_box_clicked(property_ui,cur_map_location)
	local list_item = property_ui:GetSelectedItem()
	if not (list_item) then 
		return 
	end
	local textControl = list_item:GetTextItem()
	local prop = textControl:GetText()
	--printf("prop=%s",prop)
	SendScriptCallback("map_spot_menu_property_clicked",property_ui,map_spot_property.id,map_spot_property.level_name,prop)
end 

function property_box_add_properties(property_ui,id,level_name,hint,cur_map_location)
	map_spot_property.id = id 
	map_spot_property.level_name = level_name
	-- if (hint and hint ~= "") then
		-- property_ui:AddItem(hint)
	-- end
	SendScriptCallback("map_spot_menu_add_property",property_ui,id,level_name,hint)
end

-- use actor_menu for other modes
-- 10 =  Talk dialog  show
-- 11 =  Talk dialog  hide
function actor_menu_mode(mode)
	if(mode==10) then
		dialog_closed = false
		for k,st in pairs(db.storage) do
			if (st.object and st.object:is_talking() and st.object:id() ~= db.actor:id()) then
				local id = st.object:id()
				inventory_upgrades.victim_id = id -- stupid hack since sidorovich and forester don't have use_callback
				local sound_theme = xr_sound.sound_table[id]
				if sound_theme and sound_theme.reset then
					sound_theme:reset(id)
				end
				local se_obj = alife_object(id)
				if (se_obj) then
					local m_data = alife_storage_manager.get_se_obj_state(se_obj,true)
					if (m_data) then
						m_data.is_actor_contact = true
					end
				end
				break
			end
		end
		--printf("---:>Talk Dialog show")
	elseif(mode==11) then
		--printf("---:>Talk Dialog hide")
		SendScriptCallback("actor_on_leave_dialog",inventory_upgrades.victim_id)
		inventory_upgrades.victim_id = nil
		dialog_closed = true
	end
end

function get_time_elapsed()
	local s_time = level.get_start_time()
	local seconds = tonumber(game.get_game_time():diffSec(s_time))
	
	if (seconds < 60) then 
		return string.format("%d %s",seconds,game.translate_string("ui_st_secs"))
	elseif (seconds < 3600) then 
		return string.format("%d %s",seconds/60,game.translate_string("ui_st_mins"))
	elseif (seconds < 86400) then 
		return string.format("%d %s",seconds/60/60,game.translate_string("ui_st_hours"))
	end
	
	return string.format("%d %s",seconds/60/60/24,game.translate_string("ui_st_days"))
end 

function get_stat(index) -- index= int        return string
	if(index==0) then
		return get_time_elapsed()
	elseif(index==1) then
		return tostring(dxr_statistics.get_statistic_count("emissions"))
	elseif(index==2) then
		return tostring(dxr_statistics.get_statistic_count("tasks_completed"))
	elseif(index==3) then
		return tostring(dxr_statistics.get_statistic_count("killed_monsters"))
	elseif(index==4) then
		return tostring(dxr_statistics.get_statistic_count("killed_stalkers"))
	elseif(index==5) then
		return tostring(dxr_statistics.get_statistic_count("boxes_smashed"))
	elseif(index==6) then
		return tostring(dxr_statistics.get_statistic_count("stashes_found"))
	elseif(index==7) then
		return tostring(dxr_statistics.get_statistic_count("psi_storms"))
	elseif(index==8) then
		return tostring(dxr_statistics.get_statistic_count("pdas_delivered"))
	elseif(index==9) then
		return tostring(dxr_statistics.get_statistic_count("helicopters_downed"))
	elseif(index==10) then
		return tostring(dxr_statistics.get_statistic_count("artefacts_detected"))
	elseif(index==11) then
		return tostring(dxr_statistics.get_statistic_count("help_wounded"))
	elseif(index==12) then 
		return tostring(dxr_statistics.get_statistic_count("level_changes"))
	elseif(index==13) then 
		return tostring(dxr_statistics.get_statistic_count("enemies_surrendered"))
	elseif(index==14) then 
		return tostring(dxr_statistics.get_statistic_count("field_dressings"))
	elseif(index==15) then 
		return (dxr_encyclopedia.get_articles_unlocked_count() .. "/" .. dxr_encyclopedia.get_articles_count())
	elseif(index==16) then 
		return (dxr_achievements.get_achievements_unlocked_count() .. "/" .. dxr_achievements.get_achievements_count())
	elseif(index==17) then 
		return (dxr_statistics.get_actor_visited_levels_count() .. "/32")
	elseif(index==18) then 
		return (db.actor:money() .. " RU")
	end
	return ""
end

----------------------------------------------------------------------------
-- Engine->lua function calls 
----------------------------------------------------------------------------
local primary_objects_tbl = nil
function fill_primary_objects()
	if not primary_objects_tbl then
		primary_objects_tbl = {}
		local ini = ini_file("plugins\\pda_map_spots.ltx")
		local line_count = ini:line_count("pda_map_spots") or 0
		for k = 0, line_count - 1 do
			local junk1, section, value = ini:r_line("pda_map_spots", k, "", "")
			local object_tbl = { target = section, hint = value}
			table.insert(primary_objects_tbl, object_tbl)
		end
	end
	
	for k,v in pairs(primary_objects_tbl) do
		local obj_id = get_story_object_id(v.target)
		if (obj_id and level.map_has_object_spot(obj_id,"primary_object") == 0) then
			level.map_add_object_spot_ser(obj_id, "primary_object", v.hint)
		end
	end
end

function add_quick_slot_items_on_game_start()
	local ini = system_ini()
	for i=0,3 do
		get_console():execute( strformat("slot_%s %s",i, ini:r_string_ex("actor","quick_item_"..tostring(i+1)) or "") )
	end
end

----------------------------------------------------------------------------
-- Scripted Callback Register
----------------------------------------------------------------------------
local function npc_on_net_spawn(npc,se_obj)
	utils.se_obj_save_var(se_obj.id,se_obj:name(),"last_seen_level",level.name())
	utils.se_obj_save_var(se_obj.id,se_obj:name(),"last_seen_time",game.get_game_time())
end

function on_game_start()
	RegisterScriptCallback("npc_on_net_spawn",npc_on_net_spawn)
end

----------------------------------------------------------------------------
-- Character Ranking
----------------------------------------------------------------------------
-- called from info_portions.script
function calculate_rankings()
	local t = {}
	local sim = alife()
	-- add actor to list
	t[0] = sim:actor():rank()
	
	-- check all stalker server objects
	for id, se_obj in sim:objects() do
		if (id ~= 0 and IsStalker(nil,se_obj:clsid()) and se_obj:alive() and se_obj:community() ~= "zombied" and se_obj:community() ~= "trader") then
			-- Check if object has a story id, if it does they are probably unique
			local sid = story_objects.story_id_by_object_id[se_obj.id]
			if not (sid) then
				t[se_obj.id] = se_obj:rank()
			end
		end
	end
	
	coc_ranking_list = iempty_table(coc_ranking_list)
	local size_t = 0
	-- sort by highest rank first
	for id,rank in spairs(t, function(t,a,b) return t[a] > t[b] end) do
		size_t = size_t + 1 
		coc_ranking_list[size_t] = id
		if (id == 0) then
			actor_rank_place = size_t
		end
	end
	
	-- force actor into last visible slot + 1 on ranking list
	coc_ranking_list[coc_ranking_array_size+1] = 0
end

-- called from engine! It's how many character rankings to display! u8 (max 255)
function get_rankings_array_size()
	return coc_ranking_array_size
end	

-- called from engine! must return bool!
function coc_rankings_can_show(index)
	if (has_alife_info("ui_pda_hide")) then
		return false
	end
	local se_obj = coc_ranking_list[index] ~= nil and alife_object(coc_ranking_list[index])
	if (se_obj and se_obj.character_name) then
		return true
	end
	return false
end

-- called from engine! must return string!
function coc_rankings_set_name(index)
	local se_obj = coc_ranking_list[index] ~= nil and alife_object(coc_ranking_list[index])
	if (se_obj and se_obj.character_name) then
		return strformat("%s. %s",se_obj.id == 0 and actor_rank_place or index,se_obj:character_name())
	end
	return ""
end

-- called from engine! must return string!
function coc_rankings_set_hint(index)
	local se_obj = coc_ranking_list[index] ~= nil and alife_object(coc_ranking_list[index])
	if (se_obj) then
		if (se_obj.id == 0) then
			--TODO: Maybe some stats for player, like rank points per minute; if such a thing is possible.
			return ""
		else
			local return_str = ""
			
			-- DEBUG REMOVE ME LATER
			if(DEV_DEBUG and axr_main.config:r_value("mm_options","enable_debug_hud",1,false) == true) then
				return_str = se_obj:profile_name() .. [[ \n]] .. se_obj:character_icon() .. [[ \n]]
			end 
			
			-- stalker stats
			local m_data = alife_storage_manager.get_se_obj_state(se_obj)
			if (m_data) then
				local last_seen_level = m_data.last_seen_level
				local last_seen_time = m_data.last_seen_time and m_data.last_seen_time.dateToString and m_data.last_seen_time:dateToString(game.CTime.DateToDay)
				
				if (last_seen_level and last_seen_time) then
					return_str = return_str .. game.translate_string("st_last_seen") .. ": " .. game.translate_string(last_seen_level) .. " (" .. last_seen_time .. ")"
						
					if (m_data.stalkers_killed) then
						return_str = return_str .. [[ \n]] .. game.translate_string("st_stalkers_killed") .. ": " .. tostring(m_data.stalkers_killed)
					end
					if (m_data.mutants_killed) then
						return_str = return_str .. [[ \n]] .. game.translate_string("st_mutants_killed") .. ": " .. tostring(m_data.mutants_killed)
					end
					if (m_data.artefacts_found) then
						return_str = return_str .. [[ \n]] .. game.translate_string("st_artefacts_found") .. ": " .. tostring(m_data.artefacts_found)
					end
					if (m_data.items_sold) then
						return_str = return_str .. [[ \n]] .. game.translate_string("st_items_sold") .. ": " .. tostring(m_data.items_sold)
					end
				end 
			end
			return return_str
		end
	end
	return ""
end

-- called from engine! must return string!
function coc_rankings_set_description(index)
	local se_obj = coc_ranking_list[index] ~= nil and alife_object(coc_ranking_list[index])
	if (se_obj) then
			local faction_color = "%c[255,255,255,1]"
		if (game_relations.is_factions_enemies(db.actor:character_community(),se_obj:community())) then
			faction_color = "%c[255,255,1,1]"
		elseif (game_relations.is_factions_friends(db.actor:character_community(),se_obj:community())) then
			faction_color = "%c[255,1,255,1]"
		end
		
		local reputation = se_obj:reputation()
		
		local repu_color = "%c[255,255,255,1]"
		if (reputation <= -500) then
			repu_color = "%c[255,255,1,1]"
		elseif (reputation >= 500) then
			repu_color = "%c[255,1,255,1]"
		end
		
		local faction_str = game.translate_string("ui_st_community") .. ": " .. faction_color .. game.translate_string(se_obj:community()) .. "%c[default]"
		local rank_str = game.translate_string("ui_st_rank") .. ": " .. "%c[255,215,215,215]" .. game.translate_string("st_rank_"..ranks.get_se_obj_rank_name(se_obj)) .. " %c[255,110,110,255]" .. se_obj:rank() .. "%c[default]"
		local repu_str = game.translate_string("ui_st_reputation") .. ": " .. repu_color .. game.translate_string(alun_utils.get_reputation_name(reputation)) .. "%c[default]"
		
		return strformat([[ %s \n %s \n %s]],faction_str,rank_str,repu_str)
	end
	return ""
end

-- called from engine! must return string!
function coc_rankings_set_icon(index)
	local se_obj = coc_ranking_list[index] ~= nil and alife_object(coc_ranking_list[index])
	if (se_obj) then
		local icon_name
		if (se_obj.id == 0) then 
			if (axr_main.config:r_value("mm_options","enable_outfit_portrait",1,false) == true) then
				local outfit = db.actor:item_in_slot(7)
				if (outfit) then 
					local icon = system_ini():r_string_ex(outfit:section(),"character_portrait")
					if (icon and icon ~= "") then
						return icon
					end
				end 
			end
			icon_name = db.actor:character_icon()
		else
			local npc = db.storage[se_obj.id] and db.storage[se_obj.id].object
			if (npc) then
				icon_name = npc:character_icon() 
			else 
				icon_name = se_obj:character_icon()
			end
		end
		return icon_name and icon_name ~= "" and icon_name or "ui\\ui_noise"
	end
	return ""
end

-- map spots
function add_location(sid, location, hint)
	local obj_id = story_objects.object_id_by_story_id[story_id]
	if (obj_id) then
		if (level.map_has_object_spot(obj_id, location) == 0) then
			level.map_add_object_spot(obj_id, location, hint or "")
		end
	end
end

function remove_location(sid, location)
	local obj_id = story_objects.object_id_by_story_id[story_id]
	if (obj_id) then
		if (level.map_has_object_spot(obj_id, location) ~= 0) then
			level.map_remove_object_spot(obj_id, location)
		end
	end
end

function is_map_spot_present(sid, location)
	local obj_id = story_objects.object_id_by_story_id[story_id]
	if (obj_id) then
		return level.map_has_object_spot(obj_id, location) ~= 0
	end
	return false
end