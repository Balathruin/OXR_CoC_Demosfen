---------------------------
-- task manager extender
-- by Alundaio
-- IMPORTANT 'task' is global namespace! use 'tsk' or something

--actor_tagged_squad_by_id = {}
bounties_by_id = {}
available_tasks = {}
ongoing_tasks = {} 
finished_tasks = {}
hostages_by_id = {}
-----------------------------------------------------------------------------
--								PRIVATE
-----------------------------------------------------------------------------

local function npc_on_death_callback(npc,who)
	local id = npc:id()
	
	for task_id,npc_id in pairs(bounties_by_id) do 
		if (npc_id == id) then 
			if (db.storage[id] and db.storage[id].tagged_by_actor == true) or (who and (who:id() == 0 or who:has_info("npcx_is_companion"))) then
				local tm = task_manager.get_task_manager()
				local tsk = tm.task_info[task_id]
				if (tsk and tsk.stage == 0) then 
					tsk.stage = 1
					
					-- refund goodwill
					-- local comm = npc:character_community()
					-- if not (game_relations.is_factions_enemies(comm, db.actor:character_community():sub(7))) then
						-- game_relations.change_factions_community_num(comm,0,1000)
					-- end
				end
			else 
				local tm = task_manager.get_task_manager()
				local tsk = tm.task_info[task_id]
				if (tsk and tsk.stage == 0) then 
					--tsk.stage = 3
					tsk.stage = 1 -- complete task anyway instead of failing
				end			
			end
			return
		end
	end 
end 

local function npc_on_hit_callback(npc,amount,local_direction,who,bone_index)
	local id = who and who:id()
	if not (id) then 
		return 
	end
	if (id == 0 or IsStalker(who) and who:has_info("npcx_is_companion")) then
		local npc_id = npc:id()
		if (db.storage[npc_id]) then 
			db.storage[npc_id].tagged_by_actor = true
		end
	end
end

local function squad_on_npc_death(squad,se_npc,killer)
	-- unregister ID as task giver or pass id onto squad leader if is_sim task
	local task_info = task_manager.get_task_manager().task_info
	for k,v in pairs(task_info) do
		if (v.task_giver_id and v.task_giver_id == se_npc.id) then
			if (squad:npc_count() > 0 and string.find(k,"simulation_task_")) then 
				task_info[k].task_giver_id = squad:commander_id()
			else 
				task_info[k].task_giver_id = nil
			end
			return
		end 
	end

	if (xr_conditions.has_task_not_completed(nil,nil,{"agr_smart_terrain_1_6_army_trader_stalker_task_4"}) == true) then 
		local count = utils.load_var(db.actor,"agr_smart_terrain_1_6_army_trader_stalker_task_4_count") or 0
		count = count + 1
		utils.save_var(db.actor,"agr_smart_terrain_1_6_army_trader_stalker_task_4_count",count)
		SetHudTimerMsg(tostring(count))
	end
end

local function HudTimerCallback(alias,data)
	if (alias == "heli_task") then
		if (xr_conditions.has_task_not_completed(nil,nil,{"agr_smart_terrain_1_6_army_trader_stalker_task_4"}) == true) then
			xr_effects.set_task_completed(nil,nil,{"agr_smart_terrain_1_6_army_trader_stalker_task_4"})
			local count = utils.load_var(db.actor,"agr_smart_terrain_1_6_army_trader_stalker_task_4_count") or 0
			if (count > 0) then
				local multi = (axr_main.config:r_value("mm_options","multi_rewards_money",2) or 1)
				dialogs.relocate_money(db.actor,150*count*multi,"in")
			end
		end
	end
end

local function save_state(m_data)
	m_data.bounties_by_id = bounties_by_id
	m_data.hostages_by_id = hostages_by_id
end 

local function load_state(m_data)
	if (m_data.bounties_by_id) then 
		bounties_by_id = m_data.bounties_by_id
		m_data.bounties_by_id = nil
	end
	if (m_data.hostages_by_id) then 
		hostages_by_id = m_data.hostages_by_id
		m_data.hostages_by_id = nil 
	end
end
-----------------------------------------------------------------------------
--								ON GAME START
-----------------------------------------------------------------------------
function on_game_start()
	RegisterScriptCallback("npc_on_death_callback",npc_on_death_callback)
	RegisterScriptCallback("npc_on_hit_callback",npc_on_hit_callback)
	RegisterScriptCallback("monster_on_hit_callback",npc_on_hit_callback)
	RegisterScriptCallback("squad_on_npc_death",squad_on_npc_death)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("HudTimerCallback",HudTimerCallback)
end

------------------------------------------------------------------------------
--								PUBLIC
------------------------------------------------------------------------------
-- automated ordered tasks
-- tasks must be named <section>_task_<number>
-- m_trader (ie. Sidorovich) use npc:name() instead
function generate_available_tasks(npc,is_sim)
	local id = npc:id()
	available_tasks[id] = iempty_table(available_tasks[id])
	local size_t = 0
	
    local tm = task_manager.get_task_manager()
    local task_info = tm.task_info
   
    local sec
    local st = db.storage[npc:id()]
	
	-- Randomly not offer any quests at all for sim npcs
	if (is_sim and st.dyn_quest_rand == nil) then 
		if ( (math.random(1,100)/100) < 0.3) then 
			st.dyn_quest_rand = "nil"
			return
		end
	end
	
    if (st and st.ini and st.section_logic) then
        sec = st.ini:r_string_ex(st.section_logic,"task_section")
        if (sec) then
            sec = sec .. "_task_"
        end
    end
   
    if not (sec) then
        sec = is_sim and "simulation_task_" or npc:section() ~= "m_trader" and npc:section().."_task_" or npc:name().."_task_"
    end
   
    local task_id = sec.."1"
   
	local t
    local count = 1
    while (task_manager.task_ini:section_exist(task_id)) do
        --printf("task_id=%s skipped=%s",task_id,skipped_tasks[task_id])
        if (task_info[task_id] == nil and xr_conditions.has_completed_task_prerequisites(nil,nil,{task_id})) then
			if (is_sim) then
				local p = alun_utils.parse_list(task_manager.task_ini,task_id,"sim_communities",true)
				if (p[character_community(npc)] == true) then
					if not (t) then 
						t = {} 
					end
					
					if (st.dyn_quest_rand == task_id) then
						size_t = size_t + 1
						available_tasks[id][size_t] = task_id
						return
					elseif (st.dyn_quest_rand == nil) then
						t[#t+1] = task_id
					end
				end
			else
				size_t = size_t + 1
				available_tasks[id][size_t] = task_id
			end
        end
        count = count + 1
        task_id = sec..tostring(count)
    end
	
	-- randomize available tasks from sim npcs and only offer 1 job; remembing this job until NPC go offline
	if (t and #t > 0) then
		st.dyn_quest_rand = t[math.random(#t)]
		size_t = size_t + 1
		available_tasks[id][size_t] = st.dyn_quest_rand
	end
end

function generate_ongoing_tasks(npc,is_sim)
	local id = npc:id()
	ongoing_tasks[id] = iempty_table(ongoing_tasks[id])
	local size_t = 0
	
    local tm = task_manager.get_task_manager()
    local task_info = tm.task_info
   
    local sec
    local st = db.storage[npc:id()]
    if (st and st.ini and st.section_logic) then
        sec = st.ini:r_string_ex(st.section_logic,"task_section")
        if (sec) then
            sec = sec .. "_task_"
        end
    end
   
    if not (sec) then
        sec = is_sim and "simulation_task_" or npc:section() ~= "m_trader" and npc:section().."_task_" or npc:name().."_task_"
    end
   
    local task_id = sec.."1"
   
    local count = 1
    while (task_manager.task_ini:section_exist(task_id)) do
		local task_can_be_cancelled = task_manager.task_ini:r_bool_ex(task_id,"can_cancel",true)
		if (task_can_be_cancelled == nil or task_can_be_cancelled == true) then
			if (db.actor:get_task(task_id,true) and task_info[task_id] and task_info[task_id].stage and task_info[task_id].stage < (task_manager.task_ini:r_float_ex(task_id,"stage_complete") or 255)) then
				if (task_info[task_id].status ~= "fail" and task_info[task_id].status ~= "completed") then
					if (is_sim) then
						if (task_info[task_id].task_giver_id) then
							if (npc:id() == task_info[task_id].task_giver_id) then
								size_t = size_t + 1
								ongoing_tasks[id][size_t] = task_id
							end
						end
					else
						size_t = size_t + 1
						ongoing_tasks[id][size_t] = task_id
					end
				end
			end
		end
        count = count + 1
        task_id = sec..tostring(count)
    end
end

function generate_finished_tasks(npc,is_sim)
	local id = npc:id()
	finished_tasks[id] = iempty_table(finished_tasks[id])
	local size_t = 0
	
	local tm = task_manager.get_task_manager()
	local task_info = tm.task_info
	
	local sec
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic) then 
		sec = st.ini:r_string_ex(st.section_logic,"task_section")
		if (sec) then 
			sec = sec .. "_task_"
		end
		--printf("sec = %s")
	end 
	
	if not (sec) then
		sec = is_sim and "simulation_task_" or npc:section() ~= "m_trader" and npc:section().."_task_" or npc:name().."_task_"
	end 

	local task_id = sec.."1"
	
	local count = 1
	while (task_manager.task_ini:section_exist(task_id)) do
		if (db.actor:get_task(task_id, true) ~= nil and task_info[task_id] and task_info[task_id].stage ~= nil and task_info[task_id].stage == (task_manager.task_ini:r_float_ex(task_id,"stage_complete") or 255)) then
			if (task_info[task_id].status ~= "fail" and task_info[task_id].status ~= "completed") then
				if (is_sim) then 
					if (task_info[task_id].task_giver_id) then 
						if (npc:id() == task_info[task_id].task_giver_id) then 
							size_t = size_t + 1
							finished_tasks[id][size_t] = task_id
						end 
					end
				else
					size_t = size_t + 1
					finished_tasks[id][size_t] = task_id
				end
			end
		end
		count = count + 1
		task_id = sec..tostring(count)
	end
end

function trigger_fetch_func(task_id)
	--printf("triiger_fetch_func %s",task_id)
	local fetch_func = task_manager.task_ini:r_string_to_condlist(task_id,"fetch_func")
	if (fetch_func) then 
		xr_logic.pick_section_from_condlist(db.actor,db.actor,fetch_func)
	end
end

function is_task_on_complete_stage(tsk)
	local tm = task_manager.get_task_manager()
	local task_info = tm.task_info
	if not (task_info[task_id]) then 
		return false 
	end 
	return task_info[task_id].stage ~= nil and task_info[task_id].stage == (task_manager.task_ini:r_float_ex(tsk,"stage_complete") or 255)
end

function is_task_giver_valid(tsk)
	local id = tsk.task_giver_id
	local se_obj = id and alife_object(id)
	if not (se_obj) then 
		--printf("is_task_giver_valid se_obj nil id=%s   %s",id,tsk.id)
		return false 
	end 
	
	if (se_obj:clsid() == clsid.online_offline_group_s or se_obj:clsid() == clsid.script_trader) then 
		return true 
	end
	
	if not (IsStalker(nil,se_obj:clsid()) and se_obj:alive()) then
		printf("is_task_giver_valid giver not alive %s",tsk.id)
		return false
	end

	return true
end
