--//  Shows belted artifacts on primary hud

HUD = nil
local belted_arts
function activate_hud()
	belted_arts = {}
	RegisterScriptCallback("actor_item_to_belt",actor_item_to_belt)
	RegisterScriptCallback("actor_item_to_ruck",actor_item_to_ruck)
	RegisterScriptCallback("actor_on_item_drop",actor_on_item_drop)
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	open_hud()
	db.actor:inventory_for_each(
		function (item)
			if IsArtefact(item) and db.actor:is_on_belt(item) then
				belted_arts[item:id()] = item:section()
			end
		end
	)		
	HUD:update_hud()
end

function deactivate_hud()
	belted_arts = nil
	close_hud()
	UnregisterScriptCallback("actor_item_to_belt",actor_item_to_belt)
	UnregisterScriptCallback("actor_item_to_ruck", actor_item_to_ruck)
	UnregisterScriptCallback("actor_on_item_drop",actor_on_item_drop)
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
end

function open_hud()
	if HUD == nil then
		HUD = slot_hud()
		get_hud():AddDialogToRender(HUD)
	end
end

function close_hud()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end

function actor_on_net_destroy()
	close_hud()
end

function on_game_start()
	if (axr_main.config:r_value("mm_options","enable_slot_hud",1,false) == false) then return end
	local function actor_on_first_update()
		activate_hud()
	end
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

function actor_on_item_drop(item)
	if not IsArtefact(item) then
		return
	end
	local art_id = item:id()
	if belted_arts[art_id] then 
		belted_arts[art_id] = nil
	end
	HUD:update_hud(item)
end

function actor_item_to_ruck(item)
	if IsArtefact(item) then
		belted_arts[item:id()] = nil
		HUD:update_hud(item)
	end
end

function actor_item_to_belt(item)
	if IsArtefact(item) then
		belted_arts[item:id()] = item:section()
		HUD:update_hud(item)
	end
end

class "slot_hud" (CUIScriptWnd)
function slot_hud:__init() super()
	self.slot = {}
	self.ini = system_ini()
	
-- //	companions on hud
	self.companion_info = {}
	self._tmr 			= time_global()
	self.color_codes = {
		GetARGB(255,255,255,255),
		GetARGB(255,255,128,0),
		GetARGB(255,0,255,255),
		GetARGB(255,0,255,128),
		GetARGB(255,0,128,255),
		GetARGB(255,255,0,128),
		GetARGB(255,128,255,0),
		GetARGB(255,255,0,0),
		GetARGB(255,0,255,0),
		GetARGB(255,0,0,255),
		GetARGB(255,128,0,255),
	}
--//	
	self:InitControls()
end

function slot_hud:__finalize() end

function slot_hud:InitControls()
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_slot_hud.xml")
	self.static_back = xml:InitStatic("static_slot_back", self)
	self.static_back:Show(false)
	for i=1, 5 do
		self.slot[i] = xml:InitStatic("static_slot_back:slot_"..i, self.static_back)
		self.slot[i]:InitTexture("ui\\ui_icon_equipment")
	end
	
-- //	companions on hud
	self.companion_listbox = xml:InitListBox("companion_wnd",self)
	self.companion_listbox:SetFixedScrollBar(false)
	self.companion_listbox:SetItemHeight(84)
	local row_form = ui_companion_hud_row(self,xml)
	row_form:SetWndSize(vector2():set(600,84))
	self.companion_listbox:AddExistingItem(row_form)
--//
end

function slot_hud:clear(cnt)
	for i=cnt+1,5 do
		self.slot[i]:Show(false)
	end
end

function slot_hud:update_hud(item)
	local cnt = 0
	if (axr_main.config:r_value("mm_options","enable_hud_draw",1,true))==true then
		for id, sec in pairs(belted_arts) do
			cnt = cnt + 1
			local x1 = (self.ini:r_float_ex(sec,"inv_grid_x")or 0)*50
			local y1 = (self.ini:r_float_ex(sec,"inv_grid_y")or 0)*50
			local x2 = x1 + 50
			local y2 = y1 + 50
			self.slot[cnt]:SetTextureRect(Frect():set(x1,y1,x2,y2))
			self.slot[cnt]:Show(true)
		end
	end
	self:clear(cnt)

	self.static_back:Show(cnt > 0)
end

function slot_hud:Update()
	
	local tg = time_global()
	if self._tmr >= tg then
		return
	else
		self._tmr = tg + 2000
	end
	CUIScriptWnd.Update(self)
	local id_to_code = {}
	local clist = axr_companions.list_actor_squad_by_id()
	for i=1,8 do -- should be row*col from ui_companion_row
		local se_obj = clist[i] and alife_object(clist[i])
		if (se_obj and IsStalker(nil,se_obj:clsid()) and se_obj:alive()) and (axr_main.config:r_value("mm_options","enable_hud_draw",1,true) == true) then
			local full_name = se_obj:character_name()
			local name = string.gsub(full_name,"Junior","Jr.")
			name = string.gsub(name,"Senior","Snr.")
			name = string.gsub(name,"Master ","M.")
			name = string.gsub(name,"Private","Pvt.")
			name = string.gsub(name,"Sergeant","Sgt.")
			name = string.gsub(name,"Lieutenant","Lt.")
			name = string.gsub(name,"Captain","Cpt.")
			
			local name = string.len(name) <= 22 and name or string.sub(name, 0, 19) .. "..."
		
			self.companion_info[i].id = se_obj.id 
			
			local st = db.storage[se_obj.id]
			local npc = st and st.object

			local icon_name = npc and npc:character_icon() or se_obj:character_icon()
			icon_name = icon_name and icon_name ~= "" and icon_name or "ui\\ui_noise"
			self.companion_info[i].icon_wnd:InitTexture(icon_name)
			self.companion_info[i].icon_wnd:Show(true)
			
			self.companion_info[i].name_wnd:SetText(name)
			self.companion_info[i].dist_wnd:SetText(string.format("%.2f M", se_obj.position:distance_to(db.actor:position())))

			-- leader and relation status
			local squad = se_obj.group_id and se_obj.group_id ~= 65535 and alife_object(se_obj.group_id)
			if (squad and squad:commander_id() == se_obj.id) then
				self.companion_info[i].leader_wnd:Show(true)
				self.companion_info[i].leader_wnd:InitTexture("ui_minimap_squad_leader")
			else
				self.companion_info[i].leader_wnd:Show(true)
				self.companion_info[i].leader_wnd:InitTexture("ui_minimap_point")
			end
			
			-- Set color code
			if not (id_to_code[se_obj.group_id]) then 
				local n = table.size(id_to_code)+1
				id_to_code[se_obj.group_id] = self.color_codes[n] or self.color_codes[1]
			end
			self.companion_info[i].leader_wnd:SetTextureColor(id_to_code[se_obj.group_id])
			
			-- health status
			if (npc) then 
				local hp = math.floor(npc.health*100)
				self.companion_info[i].health_wnd:SetText(hp.."%")
				if (hp > 70) then 
					self.companion_info[i].health_wnd:SetTextColor(GetARGB(200, 0, 255, 0))
				elseif (hp < 30) then
					self.companion_info[i].health_wnd:SetTextColor(GetARGB(200, 255, 0, 0))
				else
					self.companion_info[i].health_wnd:SetTextColor(GetARGB(200, 255, 255, 255))
				end
			end
		else 
			self.companion_info[i].id = nil
			self.companion_info[i].icon_wnd:Show(false)
			self.companion_info[i].leader_wnd:Show(false)
			self.companion_info[i].health_wnd:SetText("")
			self.companion_info[i].name_wnd:SetText("")
			self.companion_info[i].dist_wnd:SetText("")
		end
	end
	
	if (axr_main.config:r_value("mm_options","enable_hud_draw",1,true)) == false then
		if table.size(belted_arts) > 0 then
			self:clear(0)
--			deactivate_hud()
		end
	end
	
end

class "ui_companion_hud_row" (CUIListBoxItem)
function ui_companion_hud_row:__init(owner,xml) super(owner,xml)
	self:GetTextItem():SetText("")

	local is_widescreen = utils.is_widescreen()
	local x = is_widescreen and 20 or 35
	local y = 0
--  
    local wind = {
        ["icon_wnd"]        = {64,64,0,0,"ui\\ui_noise"},
        ["leader_wnd"]      = {is_widescreen and 8 or 10,10,0,0,"ui_minimap_squad_leader"},
		["health_wnd"]      = {50,10,50,55,GetFontSmall()},
		["dist_wnd"]        = {50,10,0,55,GetFontMedium()},
        ["name_wnd"]        = {80,20,0,60,GetFontMedium()},
    }
    local function add_wnd(element)
        for wnd, v in pairs(wind) do
            owner.companion_info[element][wnd]:SetWndSize(vector2():set(v[1],v[2]))
            owner.companion_info[element][wnd]:SetWndPos(vector2():set(x+v[3],y+v[4]))
            if type(v[5]) == "string" then
                owner.companion_info[element][wnd]:InitTexture(v[5])
                owner.companion_info[element][wnd]:SetStretchTexture(true)
            else
                owner.companion_info[element][wnd]:SetFont(v[5])
            end
        end
    end
--
    for i=1,8 do
        owner.companion_info[i] = {
            ["id"]              = nil,
            ["icon_wnd"]        = self:AddIconField(1),
            ["leader_wnd"]      = self:AddIconField(1),
            ["name_wnd"]        = self:AddTextField("",1),
            ["health_wnd"]      = self:AddTextField("",1),
            ["dist_wnd"]        = self:AddTextField("",1)
        }
 
		add_wnd(i)

		x = x + (is_widescreen and 84 or 100)
	end
end
