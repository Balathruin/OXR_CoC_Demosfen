--'******************************************************
--'*	Биндер объекта костра .
--'******************************************************
-- name your campfires in SDK <smart_name>_campfire_<number> if you want them to be lit by NPCs

campfires_all = {}
local s_allow, s_pass, s_timer

-- For use with Marshal save state system
local function save_state(m_data)
	--alun_utils.debug_write("bind_campfire:save_state")
	m_data.campfire_states = empty_table(m_data.campfire_states)
	for smart,t in pairs(db.campfire_table_by_smart_names) do 
		for id,binder in pairs(t) do 
			if (binder and binder.campfire) then
				if (binder.campfire:is_on()) then 
					m_data.campfire_states[id] = true
				end
			end
		end
	end
end 

-- called from game_tutorials.xml
function use_campfire(actor,zone,p)
	local pos = db.actor:position()
	for id,binder in pairs(campfires_all) do 
		if (binder and binder.campfire) then
			if (pos:distance_to_sqr(binder.object:position()) <= 2.5) then
				if (binder.campfire:is_on()) then 
					binder.campfire:turn_off()
				else
					local item = db.actor:object("matches")	
        				if item == nil then 
       					get_hud():HidePdaMenu() 
       					SetHudMsg(game.translate_string("Необходим набор для розжига"),4) 
        				return 
     					end
					demosfen.eatmatches()
					binder.campfire:turn_on()
				end
			end
		end 
	end 
end

function on_game_start()
	local function main_loop()
		
		if not (db.actor) then 
			return false
		end
		
		local active_name = game.active_tutorial_name()
		local allow_save = false
		local found = false
		local pos = db.actor:position()
		for id,binder in pairs(campfires_all) do
			if (binder and binder.campfire) then
				local dist = pos:distance_to_sqr(binder.object:position())
				if (dist <= 5) then
					allow_save = true
				end
				if (dist <= 2 and not db.actor:active_item()) then
					if (binder.campfire:is_on()) then
						if not (active_name == "tutorial_campfire_extinguish") then
							game.start_tutorial("tutorial_campfire_extinguish")
						end
					else
						if not (active_name == "tutorial_campfire_ignite") then
							game.start_tutorial("tutorial_campfire_ignite")
						end
					end
					found = true
				end
			end 
		end
		
		if not (found) then
			if (active_name == "tutorial_campfire_extinguish" or active_name == "tutorial_campfire_ignite") then
				game.stop_tutorial()
			end
		end
		
		if (alife_storage_manager.get_state().enable_campfire_mode) then
			_G.ALLOW_SAVING = allow_save
			if (allow_save) then
				SetHudMsg("st_allow_save",1)
			end
		end
		
		return false
	end

	AddUniqueCall(main_loop)
end 

-------------------------------------------------------------------
-------------------------------------------------------------------
function bind(obj)
	obj:bind_object(campfire_binder(obj))
end
-------------------------------------------------------------------
-------------------------------------------------------------------

class "campfire_binder" (object_binder)
function campfire_binder:__init(obj) super(obj)
	self.campfire = obj:get_campfire()
	if (USE_MARSHAL) then 
		RegisterScriptCallback("save_state",save_state)
	end
end

function campfire_binder:reload(section)
	object_binder.reload(self, section)
end

function campfire_binder:reinit()
	object_binder.reinit(self)
end

function campfire_binder:net_spawn(se_abstract)
	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end
	
	campfires_all[self.object:id()] = self

	local id = self.object:id()
	local m_data = alife_storage_manager.get_state()
	if (m_data and m_data.campfire_states and m_data.campfire_states[id]) then 
		-- do not turn off campfire on game load
		m_data.campfire_states[id] = nil
	else
		if (self.campfire and self.campfire:is_on()) then
			self.campfire:turn_off()
		end
	end
	
	local smart_name = string.gsub(self.object:name(), "_campfire_%d*", "")
	if SIMBOARD.smarts_by_names[smart_name] then
		if db.campfire_table_by_smart_names[smart_name] == nil then
			db.campfire_table_by_smart_names[smart_name] = {}
		end
		db.campfire_table_by_smart_names[smart_name][id] = self
	end
	
	return true
end

function campfire_binder:net_destroy(se_abstract)
	local smart_name = string.gsub(self.object:name(), "_campfire_%d*", "")
	if SIMBOARD.smarts_by_names[smart_name] then
		if (db.campfire_table_by_smart_names[smart_name]) then 
			db.campfire_table_by_smart_names[smart_name][self.object:id()] = nil
		end
	end
	
	campfires_all[self.object:id()] = nil
	
	object_binder.net_destroy(self)
end 

function turn_off_campfires_by_smart_name(smart_name,use_rand)
	local smart_campfires = db.campfire_table_by_smart_names[smart_name]
	if smart_campfires ~= nil and not is_empty(smart_campfires) then
		for k,v in pairs (smart_campfires) do
			if (math.random(100) < 20) then
				-- shouldn't be needed with Open Xray because of DX11 lighting fix
				--if (v.object) then
				--	if (render_get_dx_level() == 655361) then 
				--		v.object:disable_anomaly()
				--	end
				--end
				if (v.campfire and v.campfire:is_on()) then
					v.campfire:turn_off()
				end
			end
		end
	end
end
