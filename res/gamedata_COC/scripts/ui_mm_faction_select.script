-- Faction Select for Call of Chernobyl
-- alundaio

local loc_ini = nil 

------------------
-- on_game_load()
------------------
local spawn_path, start_pos
local function on_game_load(binder)
	local config = axr_main.config
	if not (config) then
		return
	end

	local se_actor = alife():actor()
	local need_save
	
	-- IRONMAN MODE
	if (USE_MARSHAL) then
		if (config:r_value("character_creation","new_game_hardcore_mode",1) == true) then
			-- shitty way to make a uuid but should be good enough to track the same saves
			alife_storage_manager.get_state().uuid = GAME_VERSION .. "_" .. tostring(math.random(100)) .. tostring(math.random()) .. tostring(math.random(1000))
			config:w_value("character_creation","new_game_hardcore_mode")
			need_save = true
		end
		if (config:r_value("character_creation","new_game_survival_mode",1) == true) then
			alife_storage_manager.get_state().enable_survival_mode = true
			config:w_value("character_creation","new_game_survival_mode")
			need_save = true
		end
		if (config:r_value("character_creation","new_game_azazel_mode",1) == true) then
			alife_storage_manager.get_state().enable_azazel_mode = true
			config:w_value("character_creation","new_game_azazel_mode")
			need_save = true
		end
		
		if (config:r_value("character_creation","new_game_economy_goodwill",2)) then
			alife_storage_manager.get_state().economy_goodwill = config:r_value("character_creation","new_game_economy_goodwill",2)
			config:w_value("character_creation","new_game_economy_goodwill")
			need_save = true
		end
		if (config:r_value("character_creation","new_game_economy_money",2)) then
			alife_storage_manager.get_state().economy_money = config:r_value("character_creation","new_game_economy_money",2)
			config:w_value("character_creation","new_game_economy_money")
			need_save = true
		end
		if (config:r_value("character_creation","new_game_economy_wpn",2)) then
			alife_storage_manager.get_state().economy_wpn = config:r_value("character_creation","new_game_economy_wpn",2)
			config:w_value("character_creation","new_game_economy_wpn")
			need_save = true
		end
		if (config:r_value("character_creation","new_game_economy_loot",2)) then
			alife_storage_manager.get_state().economy_loot = config:r_value("character_creation","new_game_economy_loot",2)
			config:w_value("character_creation","new_game_economy_loot")
			need_save = true
		end
	end
	
	-- NEW CHARACTER NAME
	local new_character_name = config:r_value("character_creation","new_game_character_name",3) or ""
	if (new_character_name and new_character_name ~= "") then
		config:w_value("character_creation","new_game_character_name")
		need_save = true
		
		new_character_name = new_character_name:gsub("_"," ")
		
		se_actor:set_character_name(new_character_name)
	end
	
	-- NEW CHARACTER ICON
	local new_character_icon = config:r_value("character_creation","new_game_character_icon",3)
	if (new_character_icon and new_character_icon ~= "") then
		db.actor_binder.character_icon = new_character_icon
		
		config:w_value("character_creation","new_game_character_icon")
		need_save = true
	end
	-- CUSTOM Start Equipment
	-- local supplies = config:r_value("character_creation","custom_loadout",1)
	-- if (supplies) then
		-- config:w_value("character_creation","custom_loadout")
		-- need_save = true
	-- end
	
	-- NEW FACTION
	local faction = config:r_value("character_creation","new_game_faction",3) or ""
	
	if (faction and faction ~= "") then
		config:w_value("character_creation","new_game_faction")
		need_save = true
		
		-- Faction Spawn Position
		local start_location = config:r_value("character_creation","new_game_faction_position")
		config:w_value("character_creation","new_game_faction_position")
		
		if start_location and start_location ~= "" then
			local loc_ini = ini_file("plugins\\player_start_locations.ltx")

			start_pos = {}
			table.insert(start_pos,loc_ini:r_float_ex(start_location, "lvid"))
			table.insert(start_pos,loc_ini:r_float_ex(start_location, "gvid"))
			table.insert(start_pos,vector():set(loc_ini:r_float_ex(start_location,"x"),loc_ini:r_float_ex(start_location,"y"),loc_ini:r_float_ex(start_location,"z")))
		else
			spawn_path = nil  --patrol("spawn_player_"..faction)
		end
		
		
		-- Only give the story quests to factions in this table.
		local story_factions = {
			["csky"] = true,
			["dolg"] = true,
			["ecolog"] = true,
			["freedom"] = true,
			["killer"] = true,
			["stalker"] = true,
		}
		
		-- Enable the story quests, or disable their components depending on player choice and faction.
		if (config:r_value("character_creation","new_game_story_mode",1) == true and story_factions[faction] and not has_alife_info("story_mode_disabled")) then
			task_manager.get_task_manager():give_task("mar_find_doctor_task") -- main quest
			task_manager.get_task_manager():give_task("turn_off_brain_scorcher") -- brain scorcher quest
			task_manager.get_task_manager():give_task("turn_off_brain_machine") -- miracle machine quest
		else
			-- Compatibility with many story-specific mechanics.
			give_info("story_mode_disabled")
			
			-- Turns off the Miracle Machine.
			give_info("yan_labx16_switcher_1_off")
			give_info("yan_labx16_switcher_2_off")
			give_info("yan_labx16_switcher_3_off")
			give_info("yan_labx16_switcher_primary_off")
			
			-- Tuns off the Brain Scorcher.
			give_info("bar_deactivate_radar_done")
			
			-- Turns off the Generators.
			give_info("warlab_deactivate_generators_done")
		end
		config:w_value("character_creation","new_game_story_mode") -- clear value
		
		db.actor:set_character_community("actor_"..faction, 0, 0)
		
		-- set default goodwill for all factions vs. actor's new faction
		game_relations.set_community_goodwill_for_faction("actor_"..faction)
		
		-- money and loadout
		local money_max
		local loadout = config:r_value("character_creation","new_game_loadout",3)
		if (loadout and loadout ~= "") then
			config:w_value("character_creation","new_game_loadout")
			need_save = true
			db.actor_binder.character_icon = new_character_icon
			local ini = system_ini()
			local sim = alife()
			local t = alun_utils.str_explode(loadout,",")
			for i=1,#t do
				local kv_pair = alun_utils.str_explode(t[i],"=")
				if (kv_pair[1]) then
					kv_pair[2] = tonumber(kv_pair[2]) or 1
					if (kv_pair[1] == "money") then
						money_max = kv_pair[2]
					elseif (ini:section_exist(kv_pair[1])) then
						--if (utils.is_ammo(kv_pair[1])) then
						--	create_ammo(kv_pair[1],db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0,kv_pair[2])
						--else
							for ii=1,kv_pair[2] do
								sim:create(kv_pair[1],db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),0)
							end
						--end
					end
				end
			end
		end
		
		se_actor:set_profile_name("actor_"..faction)
		
		if (money_max) then
			db.actor:give_money(-db.actor:money()+money_max)
		end 
	end
	
	-- Loading economy values from save file
	axr_main.config:w_value("mm_options","multi_rewards_goodwill", utils.round(alife_storage_manager.get_state().economy_goodwill,2))
	axr_main.config:w_value("mm_options","multi_rewards_money", utils.round(alife_storage_manager.get_state().economy_money,2))
	axr_main.config:w_value("mm_options","multi_wpn_conditions", utils.round(alife_storage_manager.get_state().economy_wpn,2))
	axr_main.config:w_value("mm_options","multi_loot", utils.round(alife_storage_manager.get_state().economy_loot,2))
	
	if (need_save) then
		config:save()
	end
end

local function actor_on_first_update(binder,delta)
	if (spawn_path) then
		start_pos = {}
		start_pos[1] = spawn_path:level_vertex_id(0)
		start_pos[2] = spawn_path:game_vertex_id(0)
		start_pos[3] = spawn_path:point(0)
	end
	
	-- Survival mode
	if (IsSurvivalMode()) then
		game_relations.change_factions_community_num("zombied",0,-5000)
		game_relations.change_factions_community_num("monolith",0,-5000)

		local faction = character_community(db.actor):sub(7)
		if (system_ini():section_exist("survival_squad_"..faction) and start_pos) then
			local sim = alife()
			local squad = sim:create("survival_squad_"..faction,start_pos[3],start_pos[1],start_pos[2])
			if (squad) then
				axr_companions.companion_squads[squad.id] = squad
				squad:create_npc(nil,start_pos[3],start_pos[1],start_pos[2])
				local as
				for k in squad:squad_members() do
					local se_obj = k.object or k.id and sim:object(k.id)
					if (se_obj) then
						game_relations.change_factions_community_num("zombied",k.id,-5000)
						SIMBOARD:setup_squad_and_group(se_obj)
						
						utils.se_obj_save_var(se_obj.id,se_obj:name(),"companion",true)
						utils.se_obj_save_var(se_obj.id,se_obj:name(),"companion_cannot_dismiss",true)
					end
				end
			end
		end
	end

	if start_pos and #start_pos == 3 then
		ChangeLevel(start_pos[3],start_pos[1],start_pos[2],VEC_ZERO)
	end
end

local function actor_on_before_death()
	if not (USE_MARSHAL) then
		return
	end
	
	local uuid = alife_storage_manager.get_state().uuid
	if not (uuid) then
		return -- not in hardcore mode
	end
		
	local fs = getFS()
	local flist = fs:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.scoc")
	local f_cnt = flist:Size()

	for	it=0, f_cnt-1 	do
		local file = flist:GetAt(it)
		local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scoc")))

		--printf("file_name = %s",file_name)
		local f = io.open(fs:update_path('$game_saves$', '')..file_name..".scoc","rb")
		if (f) then
			local data = f:read("*all")
			f:close()
			if (data) then
				local decoded = alife_storage_manager.decode(data)
				if (decoded and decoded.uuid == uuid) then
					printf("match found uuid = %s",uuid)
					ui_load_dialog.delete_save_game(file_name)
				end
			end
		end
	end
end

------------------
-- on_game_start()
------------------
function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

--------------------------------------------------------------
-- faction_ui
--------------------------------------------------------------

class "faction_ui" (CUIScriptWnd)
function faction_ui:__init(owner) super()
	self.owner = owner
	
	self.ini = ini_file("plugins\\player_loadouts.ltx")
	self.selected_faction = nil
	self.f = {"stalker","bandit","csky","dolg","freedom","killer","army","ecolog","monolith"}
	
	self:InitControls(self.f)
	self:InitCallBacks(self.f)
end

function faction_ui:__finalize()
end

function faction_ui:InitControls(f)
	self:SetWndRect				(Frect():set(0,0,1024,768))
	self:Enable					(true)

	local xml					= CScriptXmlInit()
	xml:ParseFile				("ui_mm_faction_select.xml")

	xml:InitStatic				("background", self)
	self.dialog					= xml:InitStatic("main_dialog:dialog", self)
	
	-- Menu Quit
	local btn = xml:Init3tButton("main_dialog:btn_back", self.dialog)
	self:Register(btn,"btn_back")
	
	-- Menu Start Game
	btn = xml:Init3tButton("main_dialog:btn_submit", self.dialog)
	self:Register(btn,"btn_submit")
	
	-- randomizer
	btn = xml:Init3tButton("main_dialog:btn_rand", self.dialog)
	self:Register(btn,"btn_rand")
	
	-- character_name edit box
	xml:InitStatic("main_dialog:cap_character_name", self.dialog)
	self.character_name = xml:InitEditBox("main_dialog:input_character_name",self.dialog)
	self:Register(self.character_name,"input_character_name")
	-- Set Default Name
	self.character_name:SetText(game.translate_string("pri_b305_strelok_name"))
	
	-- Faction select menu
	xml:InitStatic("main_dialog:cap_faction_name", self.dialog)
	self.disp_faction_name = xml:InitTextWnd("main_dialog:disp_faction_name", self.dialog)
	
	local pw
	for i=1,#f do
		self["btn_"..self.f[i]] = xml:Init3tButton("main_dialog:faction_"..f[i],self.dialog)
		self["btn_"..f[i].."_inactive"] = xml:Init3tButton("main_dialog:faction_"..f[i].."_inactive", self.dialog)
		self:Register(self["btn_"..f[i].."_inactive"],"btn_"..f[i].."_inactive_select")
	end
	
	-- Faction description window
	xml:InitStatic("main_dialog:description:background", self.dialog)
	xml:InitFrame("main_dialog:description:list_frame",self.dialog)
	self.scroll_v = xml:InitScrollView("main_dialog:description:scroll_v", self.dialog)
	
	-- Icon
	self.char_icon_base = xml:InitStatic("main_dialog:description:templ_item",nil)
	self.char_icon = xml:InitStatic("main_dialog:description:char_icon",self.char_icon_base)
	self.char_icon:InitTexture("ui_inGame2_Strelok")
	self.scroll_v:AddWindow(self.char_icon_base, true)
	self.char_icon_base:SetAutoDelete(false)
	
	self.desc_text = xml:InitTextWnd("main_dialog:description:desc_win", nil)
	self.scroll_v:AddWindow(self.desc_text, true)
	self.desc_text:SetAutoDelete(false)
	
	self:OnFaction_stalker()

	self.start_list = xml:InitComboBox("main_dialog:list_starts", self.dialog)
	self.start_list:SetAutoDelete(true)
	self:Register(self.start_list, "list_starts")
	self:load_start_positions()

	self.icon_list = xml:InitComboBox("main_dialog:list_icon", self.dialog)
	self.icon_list:SetAutoDelete(true)
	self:Register(self.icon_list, "list_icon")
	self:load_icon_list()
	
	--[[xml:InitStatic("main_dialog:cap_difficulty", self.dialog)
	
	self.difficulty_list = xml:InitComboBox("main_dialog:list_difficulty", self.dialog)
	self.difficulty_list:SetAutoDelete(true)
	self:Register(self.difficulty_list, "list_difficulty")
	self:load_list_difficulty()]]
	
	xml:InitStatic("main_dialog:cap_economy", self.dialog)
	
	self.economy_list = xml:InitComboBox("main_dialog:list_economy", self.dialog)
	self.economy_list:SetAutoDelete(true)
	self:Register(self.economy_list, "list_economy")
	self:load_list_economy()
	
	if (USE_MARSHAL) then
		xml:InitStatic("main_dialog:cap_check_story",self.dialog)
		self.ck_story = xml:InitCheck("main_dialog:check_story",	self.dialog)
		self:Register(self.ck_story,"check_story")
		
		xml:InitStatic("main_dialog:cap_check_hardcore",self.dialog)
		self.ck_hardcore = xml:InitCheck("main_dialog:check_hardcore",	self.dialog)
		self:Register(self.ck_hardcore,"check_hardcore")
		
		xml:InitStatic("main_dialog:cap_check_azazel_mode",self.dialog)
		self.ck_azazel_mode = xml:InitCheck("main_dialog:check_azazel_mode",	self.dialog)
		self:Register(self.ck_azazel_mode,"check_azazel_mode")
		
		xml:InitStatic("main_dialog:cap_check_survival",self.dialog)
		self.ck_survival = xml:InitCheck("main_dialog:check_survival",	self.dialog)
		self:Register(self.ck_survival,"check_survival")
		
		self.ck_states = { 	["ck_survival"] = false,
							["ck_hardcore"] = false,
							["ck_azazel_mode"] = false,
							["ck_story"] = false
		}
	end
	
	-- Hint Window
	self.hint_wnd = xml:InitFrame("hint_wnd:background",self)
	self.hint_wnd:SetAutoDelete(false)
	self.hint_wnd_text = xml:InitTextWnd("hint_wnd:text",self.hint_wnd)
	self.hint_wnd:Show(false)
	
	-- Message Window 
	self.msg_wnd = xml:InitFrame("hint_wnd:background",self)
	self.msg_wnd:SetAutoDelete(false)
	self.msg_wnd_text = xml:InitTextWnd("hint_wnd:text",self.msg_wnd)
	self.msg_wnd_text:SetTextAlignment(2)
	
	self.msg_wnd:Show(false)
	self.msg_wnd:SetColor(GetARGB(255,0,0,0))
end

function faction_ui:InitCallBacks(f)
	self:AddCallback("btn_rand", ui_events.BUTTON_CLICKED, self.OnRandomize, self)
	self:AddCallback("btn_back", ui_events.BUTTON_CLICKED, self.OnQuit, self)
	self:AddCallback("btn_submit", ui_events.BUTTON_CLICKED, self.OnStartGame, self)
	self:AddCallback("list_factions", ui_events.LIST_ITEM_SELECT, self.OnSelectFactionList,	self)
	
	self:AddCallback("list_starts", ui_events.LIST_ITEM_SELECT, self.OnSelectStartLocation, self)
	self:AddCallback("list_icon", ui_events.LIST_ITEM_SELECT, self.OnSelectPortrait, self)
	--self:AddCallback("list_difficulty", ui_events.LIST_ITEM_SELECT, self.OnSelectDifficulty, self)
	self:AddCallback("list_economy", ui_events.LIST_ITEM_SELECT, self.OnSelectEconomy, self)
	
	self:AddCallback("check_story", ui_events.BUTTON_CLICKED, self.OnCheckSetStory, self)
	self:AddCallback("check_azazel_mode", ui_events.BUTTON_CLICKED, self.OnCheckSetAzazel, self)
	
	for i=1,#f do
		self:AddCallback("btn_"..f[i].."_inactive_select", ui_events.BUTTON_CLICKED, self["OnFaction_"..f[i]], self)
	end
end

function faction_ui:Update()
	CUIScriptWnd.Update(self)
	-- Warning messages timer 
	if (self.msg_wnd_timer and time_global() > self.msg_wnd_timer) then 
		self.msg_wnd_timer = nil
		self.msg_wnd:Show(false)
	end
	
	for ck_name,v in pairs(self.ck_states) do 
		if (self[ck_name] and self[ck_name]:IsCursorOverWindow()) then
			self:SetHint(game.translate_string("st_mm_"..ck_name.."_desc"))
			return
		end
	end
	self.hint_wnd:Show(false)
end 

function faction_ui:SetMsg(text,tmr)
	if (text == "") then 
		return 
	end
	self.msg_wnd:Show(true)
	self.msg_wnd_text:SetText(text)
	self.msg_wnd_text:AdjustHeightToText()
	self.msg_wnd_text:SetWndSize(vector2():set(820,self.msg_wnd_text:GetHeight()+10))
	self.msg_wnd_text:SetWndPos(vector2():set(0,20))
	
	self.msg_wnd:SetWndSize(vector2():set(820,self.msg_wnd_text:GetHeight()+44))
	self.msg_wnd:SetWndPos(vector2():set(0,80))

	self.msg_wnd_timer = time_global() + 1000*tmr
end

function faction_ui:SetHint(text,pos)
	if (text == "") then
		return
	end
	self.hint_wnd:Show(true)
	self.hint_wnd_text:SetText(text)
	self.hint_wnd_text:AdjustHeightToText()
	self.hint_wnd:SetWndSize(vector2():set(self.hint_wnd:GetWidth(),self.hint_wnd_text:GetHeight()+44))
	
	pos = pos or GetCursorPosition()
	pos.y = pos.y - self.hint_wnd:GetHeight()
	pos.x = pos.x - self.hint_wnd:GetWidth()
	self.hint_wnd:SetWndPos(pos)
	
	FitInRect(self.hint_wnd,Frect():set(0,0,1024,768),0,100)
end

function faction_ui:OnCheckSetStory()
	self.ck_azazel_mode:SetCheck(false)
	self.ck_states["ck_azazel_mode"] = false
end

function faction_ui:OnCheckSetAzazel()
	self.ck_story:SetCheck(false)
	self.ck_states["ck_story"] = false
end

function faction_ui:OnSelectStartLocation()
	self.start_location = self.start_table[self.start_list:CurrentID()]
end

function faction_ui:OnSelectPortrait()
	self.char_icon:InitTexture(self.icon_list:GetText())
end

--[[function faction_ui:OnSelectDifficulty()
	self.difficulty = self.difficulty_tbl[self.difficulty_list:CurrentID()]
end]]

function faction_ui:OnSelectEconomy()
	self.economy = self.economy_tbl[self.economy_list:CurrentID()]
end

function faction_ui:load_start_positions()
	self.start_list:ClearList()
	self.start_table = iempty_table(self.start_table)
	
	if not (loc_ini) then
		loc_ini = ini_file("plugins\\player_start_locations.ltx")
	end
	
	local n = loc_ini:line_count(self.selected_faction.."_start_locations") or 0
	for i=0, n-1 do
		local result, id, value = loc_ini:r_line(self.selected_faction.."_start_locations",i,"","" )
		table.insert(self.start_table,id)
	end
	self.start_location = self.start_table[1]
	self.start_list:AddItem(game.translate_string("st_mm_faction_random_location"), 0)
	for i=1,#self.start_table do
		self.start_list:AddItem(game.translate_string("ui_st_"..self.start_table[i]),i)
	end
	self.start_list:SetText(game.translate_string("st_mm_faction_random_location"))
end

function faction_ui:load_icon_list()
	local ini = ini_file("plugins\\player_portraits.ltx")
	local def_icon = "ui_inGame2_Strelok"
	
	self.icon_list:ClearList()
	self.icon_list:AddItem(def_icon, 1)
	self.icon_table = iempty_table(self.icon_table)
	
	local section = self.selected_faction.."_portraits"
	local n = ini:section_exist(section) and ini:line_count(section) or 0
	for i = 0, n - 1 do
		local result, id, value = ini:r_line(section, i, "", "" )
		if (id ~= "") then
			self.icon_list:AddItem(id, i + 2)
			table.insert(self.icon_table, id)
		end
	end
	
	self.icon_list:SetText(def_icon)
	self.char_icon:InitTexture(def_icon)
end

--[[function faction_ui:load_list_difficulty()
	self.difficulty_tbl = {"novice","stalker","veteran","master"}
	self.difficulty_list:ClearList()
	for i=1,#self.difficulty_tbl do
		self.difficulty_list:AddItem(game.translate_string("ui_mm_" .. self.difficulty_tbl[i]), i)
	end
	self.difficulty_list:SetText(game.translate_string("ui_mm_" .. self.difficulty_tbl[2]))
end]]

function faction_ui:load_list_economy()
	self.economy_tbl = {"st_econ_1","st_econ_2","st_econ_3","st_econ_4"}
	self.economy_list:ClearList()
	for i=1,#self.economy_tbl do
		self.economy_list:AddItem(game.translate_string(self.economy_tbl[i]), i)
	end
	self.economy_list:SetText(game.translate_string(self.economy_tbl[2]))
end

function faction_ui:OnRandomize()
	local faction = random_choice("stalker","bandit","csky","ecolog","army","monolith","dolg","freedom","killer")
	self:OnFactionSelect(faction)
	
	local subset
	if (faction == "army" or faction == "dolg") then 
		subset = random_choice("private","sergeant","senior_sergeant","lieutenant","captain")
	else 
		subset = random_choice("stalker","bandit","science")
	end

	local ini = system_ini()
	local name_cnt = ini:r_float_ex("stalker_names_"..subset,"name_cnt")
	local last_name_cnt = ini:r_float_ex("stalker_names_"..subset,"last_name_cnt")

	local first_name = game.translate_string( strformat("name_%s_%s",subset,math.random(0,name_cnt-1)) )
	local last_name = game.translate_string( strformat("lname_%s_%s",subset,math.random(0,last_name_cnt-1)) )

	self.character_name:SetText(first_name .. " " .. last_name)
	
	-- set random portrait
	if (self.icon_list and self.icon_table) then
		local t = self.icon_table
		local icon_name = t[math.random(#t)]
		self.icon_list:SetText(icon_name)
		self.char_icon:InitTexture(icon_name)
		--printf(icon_name)
	end
	
	--[[ set random difficulty
	if (self.difficulty_list and self.difficulty_tbl) then
		local t = self.difficulty_tbl
		local diff_pick = t[math.random(#t)]
		self.difficulty_list:SetText(game.translate_string("ui_mm_" .. diff_pick))
		self.difficulty = diff_pick
	end]]
	
	--[[ set random economy
	if (self.economy_list and self.economy_tbl) then
		local t = self.economy_tbl
		local eco_pick = t[math.random(#t)]
		self.economy_list:SetText(game.translate_string(eco_pick))
		self.economy = eco_pick
	end]]
end

function faction_ui:OnFactionSelect(faction)
	local gs = game.translate_string
	local desc = gs("st_faction_"..faction.."_desc") .. "\\n \\n"
	
	desc = desc .. "%c[0,245,245,220]st_mm_faction_relations:\\n"
	
	local t = {"stalker","bandit","csky","ecolog","army","monolith","dolg","freedom","killer"}
	for i=1,#t do
		if not (t[i] == faction) then
			local v = relation_registry.community_relation("actor_"..faction, t[i])
			if (v >= 1000) then
				desc = desc .. "   %c[0,51,255,51]".. gs("st_faction_"..t[i]) .. "\\n"
			elseif (v <= -1000) then
				desc = desc .. "   %c[0,255,0,0]" .. gs("st_faction_"..t[i]) .. "\\n"
			else
				desc = desc .. "   %c[0,255,255,51]" .. gs("st_faction_"..t[i]) .. "\\n"
			end
		end
	end
	
	local sys_ini = system_ini()
	
	desc = desc .. "\\n \\n"
	if axr_main.config:r_value("character_creation","custom_loadout",1) then
		self.default_loadout = alun_utils.collect_sections(self.ini,{"custom"})
		local weapons = alun_utils.str_explode(self.default_loadout["weapons"],",")
		for _, w in ipairs(weapons) do
			if sys_ini:section_exist(w) then
				self.default_loadout[w] = 1
				local ammo = sys_ini:r_string_ex(w,"ammo_class")
				ammo = alun_utils.str_explode(ammo,",")
				ammo = ammo[1] --ammo[math.random(#ammo)]
				self.default_loadout[ammo] = 3
			end
		end
	else	
		self.default_loadout = alun_utils.collect_sections(self.ini,{faction,math.random(1,5)})
		local weapon = alun_utils.collect_section(self.ini,"choose_only_one_"..faction)
		weapon = weapon[math.random(#weapon)]

		local ammo = sys_ini:r_string_ex(weapon,"ammo_class")
		ammo = alun_utils.str_explode(ammo,",")
		ammo = ammo[1] --ammo[math.random(#ammo)]

		self.default_loadout[weapon] = 1
		self.default_loadout[ammo] = 2
	end

	local money = alun_utils.str_explode(self.default_loadout["money"],",")
	money = money[math.random(#money)]
	self.default_loadout["money"] = money

	desc = desc .. "%c[0,245,245,220]st_mm_faction_money: %c[0,188,210,238]".. self.default_loadout["money"] .. " RU\\n \\n"
	desc = desc .. "%c[0,245,245,220]st_mm_faction_equipment:\\n"
	
	self.loadout_str = strformat("money = %s,",self.default_loadout["money"])
	
	for section, amt in pairs(self.default_loadout) do
		if (section ~= "weapons" and section ~= "money" and sys_ini:section_exist(section)) then
			local itm_name = gs(sys_ini:r_string_ex(section,"inv_name") or "")
			amt = amt == "" and {1} or alun_utils.str_explode(amt,",")
			amt = tonumber(amt[math.random(#amt)]) or 0
			if (amt > 0) then
				if (amt > 1) then
					if (utils.is_ammo(section)) then
						local box_size = (sys_ini:r_float_ex(section, "box_size") or 1) * amt
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(box_size).."\\n"
					else
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(amt).."\\n"
					end
					self.loadout_str = strformat("%s %s = %s,",self.loadout_str,section,amt)
				else
					if (utils.is_ammo(section)) then
						local box_size = (sys_ini:r_float_ex(section, "box_size") or 1) * amt
						desc = desc .. "   %c[0,188,210,238]".. itm_name .. " %c[0,245,245,220]x"..tostring(box_size).."\\n"
					else
						desc = desc .. "   %c[0,188,210,238]".. itm_name .."\\n"
					end						
					self.loadout_str = strformat("%s %s = %s,",self.loadout_str,section,amt)
				end
			end
		end
	end
	
	for s in string.gmatch(desc,"(st_mm_faction_[%w%d_]*)") do
		desc = string.gsub(desc,s,game.translate_string(s))
	end

	self.selected_faction = faction
	
	for i=1,#self.f do
		self["btn_"..self.f[i]]:Show(false)
		self["btn_"..self.f[i].."_inactive"]:Show(true)
	end
	
	if (self["btn_".. faction]) then
		self["btn_"..faction]:Show(true)
		self["btn_"..faction.."_inactive"]:Show(false)
	end
	
	self.disp_faction_name:SetText(gs("st_faction_"..faction))
	self.desc_text:SetText(desc)
	self.desc_text:AdjustHeightToText()
	self.desc_text:SetWndSize(vector2():set(self.desc_text:GetWidth(),self.desc_text:GetHeight()+44))

	self.scroll_v:Clear()
	
	self.scroll_v:AddWindow(self.char_icon_base, true)
	self.scroll_v:AddWindow(self.desc_text, true)
	
	self.char_icon_base:SetAutoDelete(false)
	self.desc_text:SetAutoDelete(false)
		
	if self.start_list then
		self:load_start_positions()
	end
	
	if self.icon_list then
		self:load_icon_list()
	end
end

function faction_ui:OnFaction_stalker()
	self:OnFactionSelect("stalker")
end
function faction_ui:OnFaction_bandit()
	self:OnFactionSelect("bandit")
end
function faction_ui:OnFaction_csky()
	self:OnFactionSelect("csky")
end
function faction_ui:OnFaction_dolg()
	self:OnFactionSelect("dolg")
end
function faction_ui:OnFaction_freedom()
	self:OnFactionSelect("freedom")
end
function faction_ui:OnFaction_killer()
	self:OnFactionSelect("killer")
end
function faction_ui:OnFaction_army()
	self:OnFactionSelect("army")
end
function faction_ui:OnFaction_ecolog()
	self:OnFactionSelect("ecolog")
end
function faction_ui:OnFaction_monolith()
	self:OnFactionSelect("monolith")
end
function faction_ui:OnFaction_zombied()
	self:OnFactionSelect("zombied")
end

function faction_ui:OnKeyboard(dik, keyboard_action)
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if res==false then
		local bind = dik_to_bind(dik)
		if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
			if dik == DIK_keys.DIK_ESCAPE then
				self:OnQuit()
			elseif (dik == DIK_keys.DIK_Z) then
				self:OnFaction_zombied()
			elseif (dik == DIK_keys.DIK_S) then
			end
		end
	end
	return res
end

function faction_ui:OnQuit()
	self.owner:ShowDialog(true)
	self.owner:Show(true)
	if (self:IsShown()) then
		self:HideDialog()
	end
	self:Show(false)
end

function faction_ui:OnStartGame()
	-- start game anyway if no config or axr_main script
	if not (axr_main and axr_main.config) then
		self.owner:StartGame()
		return
	end
	
	local character_name = self.character_name:GetText()
	if (character_name == "") then
		-- Require a name to be entered.
		return
	end
	
	if (self.start_location == nil or self.start_location == "" or self.start_list:CurrentID() <= 0) then
		local index = math.random(1,#self.start_table)
		self.start_location = self.start_table[index]
	end
	
	--[[ preparing difficulty
	if (self.difficulty == nil or self.difficulty == "") then
		self.difficulty = self.difficulty_tbl[2]
	end
	local console = get_console()
	console:execute("g_game_difficulty gd_" .. self.difficulty)]]
	
	-- preparing economy values
	if (self.economy == nil or self.economy == "") then
		self.economy = self.economy_tbl[2]
	end
	local econ_ini = ini_file("misc\\economy_difficulty.ltx")
	local econ = self.economy:gsub("st_","")
	local goodwill = econ_ini:r_float_ex(econ, "multi_goodwill") or axr_main.config:r_value("mm_options","multi_rewards_goodwill",2,1)
	local money = econ_ini:r_float_ex(econ, "multi_money") or axr_main.config:r_value("mm_options","multi_rewards_money",2,1)
	local wpn = econ_ini:r_float_ex(econ, "multi_wpn_condition") or axr_main.config:r_value("mm_options","multi_wpn_conditions",2,1)
	local loot = econ_ini:r_float_ex(econ, "multi_loot") or axr_main.config:r_value("mm_options","multi_loot",2,1)
	
	axr_main.config:w_value("character_creation","new_game_economy_goodwill",utils.round(goodwill,2))
	axr_main.config:w_value("character_creation","new_game_economy_money",utils.round(money,2))
	axr_main.config:w_value("character_creation","new_game_economy_wpn",utils.round(wpn,2))
	axr_main.config:w_value("character_creation","new_game_economy_loot",utils.round(loot,2))
	axr_main.config:w_value("character_creation","new_game_hardcore_mode",self.ck_hardcore and self.ck_hardcore:GetCheck() and true or nil)
	axr_main.config:w_value("character_creation","new_game_story_mode",self.ck_story and self.ck_story:GetCheck() and true or nil)
	axr_main.config:w_value("character_creation","new_game_azazel_mode",self.ck_azazel_mode and self.ck_azazel_mode:GetCheck() and true or nil)
	axr_main.config:w_value("character_creation","new_game_survival_mode",self.ck_survival and self.ck_survival:GetCheck() and true or nil)
	axr_main.config:w_value("character_creation","new_game_faction",self.selected_faction or nil)
	axr_main.config:w_value("character_creation","new_game_faction_position",self.start_location or nil)
	axr_main.config:w_value("character_creation","new_game_loadout",self.loadout_str or nil)
	axr_main.config:w_value("character_creation","new_game_character_icon",self.icon_list:GetText())
	
	-- Store info in temp config so it can be read on next game load
	axr_main.config:w_value("character_creation","new_game_character_name", character_name:gsub(" ","_") )
	axr_main.config:save()
	
	-- Start the game
	self.owner:StartGame()
end