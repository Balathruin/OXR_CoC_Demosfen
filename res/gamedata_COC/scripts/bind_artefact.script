--'******************************************************
--'*  Биндер объекта артефакт .
--'******************************************************
function bind(obj)
	obj:bind_object(artefact_binder(obj))
end

class "artefact_binder" (object_binder)
function artefact_binder:__init(obj) super(obj)
	db.storage[self.object:id()] = { }
end
function artefact_binder:net_spawn(se_abstract)
	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end
	db.add_obj(self.object)
	local artefact = self.object:get_artefact()
	local id = self.object:id()
	if bind_anomaly_zone.artefact_ways_by_id[id] ~= nil then
		local anomal_zone = bind_anomaly_zone.parent_zones_by_artefact_id[id]
		local force_xz	= anomal_zone.applying_force_xz
		local force_y	= anomal_zone.applying_force_y
		artefact:FollowByPath(bind_anomaly_zone.artefact_ways_by_id[id],bind_anomaly_zone.artefact_points_by_id[id],vector():set(force_xz,force_y,force_xz))
--		artefact:FollowByPath(bind_anomaly_zone.artefact_ways_by_id[id],0,vector():set(force_xz,force_y,force_xz))
	end

	self.first_call = true
	
	return true
end
function artefact_binder:update(delta)
	object_binder.update(self, delta)
	--printf("pl:art [%s] pos %s", self.object:name(), vec_to_str(self.object:position()))
	
    if self.first_call == true then
		self.first_call = false
		
		local se_obj = alife_object(self.object:id())
		if (se_obj) then
			local m_data = alife_storage_manager.get_se_obj_state(se_obj)
			if (m_data and m_data.offline_condition) then
				self.object:set_condition(tonumber(m_data.offline_condition) or 0.9999999)
				m_data.offline_condition = nil
			end
		end
		
		local ini = self.object:spawn_ini()
		if (ini and ini:section_exist("fixed_bone")) then
			local bone_name = ini:r_string_ex("fixed_bone", "name")
			local ph_shell = self.object:get_physics_shell()
			if ph_shell then
				local ph_element = ph_shell:get_element_by_bone_name(bone_name)
				if not ph_element:is_fixed() then
					ph_element:fix()
				end
			end
		end
    end	
end
function artefact_binder:net_destroy(se_abstract)
	db.del_obj(self.object)
	object_binder.net_destroy(self)
end

function artefact_binder:load(stpk)
	object_binder.load(self,stpk)
end

function artefact_binder:save(stpk)
	object_binder.save(self,stpk)
	local se_obj = alife_object(self.object:id())
	if (se_obj) then
		local m_data = alife_storage_manager.get_se_obj_state(se_obj)
		if (m_data) then 
			m_data.offline_condition = self.object:condition()
		end
	end
end