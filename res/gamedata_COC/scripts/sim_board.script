--'******************************************************
--'*Registry of smart terrains. The playing field simulation.
-- Edited by Alundaio
--'******************************************************
-------------------
local level,alife,game_graph,math,pairs,tostring,tonumber,tsort,tinsert = level,alife,game_graph,math,pairs,tostring,tonumber,table.sort,table.insert
-------------------
-----------------------------------------------------------------------------------
--						Public
-----------------------------------------------------------------------------------
function general_squad_precondition(squad,target)
	-- duty and freedom target eachother
	--[[
	if (squad.player_id == "dolg") then 
		if (target.player_id == "freedom" or is_squad_monster[target.player_id]) then 
			return in_time_interval(8,19)
		end
	elseif (squad.player_id == "freedom") then 
		if (target.player_id == "dolg") then 
			return in_time_interval(8,19)
		end 
	end
	--]]
	
	-- if target squad is not monster
	if (is_squad_monster[target.player_id] ~= true) then 
		if (squad.player_id == "monster_predatory_day") then 
			return in_time_interval(6,19)
		elseif (squad.player_id == "monster_predatory_night") then 
			return in_time_interval(19,6)
		elseif (squad.player_id == "monster_zombied_day") then 
			return in_time_interval(6,19)
		elseif (squad.player_id == "monster_zombied_night") then 
			return in_time_interval(19,6)
		end
	end 
	return false
end

function general_base_precondition(squad,target)
	local need_squads = target.min_population or 0
	
	if (need_squads == 0) then
		if (squad.player_id == "dolg") then 
			if (target.faction == "freedom") then
				need_squads = 1
			end
		elseif (squad.player_id == "freedom") then 
			if (target.faction == "dolg") then
				need_squads = 1
			end	
		elseif (squad.player_id == "army") then 
			need_squads = 3
		elseif (squad.player_id == "monolith") then 
			need_squads = 1
		elseif (squad.player_id == "stalker" or squad.player_id == "csky") then 
			need_squads = 2
		elseif (squad.player_id == "bandit") then
			if (target.faction_controlled and target.faction ~= "bandit") then 
				need_squads = 2
			end
		end
	end
	
	if need_squads > target.max_population then
		need_squads = target.max_population
	end
	
	if (SIMBOARD.smarts[target.id]) and (SIMBOARD.smarts[target.id].squads[squad.id] or SIMBOARD.smarts[target.id].population < target.max_population and SIMBOARD.smarts[target.id].population < need_squads) then
		return true
	end

	return in_time_interval(6,10)
end

function general_territory_precondition(squad,target)
	if (squad.player_id == "monster_predatory_day") then 
		return in_time_interval(6,19)
	elseif (squad.player_id == "monster_predatory_night") then 
		return in_time_interval(19,6)
	elseif (squad.player_id == "monster_zombied_day") then 
		return in_time_interval(6,19)
	elseif (squad.player_id == "monster_zombied_night") then 
		return in_time_interval(19,6)
	elseif (squad.player_id == "monster_vegetarian" or squad.player_id == "zombied") then 
		return true
	end
	return in_time_interval(10,6)
end

function general_resource_precondition(squad,target)
	return in_time_interval(10,6)
end

function general_lair_precondition(squad,target)
	--[[
	if (squad.player_id == "monster_predatory_day") then 
		return in_time_interval(19,6)
	elseif (squad.player_id == "monster_predatory_night") then 
		return in_time_interval(6,19)
	elseif (squad.player_id == "monster_zombied_day") then 
		return in_time_interval(19,6)
	elseif (squad.player_id == "monster_zombied_night") then 
		return in_time_interval(6,19)
	elseif (squad.player_id == "monster_vegetarian" or squad.player_id == "zombied") then 
		return true
	end 
	return in_time_interval(19,6)
	--]]
	return true -- Will fill up all the lairs first, by monster squads
end

--------------------------------------------------------------------------------------------------------
--					SIMULATION BOARD
--------------------------------------------------------------------------------------------------------

class "simulation_board"
function simulation_board:__init()
	--' smart = {smrt, targets = {}, dangers = {}, squads = {}, stayed_squads = {}}
	self.smarts = {}
	self.smarts_by_names = {}
	self.simulation_started = true
	self.squads = {}
	self.tmp_assigned_squad = {}
end

function simulation_board:register_smart(obj)
	--alun_utils.debug_write(strformat("simulation_board:register_smart %s",obj and obj:name()))
	if self.smarts[obj.id] ~= nil then
		printf("Smart already exist in list [%s]", obj:name())
		return
	end

	--self.smarts[obj.id] = {smrt = obj, squads = {}, stayed_squads = {}, population = 0}
	self.smarts[obj.id] = {smrt = obj, squads = {}, population = 0}
	self.smarts_by_names[obj:name()] = obj
end

function simulation_board:unregister_smart(obj)
	--alun_utils.debug_write(strformat("simulation_board:unregister_smart %s",obj and obj:name()))
	self.smarts[obj.id] = nil
	self.smarts_by_names[obj:name()] = nil
end

function simulation_board:start_sim() -- Doesn't seem to be used in 1.6
	self.simulation_started = true
end

function simulation_board:stop_sim() -- Doesn't seem to be used in 1.6
	self.simulation_started = false
end

function simulation_board:set_actor_community(community)
	---- Устанавливаем группировку игрока
	db.actor:set_character_community(actor_communitites[community], 0, 0)
end

-- Инициализация смарта
function simulation_board:init_smart(obj)
	--alun_utils.debug_write(strformat("simulation_board:init_smart %s",obj and obj:name()))
	if self.tmp_assigned_squad[obj.id] ~= nil then
		for k,v in pairs(self.tmp_assigned_squad[obj.id]) do
			self:assign_squad_to_smart(v, obj.id)
		end
		self.tmp_assigned_squad[obj.id] = nil
	end
end

--' Создание нового отряда
function simulation_board:create_squad(spawn_smart, sq_id)
	--alun_utils.debug_write(strformat("simulation_board:create_squad spawn_smart=%s sq_id=%s",spawn_smart and spawn_smart:name(),sq_id))
	local squad_id = tostring(sq_id)
	-- if not (system_ini():section_exist(squad_id)) then
		-- printf("squad section does not exist: %s",squad_id)
		-- return
	-- end

	local squad = alife():create(squad_id,spawn_smart.position,	spawn_smart.m_level_vertex_id,spawn_smart.m_game_vertex_id)
	squad:create_npc(spawn_smart)
	self:assign_squad_to_smart(squad, spawn_smart.id)

	local sim = alife()
	for k in squad:squad_members() do
		local se_obj = k.object or k.id and sim:object(k.id)
		if (se_obj) then
			SIMBOARD:setup_squad_and_group(se_obj)
			-- Alundaio
			SendScriptCallback("squad_on_npc_creation",squad,se_obj,spawn_smart)
			-- Alundaio
		end
    end
	return squad
end
--' Удалить отряд

function simulation_board:remove_squad(squad)
	--alun_utils.debug_write(strformat("simulation_board:remove_squad %s",squad and squad:name()))

	self:assign_squad_to_smart(squad, nil)

	squad:remove_squad()
end
--' Назначение отряда в смарт.
function simulation_board:assign_squad_to_smart(squad, smart_id)
	--alun_utils.debug_write(strformat("simulation_board:assign_squad_to_smart %s smart_id=%s",squad and squad:name(),smart_id))

	if (smart_id and self.smarts[smart_id] == nil) then
		if self.tmp_assigned_squad[smart_id] == nil then
			self.tmp_assigned_squad[smart_id] = {}
		end
		local t = self.tmp_assigned_squad[smart_id]
		t[#t+1] = squad
		return
	end
	
	local old_smart_id = squad.smart_id
	squad.smart_id = nil
	
	-- remove squad from old smart if exist
	if (old_smart_id and self.smarts[old_smart_id] and self.smarts[old_smart_id].squads[squad.id]) then
		self.smarts[old_smart_id].squads[squad.id] = nil
		-- get accurate population count excluding squads using target_smart param
		self.smarts[old_smart_id].population = smart_terrain.smart_terrain_squad_count(SIMBOARD.smarts[old_smart_id].squads)
		SendScriptCallback("squad_on_leave_smart",squad,self.smarts[old_smart_id].smrt)
	end

	if smart_id == nil then
		squad:assign_smart(nil,old_smart_id)
		return
	end

	squad:assign_smart(self.smarts[smart_id].smrt,old_smart_id)

	--' Прописываем отряд в новом смарте.
	if not (self.smarts[smart_id].squads[squad.id]) then
		self.smarts[smart_id].squads[squad.id] = true
		if not (squad:get_script_target()) then
			-- don't count squads with target_smart
			self.smarts[smart_id].population = self.smarts[smart_id].population + 1
		end
	end
	
	SendScriptCallback("squad_on_enter_smart",squad,self.smarts[smart_id].smrt)
end

local community_groups = {}
-- установить squad и group в соответствии с работой
function simulation_board:setup_squad_and_group(se_obj)
	--alun_utils.debug_write(strformat("simulation_board:setup_squad_and_group %s",obj and obj:name()))
	local sim = alife()
	local squad = se_obj.group_id and se_obj.group_id ~= 65535 and sim:object(se_obj.group_id)
	if not (squad) then
		change_team_squad_group(se_obj, se_obj.team, se_obj.squad, 0)
		return
	end
	
	local smart = squad.smart_id and sim:object(squad.smart_id)
	change_team_squad_group(se_obj, se_obj.team, smart and smart.squad_id or se_obj.squad, 1)
end

--' Заполнение стартового расположения
function simulation_board:fill_start_position()

	SendScriptCallback("fill_start_position")
	
	if self.start_position_filled == true then
		return
	end
	self.start_position_filled = true
	
	local setting_ini
	if (IsSurvivalMode()) then 
		setting_ini = ini_file("misc\\simulation_survival_mode.ltx")
	else 
		setting_ini = ini_file("misc\\simulation.ltx")
	end 
	
	local stalker_pop_factor = (axr_main.config:r_value("mm_options","alife_stalker_pop",2) or 1)
	local monster_pop_factor = (axr_main.config:r_value("mm_options","alife_mutant_pop",2) or 1)
		
	local result, squad_section, count, li, lc
	setting_ini:section_for_each(function(section)
		lc = setting_ini:line_count(section)
		for li=0,lc-1 do
			local smart = self.smarts_by_names[section]
			if (smart) then
				result, squad_section, count = setting_ini:r_line(section,li,"","")
				count = tonumber(count) or 1
				
				if (string.find(squad_section,"sim_squad")) then
					count = count*stalker_pop_factor
					if (count == 0.5) then -- just randomly 0 or 1 instead of always rounding to 1
						count = math.random(0,1)
					else 
						count = utils.round(count)
					end
				elseif (string.find(squad_section,"simulation")) then
					count = count*monster_pop_factor
					if (count == 0.5) then 
						count = math.random(0,1)
					else 
						count = utils.round(count)
					end
				end
					
				for i=1,count do
					self:create_squad(smart,squad_section)
				end
			else 
				printf("sim_board:fill_start_position incorrect smart by name %s",section)
			end
		end
	end
	)
end

--' Возвратить смарт по его имени.
function simulation_board:get_smart_by_name(name)
	return self.smarts_by_names[name]
end
--' Возвращает количество отрядов в смарте.
function simulation_board:get_smart_population(smart)
	return self.smarts[smart.id].population
end

--' Получение игрового поля.
function get_sim_board()
	if _G.SIMBOARD == nil then
		_G.SIMBOARD = simulation_board()
	end
	return _G.SIMBOARD
end

local priority_tasks = {}
function simulation_board:get_squad_target(squad)
	local size_t = 0
	
	local object_registry = simulation_objects.object_registry
	local is_available = simulation_objects.available_by_id
	for index=1,simulation_objects.object_registry_size do 
		local se_target = object_registry[index]
		if (not se_target.locked and se_target.id ~= squad.id and is_available[se_target.id]) then 
			local curr_prior = se_target:evaluate_prior(squad)
			if (curr_prior > 0 and se_target:target_precondition(squad)) then
				-- Prioritize 5 potential targets
				if (size_t < 5) then 
					size_t = size_t + 1
					priority_tasks[size_t] = {se_target,curr_prior}
				elseif (curr_prior > priority_tasks[size_t][2]) then 
					for i=1,size_t do 
						if (curr_prior > priority_tasks[i][2]) then 
							priority_tasks[i][2] = curr_prior
							priority_tasks[i][1] = se_target
							break
						end
					end
				end
			end
		end
	end 

	if (size_t > 0) then
		local target = priority_tasks[math.random(size_t)][1]
		--printf("squad=%s size=%s target=%s",squad:name(),size_t,target:name())
		iempty_table(priority_tasks) -- It is better to reuse table to avoid GC
		return target
	end
end

--' Обнуление списка на создании игры.
function clear()
	_G.SIMBOARD = nil
end

