local keep_items = nil
function on_game_start()
	RegisterScriptCallback("on_key_release",on_key_release)
	RegisterScriptCallback("actor_on_item_take_from_box",actor_on_item_take_from_box)
	
	local ini = ini_file("plugins\\itms_manager.ltx")
	keep_items = alun_utils.collect_section(ini,"actor_backpack_keep_items",true)
end

function on_key_release(key)
	if (dik_to_bind(key) == key_bindings.kCUSTOM7) then 
		local backpack = db.actor:item_in_slot(13)
		if not (backpack) then 
			return 
		end
		
		local se_obj = alife():create("inv_actor_backpack",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id())
		if (se_obj) then
			local txt = strformat(game.translate_string("st_itm_stash_of_character"), db.actor:character_name())
			level.map_add_object_spot_ser(se_obj.id, "treasure_player", txt)
			SetHudMsg(game.translate_string("st_stash_created"),4)
			
			local m_data = alife_storage_manager.get_state()
			if not (m_data.player_created_stashes) then 
				m_data.player_created_stashes = {}
			end
			
			m_data.player_created_stashes[se_obj.id] = backpack:section()
			
			local b_id = backpack:id()
			local se_bpk = alife_object(b_id)
			if (se_bpk) then
				alife():release(se_bpk,true)
			end
			
			local ini = system_ini()
			local function transfer_items(id)
				local obj = level.object_by_id(id)
				if (obj) then 
					local function itr_inv(temp,item)
						if (item and item:id() ~= b_id and keep_items[item:section()] == nil) then 
							if (IsAmmo(item) ~= true) or (is_ammo_for_wpn(item:section()) ~= true) then 
								if (ini:r_bool_ex(item:section(),"quest_item",false) == false) then
									if (db.actor:is_on_belt(item) == false and is_in_slot(item) == false) then 
										db.actor:transfer_item(item,obj)
									end
								end
							end						
						end
					end

					db.actor:iterate_inventory(itr_inv)
					return true
				end			
				return false
			end
			CreateTimeEvent(0,"actor_backpack",0,transfer_items,se_obj.id)
		end
	end
end

function actor_on_item_take_from_box(box,obj)
	if (box:section() == "inv_actor_backpack") then
		if (box:is_inv_box_empty()) then
			local hud = get_hud()
			if (hud) then
				hud:HideActorMenu()
			end
			
			local id = box:id()

			level.map_remove_object_spot(id, "treasure_player")
			alife():release( alife_object(id) ,true)
			
			local m_data = alife_storage_manager.get_state()
			if (m_data.player_created_stashes and m_data.player_created_stashes[id]) then 
				local section = m_data.player_created_stashes[id]
				alife():create(section,db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())
				m_data.player_created_stashes[id] = nil
			end
		end
	end
end

function query_create_stash(obj)
	if (obj:clsid() == clsid.equ_backpack) then 
		return game.translate_string("ui_st_create_stash")
	end
end 

function action_create_stash(obj)
	get_hud():HideActorMenu()
	local ui = actor_backpack_ui(obj:id(),obj:section())
	if (ui) then
		ui:ShowDialog(true)
	end
end

-----------------
-- helper
function is_ammo_for_wpn(sec)
	local ini = system_ini()
	for i=1,3 do
		local wpn = db.actor:item_in_slot(i)
		if (wpn) then
			local ammos = alun_utils.parse_list(ini,wpn:section(),"ammo_class",true)
			if (ammos[sec]) then 
				return true 
			end
		end
	end
	return false
end

function is_in_slot(obj)
	for i=1,12 do
		local item = db.actor:item_in_slot(i)
		if (item and item:id() == obj:id()) then 
			return true
		end
	end
	return false
end
-----------------
-- UI 
-----------------
class "actor_backpack_ui" (CUIScriptWnd)
function actor_backpack_ui:__init(id,section) super()
	self:InitControls()
	self:InitCallBacks()
	self.id = id
	self.section = section
end

function actor_backpack_ui:__finalize() end

function actor_backpack_ui:InitControls()
	self:SetWndRect(Frect():set(0,0,1024,768))
	if(device().width/device().height>(1024/768+0.01)) then
		wide = true
	end
	self:SetAutoDelete(true)
	self:Enable(true)

	local xml					= CScriptXmlInit()
	xml:ParseFile				("ui_itm_main.xml")

	self.back					= xml:InitStatic("itm_backpack:background", self)

	self.input = xml:InitEditBox("itm_backpack:input",self)
	self:Register(self.input,"fld_input")

	local btn = xml:Init3tButton("itm_backpack:btn_cancel", self.back)
	self:Register(btn,"btn_cancel")

	btn = xml:Init3tButton("itm_backpack:btn_ok", self.back)
	self:Register(btn,"btn_ok")
end

function actor_backpack_ui:Update()
	CUIScriptWnd.Update(self)
end

function actor_backpack_ui:InitCallBacks()
	self:AddCallback("btn_ok", ui_events.BUTTON_CLICKED, self.OnAccept, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnCancel, self)
end

function actor_backpack_ui:OnAccept()
	local se_obj = alife():create("inv_actor_backpack",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id())
	if (se_obj) then
		local txt = self.input:GetText()
		txt = txt ~= "" and txt or strformat(game.translate_string("st_itm_stash_of_character"), db.actor:character_name())
		level.map_add_object_spot_ser(se_obj.id, "treasure_player", txt)
		SetHudMsg(game.translate_string("st_stash_created"),4)
		
		local m_data = alife_storage_manager.get_state()
		if not (m_data.player_created_stashes) then 
			m_data.player_created_stashes = {}
		end
		
		m_data.player_created_stashes[se_obj.id] = self.section
		
		local se_backpack = alife_object(self.id)
		if (se_backpack) then
			alife():release(se_backpack,true)
		end
	end
	self:HideDialog()
end

function actor_backpack_ui:OnCancel()
	self:HideDialog()
end