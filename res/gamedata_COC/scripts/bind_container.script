containers = {}
se_inv_box_containers = {}

curBoxID = nil

local temp_count = 0 -- Hack to fix ctrl+dbl-click exploit. Happens too fast before items are registered to parent, get_item_count will be inaccurate

function bind(obj)
    obj:bind_object(container_binder(obj))
end

local function inventory_box_can_take(obj,itm,flags)
	--printf("%s item=%s curBoxID=%s inv_box=%s",obj:name(),itm:name(),curBoxID,containers[curBoxID] and containers[curBoxID].id)
	if not (curBoxID and containers[curBoxID] and containers[curBoxID].id == obj:id()) then 
		return 
	end
	
	local dummy_id = itm:id()
	
	-- can't take item that represents self!
	if (curBoxID == dummy_id) then 
		flags.ret_value = false 
		return
	end

	-- can't take other containers
	for id,inv_box_id in pairs(containers) do 
		if (dummy_id == id) then 
			flags.ret_value = false
			return 
		end
	end

	local se_obj = alife_object(obj:id())
	if not (se_obj) then 
		return
	end 

	-- allow only specific item count
	local item_count = get_item_count(obj) + temp_count
	if (se_obj.allow_take_count and item_count >= se_obj.allow_take_count) then
		flags.ret_value = false
		return
	end
	
	temp_count = temp_count + 1
	
	-- allow only certain sections or clsid
	if (se_obj.allow_take_items and #se_obj.allow_take_items > 0) then
		local cls = itm:clsid()
		local sec = itm:section()
		local ret
		for i,v in ipairs(se_obj.allow_take_items) do 
			if (sec == v) then
				return
			elseif (clsid[v] and clsid[v] == cls) then 
				return 
			end
		end
		flags.ret_value = false
		return
	end
end 

local function on_item_use(itm)
	if (system_ini():r_string_ex(itm:section(),"script_binding") == "bind_container.bind") then
		access_inventory(itm)
	end
end 

local function save_state(m_data)
	m_data.se_inv_box_containers = se_inv_box_containers
end 

local function load_state(m_data)
	se_inv_box_containers = m_data.se_inv_box_containers or se_inv_box_containers
	m_data.se_inv_box_containers = nil
end

function on_game_start()
	RegisterScriptCallback("inventory_box_can_take",inventory_box_can_take)
	RegisterScriptCallback("actor_on_item_use", on_item_use)
	RegisterScriptCallback("save_state",save_state)
	RegisterScriptCallback("load_state",load_state)
end
-----------------------------
function calculate_weight(se_inv_box,base)
	local inv_box = level.object_by_id(se_inv_box.id)
	if not (inv_box) then 
		return 
	end
	
	local transfer = {}
	local size_t = 0
	local total_weight = 0
	local function add_items(inv_box, item)
		if (containers[item:id()] and containers[item:id()].id) then
			size_t = size_t + 1
			transfer[size_t] = item
		else
			-- add weight to total
			total_weight = total_weight + (item:weight() or 0)
		end
	end

	-- iterate all items in the inventory box
	inv_box:iterate_inventory_box(add_items, inv_box)
	
	if (size_t > 0) then
		for i,item in ipairs(transfer) do
			inv_box:transfer_item(item,db.actor)
		end
		ActorMenu.get_actor_menu():SetMenuMode(1) -- this is needed or item won't be removed
	end
	
	return base + total_weight
end

function get_item_count(inv_box)
	local count = 0
	local function add_items(inv_box, item)
		count = count + 1
	end

	-- iterate all items in the inventory box
	inv_box:iterate_inventory_box(add_items, inv_box)
	
	return count
end

function use_container(id,pid)
	local box = id and level.object_by_id(id)
	if (box) then
		--level.map_add_object_spot(id, "ui_pda2_actor_box_location", "st_ui_pda_actor_box") -- debug
		get_hud():HideActorMenu()
		curBoxID = pid
		box:use(db.actor)
		return true -- destroy timed event
	end 
	return false -- repeat timed event
end 

local force_close = false
function can_access_inventory(obj)
	if (curBoxID == obj:id() and ActorMenu.get_menu_mode() == 4) then
		force_close = true
		return game.translate_string("st_close")
	end
	return game.translate_string("st_open")
end 

-- called from item section in items.ltx
function access_inventory(obj)
	if (force_close and ActorMenu.get_menu_mode() == 4) then
		force_close = false
		curBoxID = nil
		ActorMenu.get_actor_menu():SetMenuMode(1)
		return
	end
	local id = obj:id()
	curBoxID = id
	local se_inv_box = containers[id] and containers[id].id and alife_object(containers[id].id)
	if not (se_inv_box) then
		-- position under map
		local pos = utils.vector_copy_by_val(level.get_bounding_volume().min)
		pos.y = pos.y + 50
		
		-- create inventory_box_s
		se_inv_box = alife():create("hidden_box",pos,level.vertex_id(pos),db.actor:game_vertex_id())
		se_inv_box_containers[se_inv_box.id] = id
	end
	if (se_inv_box) then
		-- force strictly online
		alife():set_switch_online(se_inv_box.id,true)
		alife():set_switch_offline(se_inv_box.id,false)
		
		containers[id] = containers[id] or {}
		containers[id].id = se_inv_box.id
		
		local sys_ini = system_ini()
		se_inv_box.allow_take_count = sys_ini:r_float_ex(obj:section(),"allow_take_count")
		se_inv_box.allow_take_items = alun_utils.parse_list(sys_ini,obj:section(),"allow_take_list") -- can be list of sections or clsids
		
		-- Object will come online next update so wait
		CreateTimeEvent(id,"container",0,use_container,se_inv_box.id,id)
	end
end
--------------------------------------------------------------------------------
-- Class "container_binder"
--------------------------------------------------------------------------------
class "container_binder" (object_binder)
-- Class constructor
function container_binder:__init(obj) super(obj)

end
-- Class update
function container_binder:update(delta)
    object_binder.update(self, delta)
	
	if self.first_call == true then
		self.first_call = false
		
		local se_obj = alife_object(self.object:id())
		if (se_obj) then
			local m_data = alife_storage_manager.get_se_obj_state(se_obj)
			if (m_data and m_data.container_id) then
				containers[se_obj.id] = { id = m_data.container_id }
				se_inv_box_containers[m_data.container_id] = se_obj.id
			end
		end
		
		local id = self.object:id()
		if (containers[id]) then
			-- release inv_box not linked to an object
			for inv_box_id,item_id in pairs(se_inv_box_containers) do
				if (id == false) then 
					local se_obj = alife():object(inv_box_id)
					if (se_obj and IsInvbox(nil,se_obj:clsid())) then
						alife():release(se_obj)
					end
					se_inv_box_containers[inv_box_id] = nil
				end
			end
		
			local se_inv_box = containers[id].id and alife_object(containers[id].id)
			if (se_inv_box and IsInvbox(nil,se_inv_box:clsid())) then 
				local sys_ini = system_ini()
				se_inv_box.allow_take_count = sys_ini:r_float_ex(self.object:section(),"allow_take_count")
				se_inv_box.allow_take_items = alun_utils.parse_list(sys_ini,self.object:section(),"allow_take_list") -- can be list of sections or clsids
				--level.map_add_object_spot(se_inv_box.id, "ui_pda2_actor_box_location", "st_ui_pda_actor_box") -- debug
				alife():set_switch_online(se_inv_box.id,true)
				alife():set_switch_offline(se_inv_box.id,false)
				self.object:set_weight(calculate_weight(se_inv_box,system_ini():r_float_ex(self.object:section(),"inv_weight")))
			else
				if (containers[id].id and se_inv_box_containers[containers[id].id]) then 
					se_inv_box_containers[containers[id].id] = false
				end
				containers[id] = nil
			end
		end
	end
	
	-- If actor menu is in dead body search mode then check if it's our ID; if so calculate_weight
	if (ActorMenu.get_menu_mode() == 4 and curBoxID == self.object:id()) then
		temp_count = 0
		local se_inv_box = containers[curBoxID] and containers[curBoxID].id and alife_object(containers[curBoxID].id)
		if (se_inv_box) then
			self.object:set_weight(calculate_weight(se_inv_box,system_ini():r_float_ex(self.object:section(),"inv_weight")))
		end
	end
end

-- Reload object
function container_binder:reload(section)
    object_binder.reload(self, section)
end
-- Reinitialize object
function container_binder:reinit()
    object_binder.reinit(self)
end
-- Net spawn
function container_binder:net_spawn(se_abstract)
    if not(object_binder.net_spawn(self, se_abstract)) then
        return false
    end
	
	self.first_call = true
	
    return true
end
-- Net destroy
function container_binder:net_destroy()
	object_binder.net_destroy(self)
end
-- Standart function for save
function container_binder:net_save_relevant()
	return true
end
-- Saving container
function container_binder:save(stpk)
	object_binder.save(self, stpk)
	local se_obj = alife_object(self.object:id())
	if (se_obj) then
		local m_data = alife_storage_manager.get_se_obj_state(se_obj,true)
		if (m_data and bind_container.containers[se_obj.id]) then 
			m_data.container_id = bind_container.containers[se_obj.id].id
		end
	end
end
-- Loading container
function container_binder:load(stpk)
	object_binder.load(self, stpk)
end