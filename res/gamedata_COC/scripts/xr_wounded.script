--	Схема раненного
--	автор: Диденко Руслан (Stohe)
--	TODO:
----------------------------------------------------------------------------------------------------------------------

-----------------------------------------------
local tostring = tostring
-----------------------------------------------

---------------------------------------------------------------------------------------------------------------------
--Evaluators
----------------------------------------------------------------------------------------------------------------------
class "evaluator_wound" (property_evaluator)
function evaluator_wound:__init(name, storage) super(nil, name)
	self.a = storage
end
function evaluator_wound:evaluate ()

	local o = self.object
	if not (IsStalker(o) and o:alive()) then 
		return false 
	end 
	
	if (o:critically_wounded() or o:in_smart_cover()) then 
		return false 
	end
	
	if self.a.wounded_set ~= true then return false end
	
	self.a.wound_manager:update()
	
	if o:best_enemy() and utils.load_var(o, "wounded_fight") == "true" then
		return false
	end
	
	local state = tostring(utils.load_var(o, "wounded_state"))
	if (state == "" or state == "nil") then
		return false
	end
	
	return true
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_wounded" (action_base)
function action_wounded:__init(name, storage) super(nil, name)
		self.a = storage
end
function action_wounded:initialize()
	action_base.initialize (self)
	self.object:set_desired_position()
	self.object:set_desired_direction()
	if self.a.help_start_dialog then
		self.object:set_start_dialog(self.a.help_start_dialog)
	end
	self.object:movement_enabled(false)
	self.object:disable_trade()
	self.object:wounded(true)
end
function action_wounded:execute()
	action_base.execute (self)
	local npc = self.object
	local wound_manager = self.a.wound_manager

	-- Проверяем возможность скушать аптечку.
	if self.a.autoheal == true then
		if wound_manager.can_use_medkit ~= true then
			local begin_wounded = utils.load_var(self.object, "begin_wounded")
			local current_time = time_global()
			if begin_wounded == nil then
				utils.save_var(self.object, "begin_wounded", current_time)
			elseif current_time - begin_wounded > 120000 then
				wound_manager:unlock_medkit()
			end
		end
	end

	local wound_manager_state = tostring(utils.load_var(npc, "wounded_state"))
	if wound_manager_state == "" or wound_manager_state == "nil" then
		printf("wrong wounded animation %s", self.object:name())
		return
	elseif wound_manager_state == "true" then
		local h = hit()
		h.power = 0
		h.direction = self.object:direction()
		h.bone = "bip01_spine"
		h.draftsman = db.actor
		h.impulse = 0
		h.type = hit.wound
		self.object:hit(h)
		return
	end

	local id = npc:id()
	local pid = db.storage[id].victim_surrender
	local po = pid and pid < 65534 and db.storage[pid] and db.storage[pid].object
	if (po and not utils.load_var(npc,"victim_surrender") and npc.psy_health > 0.15) then
		local cur_state = state_mgr.get_state(npc)
		if (cur_state ~= "prisoner") then
			state_mgr.set_state(npc,"prisoner",nil,nil,nil,state_mgr.fast_set_true)
		end
		return
	end
	
	if (pid ~= nil) then
		db.storage[id].victim_surrender = 65535
	end

	local wound_manager_sound = utils.load_var(npc, "wounded_sound")
	if (wound_manager_sound and wound_manager_sound ~= "nil") then 
		xr_sound.set_sound_play(npc:id(), wound_manager_sound)
	end

	local cur_state = state_mgr.get_state(npc)
	if (cur_state ~= wound_manager_state) then
		state_mgr.set_state(npc,wound_manager_state,nil,nil,nil,state_mgr.fast_set_true)
	end
	
	if (self.a.use_medkit) then
		wound_manager:eat_medkit()
	end
end
function action_wounded:finalize()
	action_base.finalize (self)
	self.object:enable_trade()
	self.object:disable_talk()
--  xr_sound.set_sound(self.object, nil)
	self.object:wounded(false)
	self.object:movement_enabled(true)
end

----------------------------------------------------------------------------------------------------------------------
-- Class wound_manager
----------------------------------------------------------------------------------------------------------------------
class "Cwound_manager"
function Cwound_manager:__init(npc, storage)
	self.npc = npc
	self.a = storage
	self.can_use_medkit = false
end
function Cwound_manager:update()
	--' Автовылечивание раненых после боя
--	if self.npc:best_enemy() == nil then
--		self.npc.health = 1
--	end

	local hp	= 100*self.npc.health
	local psy	= 100*self.npc.psy_health

	--printf("PSY [%s] HP [%s]", psy, hp)

	self.state, self.sound = self:process_psy_wound(psy)

	if self.state == "nil" and
		 self.sound == "nil"
	then
		-- проверяем на обычную раненость
		self.state, self.sound = self:process_hp_wound(hp)
		self.fight	= self:process_fight(hp)
		self.victim = self:process_victim(hp)
	else
		-- устанавливаем пси раненость
		self.fight = "false"
		self.cover = "false"
		self.victim = "nil"
	end
	--printf("f[%s]c[%s]v[%s]", utils.to_str(self.fight), utils.to_str(self.cover), utils.to_str(self.victim))
	--printf("st[%s]so[%s]", utils.to_str(self.state), utils.to_str(self.sound))

	utils.save_var(self.npc, "wounded_state", self.state)
	utils.save_var(self.npc, "wounded_sound", self.sound)
	utils.save_var(self.npc, "wounded_fight", self.fight)
	utils.save_var(self.npc, "wounded_victim", self.victim)
end
function Cwound_manager:unlock_medkit()
	self.can_use_medkit = true
end
function Cwound_manager:eat_medkit()
	if (self.can_use_medkit ~= true) then 
		return
	end
	
	self.npc:set_health_ex(1)
	self.npc.psy_health = 1
	
	if self.npc:object("medkit_script") ~= nil then
		alife():release(alife_object(self.npc:object("medkit_script"):id()), true)
	elseif self.npc:object("medkit") ~= nil then
		alife():release(alife_object(self.npc:object("medkit"):id()), true)
	elseif self.npc:object("medkit_army") ~= nil then
		alife():release(alife_object(self.npc:object("medkit_army"):id()), true)
	elseif self.npc:object("medkit_scientic") ~= nil then
		alife():release(alife_object(self.npc:object("medkit_scientic"):id()), true)
	end

	local begin_wounded = utils.load_var(self.npc, "begin_wounded")
	local current_time = time_global()
	if begin_wounded ~= nil and current_time - begin_wounded <= 60000 then
		xr_sound.set_sound_play(self.npc:id(), "help_thanks")
	end

	utils.save_var(self.npc, "begin_wounded", nil)

	self.can_use_medkit = false
	db.storage[self.npc:id()].wounded_already_selected = nil
	--self:update()
	
	state_mgr.set_state(self.npc,"hide_no_wpn",nil,nil,nil,state_mgr.fast_set_true)
end
function Cwound_manager:process_fight(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_fight, hp)
	if key ~= nil then
		if self.a.hp_fight[key].state then
			return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_fight[key].state))
		end
	end
	return "true"
end
function Cwound_manager:process_victim(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_victim, hp)
	if key ~= nil then
		if self.a.hp_victim[key].state then
			return tostring(xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_victim[key].state))
		end
	end
	return "nil"
end
function Cwound_manager:process_hp_wound(hp)
	local key
	key = self:get_key_from_distance(self.a.hp_state, hp)
	if key ~= nil then
		local r1,r2
		if self.npc:see(db.actor) then
			if self.a.hp_state_see[key].state then
				r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].state)
			end
			if self.a.hp_state_see[key].sound then
				r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state_see[key].sound)
			end
		else
			if self.a.hp_state[key].state then
				r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].state)
			end
			if self.a.hp_state[key].sound then
				r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.hp_state[key].sound)
			end
		end
		return tostring(r1),tostring(r2)
	end
	return "nil","nil"
end
function Cwound_manager:process_psy_wound(hp)
	local key
	key = self:get_key_from_distance(self.a.psy_state, hp)
	if key ~= nil then
		local r1,r2
		if self.a.psy_state[key].state then
			r1 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].state)
		end
		if self.a.psy_state[key].sound then
			r2 = xr_logic.pick_section_from_condlist(db.actor, self.npc, self.a.psy_state[key].sound)
		end
		return tostring(r1),tostring(r2)
	end
	return "nil","nil"
end
function Cwound_manager:get_key_from_distance(t, hp)
	local key
	for k,v in pairs(t) do
		if v.dist >= hp then
			key = k
		else
			return key
		end
	end
	return key
end
function Cwound_manager:hit_callback(obj,amt,dir,who,bone_index)
	if bone_index == "from_death_callback" or self.npc:alive() == false then
		return
	end

	if self.npc:critically_wounded() == true then
		return
	end

	self:update()
end

----------------------------------------------------------------------------------------------------------------------
-- binder
----------------------------------------------------------------------------------------------------------------------
function setup_generic_scheme(npc,ini,scheme,section,stype,temp)
	local wounded_section = ini:r_string_ex(section,"wounded")
	local st = xr_logic.assign_storage_and_bind(npc,ini,"wounded",wounded_section,temp)
	st.wound_manager = Cwound_manager(npc, st)
end

function add_to_binder(npc,ini,scheme,section,st,temp)
	local manager = npc:motivation_action_manager ()
	manager:add_evaluator(xr_evaluators_id.sidor_wounded_base, evaluator_wound("wounded", st))

	temp.action = action_wounded("wounded_action", st)

	temp.action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,true))
	temp.action:add_precondition(world_property(stalker_ids.property_alive,true))
	
	temp.action:add_effect(world_property(xr_evaluators_id.sidor_wounded_base,false))
	temp.action:add_effect(world_property(stalker_ids.property_enemy,false))
	
	manager:add_action(xr_actions_id.sidor_act_wounded_base,temp.action)
end

function configure_actions(npc,ini,scheme,section,stype,temp)
	local manager = npc:motivation_action_manager()
	local action = manager:action(xr_actions_id.alife)
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	
	action = manager:action(xr_actions_id.state_mgr + 1)
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))

	action = manager:action(xr_actions_id.state_mgr + 2)
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	
	action = manager:action(stalker_ids.action_combat_planner)
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))

	action = manager:action(stalker_ids.action_danger_planner)
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
end

function reset_generic_scheme(npc,scheme,section,stype,st)
	if (st.wounded) then
		local wounded_section
		if scheme == nil or scheme == "nil" then
			wounded_section = st.ini:r_string_ex(st.section_logic,"wounded")
		else
			wounded_section = st.ini:r_string_ex(section,"wounded")
		end
		init_wounded(npc, st.ini, wounded_section, st.wounded, scheme)
		st.wounded.wound_manager:hit_callback()
	end
end
-- Функция чтения настроек. В нее передается секция, откуда их нужно читать.

function init_wounded(npc, ini, section, st, scheme)
	--'printf("WOUNDED SECTION [%s][%s]", tostring(section), tostring(scheme))
	if tostring(section) == st.wounded_section and
		 tostring(section) ~= "nil"
	then
		return
	end

	st.wounded_section = utils.to_str(section)

	local def = {}
	local npc_community = character_community(npc)
	if (npc_community == "monolith") then
		local wounded_by_state = {"wounded","wounded_heavy","wounded_heavy_2","wounded_heavy_3"}
		local state = wounded_by_state[math.random(#wounded_by_state)]
		def.hp_state			= "20|"..state.."@nil"
		def.hp_state_see		= "20|"..state.."@nil"
		def.psy_state			= ""
		def.hp_victim			= "20|nil"
		def.hp_cover			= "20|false"
		def.hp_fight			= "20|false"
		def.syndata				= ""
		def.help_dialog			= "dm_help_wounded_medkit_dialog"
		def.help_start_dialog	= nil
		def.use_medkit			= true
		def.enable_talk			= true
		def.not_for_help		= false
	elseif npc_community == "zombied" then
		def.hp_state			= "40|wounded_zombie@nil"
		def.hp_state_see		= "40|wounded_zombie@nil"
		def.psy_state			= ""
		def.hp_victim			= "40|nil"
		def.hp_cover			= "40|false"
		def.hp_fight			= "40|false"
		def.syndata				= ""
		def.help_dialog			= nil
		def.help_start_dialog	= nil
		def.use_medkit			= false
		def.enable_talk			= true
		def.not_for_help		= true
	else
		local wounded_by_state 		= {"wounded","wounded_heavy","wounded_heavy_2","wounded_heavy_3"}
		local state 				= wounded_by_state[math.random(#wounded_by_state)]
		local psy_wounded_by_state 	= {"{=best_pistol}psy_armed,psy_pain@wounded_psy","{=best_pistol}psy_shoot,psy_pain@wounded_psy_shoot"}
		local psy_state 			= psy_wounded_by_state[math.random(#psy_wounded_by_state)]
		def.hp_state			= "20|"..state.."@help_heavy"
		def.hp_state_see		= "20|"..state.."@help_heavy"
		def.psy_state			= "20|"..psy_state
		def.hp_victim			= "20|nil"
		def.hp_cover			= "20|false"
		def.hp_fight			= "20|false"
		def.syndata				= ""
		def.help_dialog			= "dm_help_wounded_medkit_dialog"
		def.help_start_dialog	= nil
		def.use_medkit			= true
		def.enable_talk			= true
		def.not_for_help		= false
	end


	if tostring(section) == "nil" then
		-- Загружаем дефолты!
		st.hp_state		= utils.parse_data(npc, def.hp_state)
		st.hp_state_see	= utils.parse_data(npc, def.hp_state_see)
		st.psy_state	= utils.parse_data(npc, def.psy_state)
		st.hp_victim	= utils.parse_data(npc, def.hp_victim)
		st.hp_cover		= utils.parse_data(npc, def.hp_cover)
		st.hp_fight		= utils.parse_data(npc, def.hp_fight)
		st.syndata		= utils.parse_syn_data(npc, def.syndata)
		st.help_dialog	= def.help_dialog
		st.help_start_dialog = def.help_start_dialog
		st.use_medkit   = def.use_medkit
		st.autoheal		= true
		st.enable_talk	= true
		st.not_for_help	= def.not_for_help
	else
		st.hp_state		= utils.parse_data(npc, ini:r_string_ex(section,"hp_state") or def.hp_state)
		st.hp_state_see	= utils.parse_data(npc, ini:r_string_ex(section,"hp_state_see") or def.hp_state_see)
		st.psy_state	= utils.parse_data(npc, ini:r_string_ex(section,"psy_state") or def.psy_state)
		st.hp_victim	= utils.parse_data(npc, ini:r_string_ex(section,"hp_victim") or def.hp_victim)
		st.hp_cover		= utils.parse_data(npc, ini:r_string_ex(section,"hp_cover") or def.hp_cover)
		st.hp_fight		= utils.parse_data(npc, ini:r_string_ex(section,"hp_fight") or def.hp_fight)
		st.syndata		= utils.parse_syn_data(npc, ini:r_string_ex(section,"syndata") or def.syndata)
		st.help_dialog	= ini:r_string_ex(section,"help_dialog") or def.help_dialog
		st.help_start_dialog = ini:r_string_ex(section,"help_start_dialog")
		st.use_medkit   = ini:r_bool_ex(section,"use_medkit",def.use_medkit)
		st.autoheal		= ini:r_bool_ex(section,"autoheal",true)
		st.enable_talk	= ini:r_bool_ex(section,"enable_talk",true)
		st.not_for_help	= ini:r_bool_ex(section,"not_for_help",def.not_for_help)
	end

	-- флажок, что функция хотя бы раз вызывалась
	st.wounded_set = true
end

function unlock_medkit(npc)
	local st = db.storage[npc:id()]
	if (st and st.wounded) then
		st.wounded.wound_manager:unlock_medkit()
	end
end

function eat_medkit(npc)
	local st = db.storage[npc:id()]
	if (st and st.wounded) then
		st.wounded.wound_manager:eat_medkit()
	end
end


function is_wounded(npc)
	local st = db.storage[npc:id()]
	if (st and st.wounded) then
		return tostring(st.wounded.wound_manager.state) ~= "nil"
	end
	return false
end

function is_psy_wounded(npc)
	local st = db.storage[npc:id()]
	if (st and st.wounded) then
		local st_wound_state = tostring(st.wounded.wound_manager.state)
		return st_wound_state == "psy_pain" or st_wound_state == "psy_armed" or st_wound_state == "psy_shoot"
	end
	return false
end

function hit_callback(npc_id) -- Тут может не быть стораджа.
	local st = npc_id and db.storage[npc_id]
	if st and st.wounded then
		st.wounded.wound_manager:hit_callback()
	end
end


function is_heavy_wounded_by_id(npc_id)
	local st = db.storage[npc_id]
	if st and st.wounded then
		local st_wound_state = tostring(st.wounded.wound_manager.state)
		return st_wound_state ~= "nil"
	end
	return false
end
function is_psy_wounded_by_id(npc_id)
	local st = db.storage[npc_id]
	if st and st.wounded then
		local st_wound_state = tostring(st.wounded.wound_manager.state)
		return st_wound_state == "psy_pain" or st_wound_state == "psy_armed" or st_wound_state == "psy_shoot"
	end
	return false
end
