--[[
Callback and module manager for easy plug-in based script management
by Alundaio

1/31/2016
axr_main now auto-executes any script that has on_game_load method. To create a new module, simply
add a on_game_start function
--]]

-- axr_options.ini
config = ini_file_ex("axr_options.ltx",true)

-- load default rspec when axr_options created first time
if not (config:section_exist("graphics")) then
	get_console():execute("cfg_load " .. getFS():update_path('$game_config$', '').."rspec_default.ltx")
	config:w_value("graphics","rspec_default",true)
	config:save()
end
-------------------------------------------------------------------------------------------------

-- Valid Callbacks (named intercepts to avoid namespace conflicts)
-- You must register a callback before or during on_game_load (ie. bind_actor net_spawn)
-- All unused callbacks will have their table deleted from intercepts (see on_game_load for implementation)
local intercepts = {
	-- se_*.script
	server_entity_on_register				= {},
	server_entity_on_unregister				= {},
	
	-- _g.script
	on_before_item_use			= {},
	actor_on_before_hit			= {},
	inventory_box_can_take		= {},
	npc_on_before_hit			= {},
	HudTimerCallback			= {},
	
	-- actor_menu_inventory.script 
	CUIActorMenu_OnItemDropped		= {},
	CUIActorMenu_OnItemFocusReceive = {},
	CUIActorMenu_OnItemFocusLost 	= {},
	CUIActorMenu_CanMoveToPartner	= {},
	
	-- ui_main_menu.script
	main_menu_on_keyboard		= {},
	main_menu_on_init			= {},
--	main_menu_on_init_callbacks	= {},
	main_menu_on_quit			= {},

	-- ui_mm_opt_main.script 
	opt_menu_on_init			= {},
	opt_menu_on_accept			= {},
	opt_menu_on_set_values		= {},
	
	-- xr_motivator.script
	npc_on_use 					= {},
	npc_on_item_take 			= {},
	npc_on_item_drop 			= {},
	npc_on_net_spawn			= {},
	npc_on_net_destroy 			= {},
	npc_on_update				= {},
	npc_on_hit_callback			= {},		-- kind reminder, remember it is still called when they are dead with bone_index == "from_death_callback"
	npc_on_death_callback		= {},
	npc_on_item_take_from_box	= {},
	
	-- xr_combat_ignore.script
	npc_on_fighting_actor		= {},
	
	-- state_mgr_weapon.script
	npc_on_weapon_strapped		= {},
	npc_on_weapon_unstrapped	= {},
	npc_on_weapon_drop			= {},

	-- xr_hear.script
	npc_on_hear_callback		= {},

	-- se_stalker.script
	se_stalker_on_spawn			= {},

	-- se_actor.script
	--se_actor_on_register		= {},			-- use server_entity_on_register check "se_actor" as type_name
	--se_actor_on_unregister		= {},		-- use server_entity_on_unregister
	se_actor_on_STATE_Write		= {},
	se_actor_on_STATE_Read		= {},
	
	-- dxr_achievements
	on_achievement_earned		= {},

	-- xr_corpse_detection.script
	npc_on_get_all_from_corpse 	= {},

	-- sim_board.script
	squad_on_npc_creation		= {},
	fill_start_position			= {},
	squad_on_enter_smart		= {},
	squad_on_leave_smart		= {},
	
	-- sim_squad_scripted.script
	squad_on_npc_death			= {},
	squad_on_update				= {},
	squad_on_first_update		= {},
	squad_on_add_npc			= {},
	--squad_on_register			= {},			-- use server_entity_on_register check "sim_squad_scripted" as type_name
	--squad_on_unregister			= {},		-- use server_entity_on_unregister

	-- smart_terrain.script 
	smart_terrain_on_update		= {},
	
	-- xr_logic.script
	on_pstor_save_all			= {},
	on_pstor_load_all			= {},

	-- bind_stalker_ext.script
	on_level_changing			= {},
	on_key_press				= {},
	on_key_release				= {},
	on_key_hold					= {},
	actor_on_before_death		= {},
	on_game_load				= {},
	actor_on_net_destroy		= {},
	actor_on_first_update		= {},
	actor_on_update				= {},
	actor_on_weapon_fired		= {},
	actor_on_weapon_jammed		= {},
	actor_on_weapon_no_ammo		= {},
	actor_on_weapon_reload		= {},
	actor_on_weapon_zoom_in		= {},
	actor_on_weapon_zoom_out	= {},
	actor_on_item_take			= {},
	actor_on_item_take_from_box = {},
	actor_on_item_drop			= {},
	actor_on_item_use			= {},
	actor_on_trade				= {},
	actor_on_save				= {},
	actor_on_load				= {},
	actor_on_init				= {},
	actor_on_reinit				= {},
	actor_on_torch_enabled		= {},	-- TODO: Export from engine instead
	actor_on_torch_disabled		= {},	-- TODO: Export from engine instead
	actor_on_info_callback		= {},
	actor_on_hit_callback		= {},
	actor_on_attach_vehicle		= {},
	actor_on_detach_vehicle		= {},
	actor_on_use_vehicle		= {},
	actor_on_hud_animation_end  = {},
	actor_item_to_belt			= {},
	actor_item_to_ruck			= {},
	actor_item_to_slot			= {},
	
	-- level_input.script 
	level_input_on_key_press	= {},
	
	-- pda.script
	actor_on_leave_dialog			= {},
	map_spot_menu_add_property		= {},
	map_spot_menu_property_clicked 	= {},

	-- bind_monster.script
	monster_on_update				= {},
	monster_on_hit_callback			= {},
	monster_on_net_spawn			= {},
	monster_on_net_destroy 			= {},
	monster_on_death_callback		= {},
	monster_on_actor_use_callback   = {},

	-- bind_physic_object.script
	physic_object_on_hit_callback 	= {},
	physic_object_on_use_callback 	= {},
	
	-- bind_heli.script 
	heli_on_hit_callback			= {},
	
	-- Custom saving feature (uses marshal)
	save_state						= {},
	load_state						= {},
	
	actor_menu_mode_changed			= {},
	
	TrdWndOpened					= {},
	TrdWndClosed					= {}
}

-----------------------------------------------------------
-- Global Callback Register
-- param 1 - name as type<string> (ie. intercepts[name])
-- param 2 - function to execute as type<function> or userdata with name as function
-----------------------------------------------------------
function callback_set(name,func_or_userdata,only_once)
	if (func_or_userdata == nil) then 
		callstack()
	end
	if (intercepts[name]) then
		intercepts[name][func_or_userdata] = only_once == true
	end
end

function callback_unset(name,func_or_userdata)
	if (intercepts[name]) then
		intercepts[name][func_or_userdata] = nil
	end
end

function make_callback(name,...)
	if (intercepts[name]) then
		for func_or_userdata,v in pairs(intercepts[name]) do 
			if (type(func_or_userdata) == "function") then 
				func_or_userdata(...)
			elseif (func_or_userdata[name]) then
				func_or_userdata[name](func_or_userdata,...)
			end
			if (v == true) then
				intercepts[name][func_or_userdata] = nil
			end
		end
	end
end

--------------------------------------------------------------------------------------------------------------------
-- ON GAME START
--------------------------------------------------------------------------------------------------------------------
function on_game_start()
	local ignore = { 
		["_g.script"] = true,
		["class_registrator.script"] = true,
		["game_registrator.script"] = true,
		["ui_registrator.script"] = true,
		["ce_new_attachable_item.script"] = true,
		["ce_new_game_dm.script"] = true,
		["sim_faction_brain_human.script"] = true,
		["sim_faction_brain_mutant.script"] = true,
		["ce_switcher.script"] = true,
		["axr_main.script"] = true,
		["lua_help.script"] = true,
		["rx_gl.script"] = true
	}
	local t = {}
	local size_t = 0
	local f	= getFS()
	local flist = f:file_list_open_ex("$game_scripts$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.script")
	local f_cnt = flist:Size()
	for	it=0, f_cnt-1 do
		local file = flist:GetAt(it)
		local file_name = file:NameShort()
		--printf("%s size=%s",file_name,file:Size())
		if (file:Size() > 0 and ignore[file_name] ~= true) then
			file_name = file_name:sub(0,file_name:len()-7)
			if (_G[file_name] and _G[file_name].on_game_start) then
				size_t = size_t + 1 
				t[size_t] = file_name -- load all scripts first
			end
		end
	end
	for i=1,#t do
		--printf("%s.on_game_start()",t[i])
		_G[ t[i] ].on_game_start()
	end
end

------------------
-- main_menu_on_init()
------------------
function main_menu_on_init(menu)
	xrs_dyn_music.main_menu_on(menu)
	closecaption.main_menu_on_init(menu)
	--axr_main_options.main_menu_on_init(menu)
end

------------------
-- main_menu_on_quit()
------------------
function main_menu_on_quit(menu)
	closecaption.main_menu_on_quit(menu)
	xrs_dyn_music.main_menu_off(menu)
end

------------------
-- opt_menu_on_init()
------------------
function opt_menu_on_init(menu)
	axr_main_options.opt_menu_on_init(menu)
end

------------------
-- opt_menu_on_accept()
------------------
function opt_menu_on_accept(menu,optMgr,console)
	axr_main_options.opt_menu_on_accept(menu,optMgr,console)
end

------------------
-- opt_menu_on_set_values()
------------------
function opt_menu_on_set_values(menu,optMgr)
	axr_main_options.opt_menu_on_set_values(menu,optMgr)
end

------------------
-- server_entity_on_register
------------------
function server_entity_on_register(se_obj,type_name)
	local id = se_obj.id
	if (id == 0) then
		story_objects.register(id,"actor")
	else
		story_objects.check_spawn_ini_for_story_id(se_obj)
	end
end

------------------
-- server_entity_on_unregister
------------------
-- good place to remove ids from persistent tables
function server_entity_on_unregister(se_obj,type_name)
	local id = se_obj.id
	local m_data = alife_storage_manager.get_state()
	if (m_data) then 
		if (m_data.companion_borrow_item) then
			m_data.companion_borrow_item[id] = nil 
		end
		if (m_data.se_object) then
			m_data.se_object[id] = nil
		end
		if (m_data.game_object) then
			m_data.game_object[id] = nil
		end
	end
	story_objects.unregister(id)
end