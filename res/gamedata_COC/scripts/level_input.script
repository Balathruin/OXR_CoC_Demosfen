
--============== Настройки быстрых сохранений =====================

-- Клавиша быстрого сохранения "Имя_локации-Дата-Время" (сейчас - F8):

	local long_save_btn = "F8"

--============== Настройка завершена =====================



-- called from engine!
local flags = {}

local level_name = "quicksave"
local show_load_dialog


-----------сохранения-------------

local function only_save(save_name)
get_console():execute(save_name)
end

local function short_save()
	local flist = getFS():file_list_open_ex("$game_saves$",	bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.scop")
	local f_cnt = flist and flist:Size() or 0
	local inc = 0
	if (f_cnt > 0) then
	flist:Sort(FS.FS_sort_by_modif_down)	
		for it=0, f_cnt-1 do
		local file_name = flist:GetAt(it):NameFull():sub(0,-6)
		local suff = string.sub(file_name, -2, -1)
			if string.format("%s_%s", level_name, suff) == file_name then
			local d = tonumber(suff)
				if (d) then
				inc = d
				break 
				end
			end
	   	end
	end	
inc =(inc >= axr_main.config:r_value("mm_options","quicksave_cnt",2,5) and 1) or (inc + 1)
	return string.format("save %s_%02d", level_name, inc)
end


local function long_save()
	local y,m,d,h,min = game.get_game_time():get()
	return string.format("save %s %d-%02d-%02d %02d-%02d",level_name,y,m,d,h,min)
end


function action_quick_save()
	if not (db.actor and db.actor:alive()) then
		return
	end
	only_save(short_save())
	return true
end 


function action_long_save()
	if not (db.actor and db.actor:alive()) then
		return
	end
	only_save(long_save())
end


-------------загрузка сохранений

local function load_last_save()
	local console = get_console()
	console:execute("main_menu off")
	console:execute("load_last_save")
end

function action_quick_load()
	if show_load_dialog then
	quick_load_dlg():OnButton_last_save()
	else
	load_last_save()
	end
	return true
end
------------------------------------ called from engine!
function on_key_press(dik,bind)

	if (level.present() and db.actor) then
		--	You must check in your callback, and set flags.ret = true if an action took place
		flags.ret = false
		SendScriptCallback("level_input_on_key_press",dik,bind,flags)
		if (flags.ret == true) then 
			return true
		end
	
		if (bind == key_bindings.kQUICK_SAVE) then
			return action_quick_save()
		elseif (bind == key_bindings.kQUICK_LOAD) then 
			return action_quick_load()
		elseif (bind == key_bindings.kPDA_TAB1) then
			return action_toggle_pda_tab("eptTasks")
		elseif (bind == key_bindings.kPDA_TAB2) then
			return action_toggle_pda_tab("eptRelations")
		elseif (bind == key_bindings.kPDA_TAB3) then
			return action_toggle_pda_tab("eptContacts")
		elseif (bind == key_bindings.kPDA_TAB4) then
			return action_toggle_pda_tab("eptRanking")
		elseif (bind == key_bindings.kPDA_TAB5) then
			return action_toggle_pda_tab("eptLogs")
		elseif (bind == key_bindings.kPDA_TAB6) then
			return action_toggle_pda_tab("eptEncyclopedia")
		end
	end
	
	return false
end

function action_toggle_pda_tab(str)
	local pda_menu = ActorMenu.get_pda_menu()
	if not (pda_menu:IsShown()) then
		pda_menu:ShowDialog(true)
		pda_menu:GetTabControl():SetActiveTab(str)
		pda_menu:SetActiveSubdialog(str)
	else 
		if (pda_menu:GetActiveSection() == str) then
			pda_menu:HideDialog()
		else
			pda_menu:GetTabControl():SetActiveTab(str)
			pda_menu:SetActiveSubdialog(str)
		end
	end
end

-----------колбэки------------

local function on_game_load()
	long_save_btn = DIK_keys['DIK_' .. long_save_btn]
	level_name = game.translate_string(level.name()):lower()
	level_name = string.gsub(level_name,"%p","")
show_load_dialog = axr_main.config:r_value("mm_options","enable_show_load_dialog",1,true)
end

 
local function accept(handler,optMgr,ctrl)
	if (ctrl:GetCheck()) then
	show_load_dialog = true
	else
	show_load_dialog = false	
	end
end

local function opt_menu_on_init(menu)
menu.gameplay_options["show_load_dialog"] = {
		default = true,
		debug_only = false,
		typ = "check",
		on_accept = function(handler,optMgr,ctrl)
			accept(handler,optMgr,ctrl)
		end
		}
end


local function main_menu_on_keyboard(dik,keyboard_action,main_menu,level_present)
	if keyboard_action ~= ui_events.WINDOW_KEY_RELEASED then return end
	if dik == long_save_btn and level_present then
		action_long_save()
	end
end


local function on_key_press(key)
	if (key == long_save_btn) and level.present() then
	action_long_save()
	end
end


function on_game_start()
RegisterScriptCallback("on_key_press",on_key_press)
RegisterScriptCallback("opt_menu_on_init",opt_menu_on_init)
RegisterScriptCallback("on_game_load",on_game_load)
RegisterScriptCallback("main_menu_on_keyboard",main_menu_on_keyboard)
end

--================ Window ============ quick_load_dlg ==

class "quick_load_dlg" (CUIScriptWnd)
function quick_load_dlg:__init() super()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function quick_load_dlg:__finalize()
end

function quick_load_dlg:InitControls()
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_main.xml")
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")
end

function quick_load_dlg:InitCallBacks()
self:AddCallback("msg_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgYes, self)
self:AddCallback("msg_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self)
self:AddCallback("msg_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.OnMsgNo, self)
	self:Register(self, "self")
end

function quick_load_dlg:OnMsgYes()
	self.mbox_mode = 0
	load_last_save()
end

function quick_load_dlg:OnMsgNo()
self.mbox_mode = 0
end

function quick_load_dlg:OnButton_last_save() 
    if not (db.actor and db.actor:alive()) then
	load_last_save()
        return
    end
self.mbox_mode = 1
self.message_box:InitMessageBox ("message_box_confirm_load_save")
self.message_box:ShowDialog(true)
end