---------------------------------------
--	itms_manager
--
-- by Alundaio
---------------------------------
local ini = ini_file("plugins\\itms_manager.ltx")

	--Backpack stash mod
	local BackPackStashEnable = ini:r_bool_ex("backpack_stash","enable",false)
	local BackPackStashAllowInBase = BackPackStashEnable and ini:r_bool_ex("backpack_stash","allow_in_base",false)
	local BackPackStashSpot = BackPackStashEnable and ini:r_string_ex("backpack_stash","map_spot") or "treasure_player" 
	local BackPackStashEnableTip = BackPackStashEnable and ini:r_bool_ex("backpack_stash","enable_news_tip",false)
	local BackPackStashEnableUi = BackPackStashEnable and ini:r_bool_ex("backpack_stash","enable_ui",false)

	-- Sleep bag mod
	local SleepBagEnable = ini:r_bool_ex("sleeping_bag","enable",true)
	local SleepBagRadius = SleepBagEnable and ini:r_float_ex("sleeping_bag","unsafe_radius") or 5000
	local SleepBagPlaceable = SleepBagEnable and ini:r_bool_ex("sleeping_bag","use_placeable",false)
	local SleepBagGameStart = SleepBagEnable and ini:r_bool_ex("sleeping_bag","have_at_start",false)
	local SleepBagSections = SleepBagEnable and alun_utils.collect_section(ini,"sleeping_bag_sections",true)
	local SleepBagPlaceableSections = SleepBagEnable and alun_utils.collect_section(ini,"sleeping_bag_ph_sections",true)

	-- Repair mod
	local RepairModEnable = ini:r_bool_ex("repair_mod","enable",true)
	local RepairTools = RepairModEnable and alun_utils.collect_section(ini,"repair_mod_tools",true)
	local RepairUI = RepairModEnable and ini:r_bool_ex("repair_mod","use_ui",false)

	-- Loot Mutant mod
	local MutantLootEnable = ini:r_bool_ex("mutant_loot_mod","enable",true)
	local MutantLootEnableUI = ini:r_bool_ex("mutant_loot_mod","enable_ui",false)
	local MutantLootDecayTime = ini:r_float_ex("mutant_loot_mod","decay_time") or 7200

	-- Flashlight mod
	local FlashlightModEnable = ini:r_bool_ex("flashlight_mod","enable",false)
	local FlashlightSections = FlashlightModEnable and alun_utils.collect_section(ini,"flashlight_sections",true)

-- Static Message
ShowMessage = nil
ShowMessageInit = nil
ShowMessageTime = nil


function on_game_start()
	RegisterScriptCallback("actor_on_update",actor_on_update)
	RegisterScriptCallback("actor_on_item_drop",actor_on_item_drop)
	RegisterScriptCallback("monster_on_actor_use_callback",monster_on_actor_use_callback)
	RegisterScriptCallback("actor_on_item_use",actor_on_item_use)
	RegisterScriptCallback("actor_on_item_take_from_box",actor_on_item_take_from_box)
	RegisterScriptCallback("physic_object_on_use_callback",physic_object_on_use_callback)

	RegisterScriptCallback("CUIActorMenu_OnItemDropped",on_item_drag_dropped)
	RegisterScriptCallback("CUIActorMenu_OnItemFocusReceive",on_item_focus)
end

function on_item_focus(itm)
	local section = itm:section()
	if (RepairTools[section]) then 
		local ini = system_ini()
		local repair_type = ini:r_string_ex(section,"repair_type")
		if not (repair_type) then 
			return
		end
		
		local function itr(obj)
			if (repair_type == "weapon" and IsWeapon(obj)) then 
				return true 
			elseif (repair_type == "outfit") and (IsOutfit(obj) or IsHeadgear(obj)) then 
				return true
			elseif (repair_type == "all") then 
				local cls = obj:clsid()
				if (IsWeapon(nil,cls) or IsOutfit(nil,cls) or IsHeadgear(nil,cls)) then 
					return true 
				end
			end
			return false
		end 
		
		ActorMenu.get_actor_menu():highlight_for_each_in_slot(itr, 2, 0)
	end 
end 

function on_item_drag_dropped(itm1,itm2,from_slot,to_slot)
	--printf("itm1=%s itm2=%s from_slot=%s to_slot=%s",itm1 and itm1:name(),itm2 and itm2:name(),from_slot,to_slot)
	if (from_slot ~= EDDListType.iActorBag) then 
		return 
	end 
	
	if not (to_slot == EDDListType.iActorSlot or to_slot == EDDListType.iActorBag) then 
		return 
	end
	
	local section = itm1:section()
	if not (RepairTools[section]) then 
		return 
	end

	local ini = system_ini()
	local repair_type = ini:r_string_ex(section,"repair_type")
	if not (repair_type) then 
		return 
	end

	if (repair_type == "weapon") then 
		if not (IsWeapon(itm2)) then 
			return 
		end
	elseif (repair_type == "outfit") then 
		if not (IsOutfit(itm2) or IsHeadgear(itm2)) then 
			return 
		end
	elseif (repair_type == "all") then 
		if not (IsWeapon(itm2) or IsOutfit(itm2) or IsHeadgear(itm2)) then
			return
		end
	else 
		return
	end
	
	local cur_condition = itm2:condition()
	local c_min = ini:r_float_ex(section,"repair_min_condition") or 0
	local c_max = ini:r_float_ex(section,"repair_max_condition") or 0.75
	
	if (cur_condition < c_min) then 
		ui_dyn_msg_box.msg_box_ui("message_box_ok",true,game.translate_string("st_repair_mod_message_box_condition_to_low"))
		return
	elseif (cur_condition >= c_max) then 
		ui_dyn_msg_box.msg_box_ui("message_box_ok",true,game.translate_string("st_repair_mod_message_box_condition_to_high"))
		return	
	end
	
	local c_add = ini:r_float_ex(section,"repair_add_condition") or 0.15
	if (has_alife_info("achieved_mechanized_warfare")) then 
		c_add = c_add + 0.10
	end
	
	local function on_yes(owner,p)
		
		
		local new_condition = cur_condition + c_add
		if (new_condition > c_max) then 
			new_condition = c_max
		end
		
		--printf("%s:set_condition(%s)",itm2:name(),new_condition)
		itm2:set_condition(new_condition)
		
		local use_condition = ini:r_bool_ex(section,"use_condition",false)
		if (use_condition) then 
			local r = itm1:get_remaining_uses()
			if (r-1 >= 0) then
				r = r - 1
				itm1:set_remaining_uses(r)
			end
			if (r <= 0) then 
				local se_obj = alife_object(itm1:id())
				if (se_obj) then 
					alife():release(se_obj,true)
				end
			end
		else 
			local se_obj = alife_object(itm1:id())
			if (se_obj) then 
				alife():release(se_obj,true)
			end
		end
		
		ActorMenu.get_actor_menu():refresh_current_cell_item()
	end
	
	local function on_no(owner,p)
	
	end
	
	local inv_name = game.translate_string(ini:r_string_ex(itm2:section(),"inv_name") or "st_none")
	local msg = strformat(game.translate_string("st_repair_mod_message_box_ask"),inv_name,c_add*100)

	ui_dyn_msg_box.msg_box_ui("message_box_yes_no",true,msg,on_yes,on_no)
end 

local torch_delay
-- bind_stalker update
function actor_on_update()
	if (FlashlightModEnable) then
		local obj = db.actor:active_detector()
		local torch = db.actor:object("device_torch")
		if (obj and FlashlightSections[obj:section()]) then
			if (has_alife_info("enable_device_torch")) then
				db.actor:disable_info_portion("enable_device_torch")
				alife():create("device_torch_dummy",db.actor:position(),0,0,0)
				SetHudMsg(game.translate_string("st_lamp_disconnected"),5)
			end

			if (torch and not torch:torch_enabled()) then
				torch:enable_torch(true)
				torch:attachable_item_load_attach("dev_torch_fl")
			end
		else
			if (torch and not has_alife_info("enable_device_torch")) then
				if (torch:torch_enabled()) then
					torch:enable_torch(false)
					torch_delay = nil
					torch:attachable_item_load_attach("device_torch")
				end
			end
		end
	end
end

-- bind_stalker on_trade
function actor_on_trade(obj,sell_bye,money)

end

-- bind_stalker on_item_take
function actor_item_take(obj)

end

-- bind_stalker on_item_drop
function actor_on_item_drop(obj)
	if not (obj) then
		return
	end
	if (db.actor:has_info("actor_made_wish_for_riches")) then 
		db.actor:transfer_item(obj,db.actor)
	end
end

function monster_on_actor_use_callback(obj,who)
	if not (MutantLootEnable) then
		return
	end

	local looted = utils.se_obj_load_var(obj:id(),obj:name(),"looted")
	if (looted) then
		return
	end

	if (obj:clsid() == clsid.crow) then
		utils.save_var(obj, "looted", true)
	else
		utils.se_obj_save_var(obj:id(),obj:name(),"looted",true)
	end
	xr_corpse_detection.set_valuable_loot(obj:id(),false)

	local st = db.storage[obj:id()]
	if (st and st.death_time and game.get_game_time():diffSec(st.death_time) > MutantLootDecayTime) then
		SetHudMsg(game.translate_string("st_body_decayed"),4)
	else
		local hud = get_hud()
		if (hud) then
			if (MutantLootEnableUI and ui_mutant_loot) then
				ui_mutant_loot.loot_ui(get_hud(),obj:id(),obj:section(),obj:clsid())
			else
				local t = {}
				loot_mutant(nil,obj:clsid(),t)
				for sec,v in pairs(t) do
					for i=1,v.count do
						xr_statistic.inc_counter("field_dressings")
					end
					news_manager.relocate_item(db.actor, "in", sec, v.count)
				end
			end
		end
	end
end


-- bind_stalker on_item_use
function actor_on_item_use(obj)
	if (db.actor:has_info("actor_made_wish_for_riches")) then
		return 
	end

	-- Sleeping bag
	if (SleepBagEnable and SleepBagSections[obj:section()]) then
		local sec = obj:section()
		if (SleepBagPlaceable) then
			local ph_sec = system_ini():r_string_ex(sec,"placeable_section")
			local se_obj = alife():create(ph_sec or "ph_sleepbag",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id())
			level.map_add_object_spot_ser(se_obj.id, "ui_pda2_actor_sleep_location", game.translate_string("st_itm_sleepbag_name"))
		else
			local se_obj = alife():create(sec,db.actor:position(),0,0,0)
			local hud = get_hud()
			if (hud) then
				hud:HideActorMenu()
			end
			local ui = ui_sleep_dialog.sleep_bag(se_obj,sec)
		end
		return
	end

	-- Repair mod
	if (RepairModEnable and RepairTools[obj:section()]) then
		if (RepairUI) then
			local hud = get_hud()
			if (hud) then
				--hud:HideActorMenu()
				local ui = ui_itm_repair and ui_itm_repair.repair_ui(hud,obj,obj:section())
				if (ui) then
					ui:ShowDialog(true)
					ui:FillList()
				end
			end
		else 
			local r = obj:get_remaining_uses()
			if (r+1 <= obj:get_max_uses()) then
				obj:set_remaining_uses(r+1)
			end
		end
	end

	-- Dummy Torch for Flashlight
	if (FlashlightModEnable and obj:section() == "device_torch_dummy") then
		local torch = db.actor:object("device_torch")
		if not (has_alife_info("enable_device_torch")) then
			give_info("enable_device_torch")
			if not (torch) then
				alife():create("device_torch",db.actor:position(),0,0,0)
			end
			SetHudMsg(game.translate_string("st_lamp_equipped"),4)
		end
	end
	
	-- Deployable mgun
	if (obj:section() == "itm_deployable_mgun") then
		local pos = vector():set(device().cam_pos)
		pos:add( vector():set(device().cam_dir):mul(3) )
		alife():create("deployable_mgun",pos,level.vertex_id(pos),db.actor:game_vertex_id())
	end
end

-- bind_stalker take_item_from_iventory_box
function actor_on_item_take_from_box(box,obj)
	if not (box) then
		return
	end

	if not (obj) then
		return
	end

	-- Backpack section
	if (BackPackStashEnable and box:section() == "inv_backpack") then
		if (box:is_inv_box_empty()) then
			local hud = get_hud()
			if (hud) then
				hud:HideActorMenu()
			end

			level.map_remove_object_spot(box:id(), BackPackStashSpot)
			alife():create("itm_backpack",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id(),db.actor:id())

			alife():release( alife_object(box:id()) ,true)
		end
	end
end

function npc_on_item_take_from_box(npc,box,item)

end

-- bind_physic_object use_callback
function physic_object_on_use_callback(obj,who)
	if (SleepBagEnable and SleepBagPlaceableSections[obj:section()]) then
		local hud = get_hud()
		if (hud) then
			hud:HideActorMenu()
		end
		ui_sleep_dialog.sleep_bag(obj:id(),SleepBagPlaceableSections[obj:section()])
	end
end

function is_ammo_for_wpn(sec)
	local sim = alife()
	for i=2,3 do
		local wpn = db.actor:item_in_slot(i)
		if (wpn) then
			local ammos = alun_utils.parse_list(system_ini(),wpn:section(),"ammo_class",true)
			if (ammos[sec]) then 
				return true 
			end
		end
	end
	return false
end



function loot_mutant(obj,cls,t,npc)
	if not (db.actor) then 
		return 
	end 
	
	local cls = cls or obj and obj:clsid()
	if not (cls) then
		return
	end

	local clsid_to_section = {
		[clsid.bloodsucker_s] 	= "bloodsucker",
		[clsid.boar_s] 			= "boar",
		[clsid.burer_s] 		= "burer",
		[clsid.cat_s]			= "cat",
		[clsid.chimera_s]		= "chimera",
		[clsid.controller_s]	= "controller",
		--[clsid.crow]			= "crow",			-- only because in binder it is not saved
		[clsid.dog_s]			= "dog",
		[clsid.flesh_s]			= "flesh",
		[clsid.fracture_s]		= "fracture",
		[clsid.gigant_s]		= "gigant",
		[clsid.karlik_s]		= "karlik",
		[clsid.poltergeist_s]	= "poltergeist",
		[clsid.pseudodog_s]		= "pseudodog",
		[clsid.psy_dog_phantom_s] = "psy_dog",
		[clsid.psy_dog_s]		= "psy_dog",
		[clsid.rat_s]			= "rat",
		[clsid.snork_s]			= "snork",
		[clsid.tushkano_s]		= "tushkano",
		[clsid.zombie_s]		= "zombie"	
	}

	local loot_table = alun_utils.collect_section(ini,clsid_to_section[cls])

	local loot,sec
	for i=1,#loot_table do
		loot = alun_utils.str_explode(loot_table[i],",")
		if (loot and loot[1] and loot[2]) then
			if not (loot[3]) then
				loot[3] = 1
			end

			loot[2] = tonumber(loot[2])
			for i=1,loot[2] do
				if ((math.random(1,100)/100) <= tonumber(loot[3])) then
					--printf("loot_mutant: section=%s",loot[1])
					local se_obj = alife():create(loot[1],npc and npc:position() or db.actor:position(),0,0,npc and npc:id() or 0)
					if (se_obj) then
						if(has_alife_info("achieved_well_dressed") and ((math.random(1,100)/100) <= 0.2)) then
							--printf("bonus loot")
							alife():create(loot[1],npc and npc:position() or db.actor:position(),0,0,npc and npc:id() or 0)
						end
						if (t) then
							local item_section = loot[1]
							if not (t[item_section]) then
								t[item_section] = {}
							end
							t[item_section].count = t[item_section].count and t[item_section].count + 1 or 1
							t[item_section][t[item_section].count] = se_obj.id
							--printf("loot_mutant")
						end
					end
				end
			end
		end
	end
end
