
-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Last edit:	10.01.2015
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9
-- =======================================================================================
-- Modified by Tronex
-- Last modification: 2018/7/17
-- Prevent saving when hardcore save modes are active
-- =======================================================================================


local SKIP_FACTION_SELECTION = false -- TRUE to disable faction selection menu and start normally



class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	math.randomseed(os.time())
	math.random()
	self.mbox_mode = 0
    self:InitControls()
    self:InitCallBacks()
	SendScriptCallback("main_menu_on_init",self)
	if not (level.present()) then
		xrs_debug_tools.on_game_start()
	end
end

function main_menu:__finalize()
end

function main_menu:Update()
	CUIScriptWnd.Update(self)
	-- Warning messages timer 
	if (self.msg_wnd_timer) then 
		self.msg_wnd_timer = self.msg_wnd_timer - 1
		if (self.msg_wnd_timer <= 0) then
			self.msg_wnd_timer = nil
			self.msg_wnd:Show(false)
		end
	end
end 

function main_menu:InitControls()
	self:SetWndRect					(Frect():set(0,0,1024,768))

    local xml						= CScriptXmlInit()
    xml:ParseFile					("ui_mm_main.xml")

    xml:InitStatic					("background", self)
    self.shniaga					= xml:InitMMShniaga("shniaga_wnd",self);

	self.message_box				= CUIMessageBoxEx()
	self:Register					(self.message_box, "msg_box")

	local _ver = xml:InitStatic		("static_version",self)
	local mm						= _G.main_menu.get_main_menu()
	_ver:TextControl():SetText		("Call of Chernobyl ver. " .. (_G.GAME_VERSION))
	_ver:TextControl():SetTextColor (GetARGB(250, 255, 255, 0))
	local _vers = xml:InitStatic	("static_version_2",self)
	_vers:TextControl():SetText		(" + Assenbly by Demosfen [dev.1.0] 31.12.18")
	_vers:TextControl():SetTextColor (GetARGB(250, 0, 255, 0))
--	local _verss = xml:InitStatic	("static_version_3",self)
--	_verss:TextControl():SetText		(" + Patch_0.1 [30.11.17]")
--	_verss:TextControl():SetTextColor (GetARGB(250, 255, 0, 0))

	-- Message Window 
	self.msg_wnd = xml:InitFrame("msg_wnd:background",self)
	self.msg_wnd:SetAutoDelete(false)
	self.msg_wnd_text = xml:InitTextWnd("msg_wnd:text",self.msg_wnd)
	self.msg_wnd_text:SetTextAlignment(2)
	
	self.msg_wnd:Show(false)
	self.msg_wnd:SetColor(GetARGB(255,0,0,0))
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	self:AddCallback("btn_spawn",		ui_events.BUTTON_CLICKED,				self.OnButton_load_spawn,			self)
	-- options
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
    -- AtmosFear options
	self:AddCallback("btn_af_options",  ui_events.BUTTON_CLICKED,				self.OnButton_af_options_clicked,	self)
	-- end AtmosFear options
	-- load
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)

	-- quit
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)

	self:Register(self, "self")
	self:AddCallback("self",	ui_events.MAIN_MENU_RELOADED, self.OnMenuReloaded, self)
end
function main_menu:OnMsgOk()
	if (self.mbox_mode == 2) then
		local console = get_console()
		console:execute("quit")
	end
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()

	if 	self.mbox_mode == 1 then
		self:LoadLastSave()
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	local					console = get_console()
	console:execute			("main_menu off")
	console:execute			("load_last_save")
end

function main_menu:OnButton_last_save()
	if (axr_main.config:r_value("mm_options","enable_only_campfire",1,false) == true) and (db.actor) then
		if (db.actor.health > 0) then
			self.message_box:InitMessageBox("message_box_error")
			self.message_box:SetText("st_only_campfire_load")
			self.message_box:ShowDialog(true)
			return
		end
	end

    if ( alife() == nil) then
        local flist = getFS():file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*"..".scop")
        flist:Sort(FS.FS_sort_by_modif_down)
        local file = flist:GetAt(0)
		if not (file) then 
			return
		end
        local file_name = string.sub(file:NameFull(), 0, (string.len(file:NameFull()) - string.len(".scop")))
       
        local console = get_console()
        console:execute("main_menu off")
        console:execute("start server("..file_name.."/single/alife/load) client(localhost)")
        return
    end
 
    if ( (db.actor ~= nil) and (db.actor:alive() == false) ) then
        self:LoadLastSave   ()
        return
    end
 
    self.mbox_mode          = 1
    self.message_box:InitMessageBox ("message_box_confirm_load_save")
    self.message_box:ShowDialog(true)
end

function main_menu:OnButton_credits_clicked()
	--game.start_tutorial("credits_seq")
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:ShowFactionUI()
end

function main_menu:OnButton_quit_clicked()
	self.message_box:InitMessageBox("message_box_quit_windows")
	self.message_box:ShowDialog(true)
end

function main_menu:OnButton_disconnect_clicked()
	if (axr_main.config:r_value("mm_options","enable_only_campfire",1,false) == true) and (db.actor) then
		if (db.actor.health > 0) then
			self.message_box:InitMessageBox("message_box_error")
			self.message_box:SetText("st_only_campfire_quit")
			self.message_box:ShowDialog(true)
			return
		end
	end

	self.message_box:InitMessageBox("message_box_quit_game")

	if (level.game_id() ~= 1) then
		self.message_box:SetText("ui_mm_disconnect_message")	-- MultiPlayer
	else
		self.message_box:SetText("ui_mm_quit_game_message")		-- SinglePlayer
	end
	self.message_box:ShowDialog(true)
end

function main_menu:OnMessageQuitGame()
	local console = get_console()
	console:execute("disconnect")
end

function main_menu:OnMessageQuitWin()
	local console = get_console()
	console:execute("quit")
end

function main_menu:OnButton_return_game()
	printf("collectgarbage before=%sKb",collectgarbage("count")*1024)
	collectgarbage("collect")
	collectgarbage("collect")
	printf("collectgarbage after=%sKb",collectgarbage("count")*1024)

	local console = get_console()
	console:execute("main_menu off")
	SendScriptCallback("main_menu_on_quit",self)
end

function main_menu:OnButton_new_novice_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_novice")
	self:ShowFactionUI()
end

function main_menu:OnButton_new_stalker_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_stalker")
	self:ShowFactionUI()
end

function main_menu:OnButton_new_veteran_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_veteran")
	self:ShowFactionUI()
end

function main_menu:OnButton_new_master_game()
	local console = get_console()
	console:execute("g_game_difficulty gd_master")
	self:ShowFactionUI()
end

local faction_ui
function main_menu:ShowFactionUI()
	if (SKIP_FACTION_SELECTION) then 
		self:StartGame() 
		return 
	end
	if not (faction_ui) then
		faction_ui = ui_mm_faction_select and ui_mm_faction_select.faction_ui(self)
	end

	if (faction_ui) then
		faction_ui:ShowDialog(true)
		self:HideDialog()
		self:Show(false)
	end
end 

function main_menu:StartGame()
	local console = get_console()

	if (alife() ~= nil) then
		console:execute	("disconnect")
	end
	device():pause(false)
	console:execute("start server(all/single/alife/new) client(localhost)")
	console:execute("main_menu off")
end

function main_menu:OnButton_load_spawn()
	if self.spawn_dlg == nil then
		self.spawn_dlg = ui_spawn_dialog.spawn_dialog()
		self.spawn_dlg.owner = self
	end

	self.spawn_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_save_clicked()

	if (axr_main.config:r_value("mm_options","enable_only_campfire",1,false) == true) then
		self.message_box:InitMessageBox("message_box_error")
		self.message_box:SetText("st_only_campfire_save")
		self.message_box:ShowDialog(true)
		return
	end

	-- Campfire save mode check
	if (alife_storage_manager.get_state().enable_campfire_mode) and (level_weathers.valid_levels[level.name()]) then
		if not (_G.ALLOW_SAVING) then
			local str = strformat(game.translate_string("st_ui_no_save_campfire"),game.translate_string("st_ui_save"))
			SetHudMsg(str,4)
			get_console():execute("main_menu off")
			return
		end
	end
	
	-- Agony save mode check
	if savegame_conditions.check_and_apply("st_ui_save") then
		return
	end
	
	-- Timer save mode check
	if savegame_timer.check_and_apply("st_ui_save") then
		return
	end

	if self.save_dlg == nil then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end

	self.save_dlg:FillList()
	self.save_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if self.opt_dlg == nil then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self.opt_dlg:SetCurrentValues()
	self.opt_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

-- AtmosFear options dialog
function main_menu:OnButton_af_options_clicked()
	if self.af_opt_dlg == nil then
		self.af_opt_dlg = atmosfear_options.af_options_dialog()
		self.af_opt_dlg.owner = self
	end

	self.af_opt_dlg:SetCurrentValues()
	self.af_opt_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end
-- End AtmosFear options dialog
function main_menu:OnButton_load_clicked()
	if (axr_main.config:r_value("mm_options","enable_only_campfire",1,false) == true) and (db.actor) then
		if (db.actor.health > 0) then
			self.message_box:InitMessageBox("message_box_error")
			self.message_box:SetText("st_only_campfire_load")
			self.message_box:ShowDialog(true)
			return
		end
	end

	if self.load_dlg ==nil then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end

	self.load_dlg:FillList()
	self.load_dlg:ShowDialog(true)
	self:HideDialog()
	self:Show(false)
end

function main_menu:Dispatch(cmd, param)  --virtual function
	if cmd == 2 then
		self:OnButton_multiplayer_clicked()
	end
	return true
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
	local console = get_console()

	SendScriptCallback("main_menu_on_keyboard",dik,keyboard_action,self,level.present())

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if (level.present()) then 
			if (dik == DIK_keys.DIK_ESCAPE) then
				if (db.actor and db.actor:alive()) or (IsGameTypeSingle() ~= true) then
					self.OnButton_return_game()
				end
				return true
			elseif (bind == key_bindings.kQUICK_SAVE) then
				level_input.action_quick_save()
				return true
			elseif (bind == key_bindings.kQUICK_LOAD) then 
				level_input.action_quick_load()
				return true
			end
		end

        if dik == DIK_keys.DIK_L then
            console:execute("main_menu 0")
            console:execute("main_menu 1")
        end
		
		if (dik == DIK_keys.DIK_Q) then
			self:OnMessageQuitWin()
               elseif db.actor~=nil and dik==DIK_keys.DIK_F6 then 
                local dir = db.actor:direction() 
                local pos = db.actor:position() 
                pos = pos:add(dir:mul(5))
                db.actor:set_actor_position(pos)
		elseif (dik == DIK_keys.DIK_NUMPAD0) then
			if (reload_system_ini) then
				reload_system_ini()
				clear_ini_cache(system_ini())
				printf("system_ini_reload = success!")
			end
		end

		--mlr
		if (dik == DIK_keys.DIK_S and db.actor~=nil) then		
			give_info("then_you_take_achiev_cheater")			
		end	
		--mlr
	end

	return true
end

function main_menu:OnMenuReloaded()
	self:OnButton_options_clicked()
	self.opt_dlg:OnMenuReloaded()
end

function main_menu:SetMsg(text,tmr)
	if (text == "") then 
		return 
	end
	self.msg_wnd:Show(true)
	self.msg_wnd_text:SetText(text)
	self.msg_wnd_text:AdjustHeightToText()
	self.msg_wnd_text:SetWndSize(vector2():set(1024,self.msg_wnd_text:GetHeight()+10))
	self.msg_wnd_text:SetWndPos(vector2():set(0,20))
	
	self.msg_wnd:SetWndSize(vector2():set(1024,self.msg_wnd_text:GetHeight()+44))
	self.msg_wnd:SetWndPos(vector2():set(0,80))

	self.msg_wnd_timer = 100*tmr
end
