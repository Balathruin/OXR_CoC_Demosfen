local ini = system_ini()
function main(type_obj, amount, dir, who, bone, object)
		local part = "body"
		if bone~= nil and type(bone)=="number" then
--			log("Hit: by "..who:section().." (id="..tostring(who:id())..") to "..object:section().." (id="..tostring(object:id())..") amount="..amount..", bone="..bone)
			if (bone>14) and (bone<20) then
				part = "head"
			elseif (bone>19) and (bone<23) then
				part = "l_arm"
			elseif (bone>22) and (bone<33) then
				part = "l_hand"
			elseif (bone>32) and (bone<36) then
				part = "r_arm"
			elseif (bone>35) and (bone<46) then
				part = "r_hand"
			elseif (bone>3) and (bone<7) then
				part = "l_foot"
			elseif (bone>7) and (bone<11) then
				part = "r_foot"
			end
			if (who ~= nil) then
			  if(who:section() == "explosive_fuelcan")						or
				(who:section() == "ammo_og-7b")								or
				(who:section() == "explosive_gaz_balon")					or
				(who:section() == "explosive_tank")							or
				(who:section() == "explosive_barrel_low")					or
				(who:section() == "explosive_grenade")						or
				(who:section() == "pri_a25_enter_door_explosive_grenade")	or
				(who:section() == "pri_a25_antenna_grenade")				or
				(who:section() == "explosive_hide")							or
				(who:section() == "explosive_particle")						or
				(who:section() == "explosive_barrel")						or
				(who:section() == "explosive_mobiltank")					or
				(who:section() == "explosive_dinamit")						or
				(who:section() == "wpn_mine")								or
				(who:section() == "mine_actor")								or
				(who:section() == "mine_proximity")							or
				
				(who:section() == "ammo_vog-25")							or
				(who:section() == "ammo_vog-25p")							or
				(who:section() == "ammo_m209")								or
				
				(who:section() == "remote_charge")							or
				(who:section() == "ammo_explosive_charge")					or
				(who:section() == "grenade_f1")								or
				(who:section() == "grenade_rgd5")							or
				
--				(who:active_slot() == 4)									or
				((who:active_item()~=nil)									and
				(who:active_item():section() == "wpn_rpg7"))				or
				((who:active_item()~=nil)									and
				(who:active_item():section() == "wpn_rg-6"))  then
						if amount>0.999 then
							if object~= nil then
								local section="meat_default"
								if type_obj == "monster" then
									section="meat_default_monster"
									--part = "body" // Делать бессмысленно, т.к. для монстра мы всегда всегда отправляем кость с номером 1
--									log("Monster found!")
								end
								if ini:section_exist("meat_"..object:section()) then
									section = "meat_"..object:section()
								end
								local model_parts = ""
								if ini:line_exist(section,part) then
									model_parts = ini:r_string(section,part)
								end
								if model_parts == "" then
									return false
								end
								if object:active_item()~= nil then
									object:drop_item(object:active_item())
								end
								local newpart = ""
								for i=1, string.len(model_parts),1 do
									local s = string.sub(model_parts, i,i)
									if s==" " then
									elseif s == "," then
										spawn_part(newpart, object)
										newpart = ""
									else
										newpart=newpart..s
									end
								end
								spawn_part(newpart, object)
								if ini:line_exist(section,"particle") then
									local particle_meat = particles_object(ini:r_string(section,"particle"))
									local p_posit = vector():set(object:position())
									if ini:line_exist(section,"particle_height") then
										p_posit.y = p_posit.y+ini:r_s32(section,"particle_height")
									end
									particle_meat:play_at_pos(p_posit)
								end
								local sobj = alife():object(object:id())
								if sobj then alife():release(sobj, true) end
--								alife():release(alife():object(object:id()), true)
								return true
							end
						end
				end
			end			
--			log(tostring(bone).."==>"..part)
		end
	return false
end

function spawn_part(newpart, object)
	if newpart~= "" then
		n = alife():create(newpart, object:position(), object:level_vertex_id(), object:game_vertex_id())
		db.gwr_meattable = db.gwr_meattable or {}
		db.gwr_meattable[n.id] = device():time_global()
--		log(newpart.." created!")
	end
end

function bind(obj)
    local new_binder = gwr_meatbinder(obj)
    obj:bind_object(new_binder)
end


class "gwr_meatbinder" (object_binder)
function gwr_meatbinder:update(delta)
	if db.gwr_meattable[self.object:id()]~= nil then
		if device():time_global() - 20000 > db.gwr_meattable[self.object:id()] then
			local sobj = alife():object(self.object:id())
			if sobj then alife():release(sobj, true) end
--			alife():release(alife():object(self.object:id()), true)
			db.gwr_meattable[self.object:id()] = nil
		end
	else
			local sobj = alife():object(self.object:id())
			if sobj then alife():release(sobj, true) end
--			alife():release(alife():object(self.object:id()), true)
	end
    object_binder.update(self, delta)
end

function gwr_meatbinder:__init(obj) super(obj)
	 
	local h = hit()
	h.direction = vector():set(math.random(), math.random(),math.random())
	h.draftsman = self.object
	h.power = 1.0
	h.impulse = 120
	h.type = 7
	h:bone("main")
	self.object:hit(h)
end 

function gwr_meatbinder:reload(section)
    object_binder.reload(self, section)
end

function gwr_meatbinder:reinit()
    object_binder.reinit(self)
end

function gwr_meatbinder:net_spawn(data)
    return object_binder.net_spawn(self, data)
end

function gwr_meatbinder:net_destroy()
	if db.gwr_meattable[self.object:id()]~= nil then
		db.gwr_meattable[self.object:id()]=nil
		local sobj = alife():object(self.object:id())
		if sobj then alife():release(sobj, true) end
--		alife():release(alife():object(self.object:id()), true)
	end
    object_binder.net_destroy(self)
end

function gwr_meatbinder:net_save_relevant()
    return true
end

function gwr_meatbinder:save(packet)
    object_binder.save(self, packet)
end

function gwr_meatbinder:load(reader)
    object_binder.load(self, reader)
end