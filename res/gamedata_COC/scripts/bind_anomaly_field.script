--'******************************************************
--'*  Биндер объекта поля аномалий.
--'******************************************************
fields_by_names = {}
fields_all = {}

function bind(obj)
	obj:bind_object(anomaly_field_binder(obj))
end

class "anomaly_field_binder" (object_binder)
function anomaly_field_binder:__init(obj) super(obj)

end

function anomaly_field_binder:reload(section)
	object_binder.reload(self, section)
end

function anomaly_field_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.object:id()] = {}
	self.st = db.storage[self.object:id()]
end

function anomaly_field_binder:net_spawn(se_abstract)
	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end
	db.add_zone(self.object)
	db.add_obj(self.object)
	fields_by_names[self.object:name()] = self
	fields_all[#fields_all+1] = self.object
	return true
end

function anomaly_field_binder:net_destroy()
	db.del_zone( self.object )
	db.del_obj(self.object)
	db.storage[self.object:id()] = nil
	fields_by_names[self.object:name()] = nil
	local id = self.object:id()
	for i=#fields_all,1 do 
		if (fields_all[i]:id() == id) then 
			table.remove(fields_all,i)
			break
		end
	end
	object_binder.net_destroy(self)
end

function anomaly_field_binder:set_enable(bEnable)
	if(bEnable) then
		self.object:enable_anomaly()
	else
		self.object:disable_anomaly()
	end
end

function anomaly_field_binder:update(delta)
	object_binder.update(self, delta)
	--[[ testing
	local itr = function(id)
		local obj = id and alife_object(id)
		printf("%s touch_feel id=%s obj=%s",self.object:name(),id,obj and obj:name())
	end
	self.object:iterate_feel_touch(itr)
	--]]
end

-- Standart function for save
function anomaly_field_binder:net_save_relevant()
	return true
end
