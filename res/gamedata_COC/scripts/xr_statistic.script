-- Modified by Alundaio

actor_statistic = {
					achievements = 0,
					actual_rank = 0,
					actual_reputation = 0,
					arena_battles = 0,
					artefacts_detected = 0,
					artefacts_found = 0,
					best_monster = nil,
					boxes_smashed = 0,
					deaths = 0,
					enemies_surrendered = 0,
					favorite_weapon_sect = nil,
					field_dressings = 0,
					guide_articles = {},
					heli_kills = 0,
					heli_rocket_kills = 0,
					help_wounded = 0,
					killed_monsters = 0,
					killed_stalkers = 0,
					level_changes = -1, -- Increases on start relocation.
					pdas_delivered = 0,
					smart_terrain_visited = {},
					stashes_found = 0,
					storms = 0,
					surges = 0,
					tasks_cancelled = 0,
					tasks_completed = 0,
					tasks_failed = 0,
					visited = { 
								["jupiter"] = false,
								["k00_marsh"] = false,
								["k01_darkscape"] = false,
								["k02_trucks_cemetery"] = false,
								["l01_escape"] = false,
								["l02_garbage"] = false,
								["l03_agroprom"] = false,
								["l04_darkvalley"] = false,
								["l05_bar"] = false,
								["l06_rostok"] = false,
								["l07_military"] = false,
								["l08_yantar"] = false,
								["l09_deadcity"] = false,
								["l10_limansk"] = false,
								["l10_radar"] = false,
								["l10_red_forest"] = false,
								["l11_hospital"] = false,
								["l11_pripyat"] = false,
								["l12_stancia"] = false,
								["l12_stancia_2"] = false,
								["l13_generators"] = false,
								["pripyat"] = false,
								["zaton"] = false,
								["jupiter_underground"] = false,
								["labx8"] = false,
								["l03u_agr_underground"] = false,
								["l04u_labx18"] = false,
								["l08u_brainlab"] = false,
								["l10u_bunker"] = false,
								["l12u_control_monolith"] = false,
								["l12u_sarcofag"] = false,
								["l13u_warlab"] = false,
						}
				}
				
rank_rep = {
			-- Gameplay mechanics.
			achievements		=	{rnk=0,		rpt=0},		-- Not used; see below.
			arena_battles		=	{rnk=25,	rpt=10},
			artefacts_detected	=	{rnk=5,		rpt=0},
			artefacts_found		=	{rnk=5,		rpt=0},
			boxes_smashed		=	{rnk=1,		rpt=0},
			enemies_surrendered	=	{rnk=10,	rpt=0},
			field_dressings		=	{rnk=1,		rpt=0},
			guide_articles		=	{rnk=10,	rpt=0},
			heli_kills			=	{rnk=50,	rpt=25},
			heli_rocket_kills	=	{rnk=25,	rpt=0},		-- Extra points.
			help_wounded		=	{rnk=10,	rpt=10},
			killed_monsters		=	{rnk=5,		rpt=0},
			killed_stalkers		=	{rnk=0,		rpt=0},		-- Not used; see below.
			level_changes		=	{rnk=0,		rpt=0},
			pdas_delivered		=	{rnk=10,	rpt=10},
			stashes_found		=	{rnk=10,	rpt=0},
			storms				=	{rnk=5,		rpt=0},
			surges				=	{rnk=5,		rpt=0},
			tasks_cancelled		=	{rnk=0,		rpt=-25},
			tasks_completed		=	{rnk=50,	rpt=25},
			tasks_failed		=	{rnk=0,		rpt=-25},
			
			-- Gained or lost reputation based on player's faction relations.
			-- Rank is instead handled in 'rank_kill_points' in game_relations.ltx.
			killed_enemy		=	{rnk=0,		rpt=10},
			killed_friend		=	{rnk=0,		rpt=-100},
			killed_neutral		=	{rnk=0,		rpt=-75},
			
			-- Achievements. (Individual)
			-- Global value can be defined above.
			bookworm_food 		=	{rnk=25,	rpt=0},
			completionist 		=	{rnk=50,	rpt=0},
			down_to_earth		=	{rnk=25,	rpt=0},
			duga_free			=	{rnk=25,	rpt=0},
			geologist			=	{rnk=25,	rpt=0},
			heavy_pockets		=	{rnk=25,	rpt=0},
			infopreneur			=	{rnk=25,	rpt=0},
			mechanized_warfare	=	{rnk=25,	rpt=0},
			patriarch			=	{rnk=25,	rpt=0},
			radiotherapy		=	{rnk=25,	rpt=0},
			rag_and_bone		=	{rnk=25,	rpt=0},
			silver_or_lead		=	{rnk=25,	rpt=0},
			tourist				=	{rnk=25,	rpt=0},
			well_dressed		=	{rnk=25,	rpt=0},
			wishful_thinking	=	{rnk=25,	rpt=0},
}

weapons_table = {}

artefacts_table = {
	af_cristall = false,
	af_blood = false,
	af_electra_sparkler = false,
	af_cristall_flower = false,
	af_medusa = false,
	af_fireball = false,
	af_mincer_meat = false,
	af_electra_flash = false,
	af_night_star = false,
	af_dummy_glassbeads = false,
	af_soul = false,
	af_electra_moonlight = false,
	af_dummy_battery = false,
	af_vyvert = false,
	af_fuzz_kolobok = false,
	af_gravi = false,
	af_eye = false,
	af_baloon = false,
	af_dummy_dummy = false,
	af_gold_fish = false,
	af_fire = false,
	af_glass = false,
	af_ice = false,
}

taken_artefacts = {}

function on_game_start()
	RegisterScriptCallback("on_game_load",on_game_load)
	RegisterScriptCallback("actor_on_item_take",actor_on_item_take)
	RegisterScriptCallback("npc_on_death_callback",npc_on_death_callback)
	RegisterScriptCallback("on_level_changing",on_level_changing)
	init_ranks_reps()
end

function on_level_changing()
	inc_counter("level_changes")
end

function on_game_load()
	actor_statistic.visited[level.name()] = true
end

function actor_on_item_take(item)
	if IsArtefact(item) then
		local artefact = item:get_artefact()
		if (artefact) then
			local anomal_zone = bind_anomaly_zone.parent_zones_by_artefact_id[item:id()]
			if anomal_zone ~= nil then
				anomal_zone:on_artefact_take(item)
				inc_counter("artefacts_detected")
			else
				bind_anomaly_zone.artefact_ways_by_id[item:id()] = nil
			end
			artefact:FollowByPath("NULL",0,vector():set(500,500,500))
			inc_counter_artefacts(item:id())
		end
	end
end

function save_state(data)
	--alun_utils.debug_write("xr_statistic.save_state")
	if not (data.xr_statistic) then
		data.xr_statistic = {}
	end

	data.xr_statistic.actor_statistic = actor_statistic
	data.xr_statistic.artefacts_table = artefacts_table
	data.xr_statistic.taken_artefacts = taken_artefacts
	data.xr_statistic.weapons_table = weapons_table
end

function load_state(data)
	if not (data.xr_statistic) then
		return
	end
	-- previous save compatibility
	for i,j in pairs(actor_statistic) do
		if data.xr_statistic.actor_statistic[i] == nil then
			data.xr_statistic.actor_statistic[i] = actor_statistic[i]
		end
	end
	
	actor_statistic = data.xr_statistic.actor_statistic or actor_statistic
	artefacts_table = data.xr_statistic.artefacts_table or artefacts_table
	taken_artefacts = data.xr_statistic.taken_artefacts or taken_artefacts
	weapons_table = data.xr_statistic.weapons_table or weapons_table

	data.xr_statistic = nil
end

function inc_achievement(achievement)
	inc_counter("achievements")
	if rank_rep[achievement] then
		inc_actor_rank(rank_rep[achievement].rnk)
		inc_actor_reputation(rank_rep[achievement].rpt)
	end
end

function inc_counter(statistic)
	if actor_statistic[statistic] and type(actor_statistic[statistic]) == "number" then
		actor_statistic[statistic] = actor_statistic[statistic] + 1
	end
	if rank_rep[statistic] then
		inc_actor_rank(rank_rep[statistic].rnk)
		inc_actor_reputation(rank_rep[statistic].rpt)
	end
end

function inc_counter_artefacts(art_id)
	if(taken_artefacts[art_id]==nil) then
		inc_counter("artefacts_found")
		taken_artefacts[art_id] = art_id
		local s_art = alife_object(art_id)
		if(s_art and s_art:section_name()) then
			artefacts_table[s_art:section_name()] = true
		end
	end
end

function npc_on_death_callback(victim,who)
	if not (who and victim) then return end
	if not (who:id() == db.actor:id()) then return end
	
	-- Increment kill stalkers stat.
	inc_counter("killed_stalkers")
	
	local npc_faction = character_community(victim)
	local actor_faction = character_community(who)
	
	-- Kiled a friendly NPC.
	if (xr_conditions.is_factions_friends(nil, nil, { npc_faction, actor_faction })) then
		inc_actor_rank(rank_rep.killed_friend.rnk)
		inc_actor_reputation(rank_rep.killed_friend.rpt)
--		printf("killed friendly")
	
	-- Killed an enemy NPC.
	elseif (xr_conditions.is_factions_enemies(nil, nil, { npc_faction, actor_faction })) then
		inc_actor_rank(rank_rep.killed_enemy.rnk)
		inc_actor_reputation(rank_rep.killed_enemy.rpt)
--		printf("killed enemy")
	
	-- Killed a neutral NPC.
	else
		inc_actor_rank(rank_rep.killed_neutral.rnk)
		inc_actor_reputation(rank_rep.killed_neutral.rpt)
--		printf("killed neutral")
	end
	
end

function set_best_weapon(hit_amount)
	-- Weapon currently equipped.
	local active_item = db.actor:active_item()
	
	-- If equipped is not a weapon or does not exist, return.
	if not (active_item and IsWeapon(active_item)) then
		return
	end

	-- A section called 'parent_section' is used by AO3 and CWP.
	-- It tells them which weapon is the 'parent' of a modified weapon.
	-- Example: An AK-74 with an EKP sight attach has a parent_section of 'wpn_ak74'.
	local parent_section = system_ini():r_string_ex(active_item:section(), "parent_section") or active_item:section()

	-- By using this section we can have stats 'stack' for weapons regardless of attached scopes.
	-- Of course if this section does not exist then it will just default to the weapon section name instead.
	hit_amount = utils.clamp(hit_amount/100,0,1)
	weapons_table[parent_section] = weapons_table[parent_section] and weapons_table[parent_section] + hit_amount or hit_amount

	for sec,v in spairs(weapons_table, function(t,a,b) return t[b] < t[a] end) do
		actor_statistic.favorite_weapon_sect = sec
		return
	end	
end

function get_best_weapon()
	local weapon_name = actor_statistic.favorite_weapon_sect
	if (weapon_name == nil) then weapon_name = "wpn_knife" end
	return game.translate_string(system_ini():r_string_ex(weapon_name, "inv_name"))
end

function smart_terrain_mark_visited(smart)
	actor_statistic.smart_terrain_visited[smart:name()] = true
	if (fast_travel.quick_travel_smarts and fast_travel.quick_travel_smarts[smart:name()]) then 
		if (level.map_has_object_spot(smart.id, "fast_travel") == 0) then 
			level.map_add_object_spot(smart.id, "fast_travel", "st_pda_fast_travel")
		end
	end
end 

function save(package)
	if (USE_MARSHAL) then
		return
	end
	package:w_u16(actor_statistic.arena_battles)
	package:w_u16(actor_statistic.surges)
	package:w_u16(actor_statistic.storms)
	package:w_u16(actor_statistic.tasks_completed)
	package:w_u16(actor_statistic.tasks_failed)
	package:w_u16(actor_statistic.tasks_cancelled)
	package:w_u32(actor_statistic.killed_monsters)
	package:w_u32(actor_statistic.killed_stalkers)
	package:w_u16(actor_statistic.stashes_found)
	package:w_u16(actor_statistic.artefacts_found)
	package:w_u16(actor_statistic.pdas_delivered)
	package:w_u16(actor_statistic.heli_kills)
	package:w_u16(actor_statistic.heli_rocket_kills)
	package:w_u16(actor_statistic.artefacts_detected)
	package:w_u16(actor_statistic.help_wounded)
	package:w_u16(actor_statistic.actual_rank)
	package:w_u16(actor_statistic.actual_reputation)
	package:w_u16(actor_statistic.boxes_smashed)
	package:w_u16(actor_statistic.level_changes)
	package:w_u16(actor_statistic.enemies_surrendered)
	package:w_u16(actor_statistic.field_dressings)
	package:w_u16(actor_statistic.achievements)
	package:w_stringZ(tostring(actor_statistic.best_monster))
	package:w_stringZ(tostring(actor_statistic.favorite_weapon_sect))

	local i = 0
-- add write for level visits
	for k,v in pairs(actor_statistic.visited) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(actor_statistic.visited) do
		package:w_stringZ(tostring(k))
		package:w_bool(v)
	end
	i = 0
--
	for k,v in pairs(weapons_table) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(weapons_table) do
		package:w_stringZ(tostring(k))
		package:w_float(v)
	end
	i = 0
	for k,v in pairs(artefacts_table) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(artefacts_table) do
		package:w_stringZ(tostring(k))
		package:w_bool(v)
	end
	i = 0
	for k,v in pairs(taken_artefacts) do
		i = i + 1
	end
	package:w_u16(i)
	for k,v in pairs(taken_artefacts) do
		package:w_u32(k)
	end
end

function load(package)
	if (USE_MARSHAL) then
		return
	end
	actor_statistic = {}
	actor_statistic.arena_battles  		= package:r_u16()
	actor_statistic.surges  			= package:r_u16()
	actor_statistic.storms  			= package:r_u16()
	actor_statistic.tasks_completed 	= package:r_u16()
	actor_statistic.tasks_failed	 	= package:r_u16()
	actor_statistic.tasks_cancelled		= package:r_u16()
	actor_statistic.killed_monsters  	= package:r_u32()
	actor_statistic.killed_stalkers  	= package:r_u32()
	actor_statistic.stashes_found	  	= package:r_u16()
	actor_statistic.artefacts_found		= package:r_u16()
	actor_statistic.pdas_delivered 		= package:r_u16()
	actor_statistic.heli_kills			= package:r_u16()
	actor_statistic.heli_rocket_kills	= package:r_u16()
	actor_statistic.artefacts_detected 	= package:r_u16()
	actor_statistic.help_wounded		= package:r_u16()
	actor_statistic.actual_rank 		= package:r_u16()
	actor_statistic.actual_reputation	= package:r_u16()
	actor_statistic.boxes_smashed		= package:r_u16()
	actor_statistic.level_changes		= package:r_u16()
	actor_statistic.enemies_surrendered	= package:r_u16()
	actor_statistic.field_dressings		= package:r_u16()
	actor_statistic.achievements		= package:r_u16()

	local str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.best_monster = str
	end
	str = package:r_stringZ()
	if(str~="nil") then
		actor_statistic.favorite_weapon_sect = str
	end
	--add read for visited level
	actor_statistic.visited = {}
	for i = 1,package:r_u16() do
		actor_statistic.visited[package:r_stringZ()] = package:r_bool()
	end
	--
	weapons_table = {}
	local n = package:r_u16()
	for i = 1,n do
		local k = package:r_stringZ()
		local v = package:r_float()
		weapons_table[k] = v
	end
	artefacts_table = {}
	n = package:r_u16()
	for i = 1,n do
		log("n "..tostring(n))
		local k = package:r_stringZ()
		local v = package:r_bool()
		artefacts_table[k] = v
	end

	taken_artefacts = {}
	n = package:r_u16()
	for i = 1,n do
		local k = package:r_u32()
		taken_artefacts[k] = k
	end
end

function actor_visited_all_levels()
	for level,v in pairs(actor_statistic.visited) do 
		if (v == false) then 
			return false 
		end
	end
	return true
end

function get_levels_visited_count()
	local count = -1 -- fake_start increases this by 1.
	for level,v in pairs(actor_statistic.visited) do 
		if (v == true) then
			count = count + 1
		end
	end
	return count
end

-- Initialise rank/rep system.
local ranks, reputations = {}, {}
function init_ranks_reps()
	local function parse_str(s)
		local t = {}
		for name in string.gmatch( s, "([%w_%-.\\]+)[%,%s]*" ) do t[#t+1] = name end
		return t
	end
	local ini = ini_file("creatures\\game_relations.ltx")
	local tbl = parse_str(ini:r_string_ex("game_relations","rating"))
	local tbl2 = parse_str(ini:r_string_ex("game_relations","reputation"))
	for i=2, #tbl, 2 do
		ranks[#ranks+1] = tonumber(tbl[i])
	end
	for i=2, #tbl2, 2 do
		reputations[#reputations+1] = tonumber(tbl2[i])
	end
end

-- Increment the actor rank.
function inc_actor_rank(rank)
	-- Update the player rank.
	rank = rank or 0
	db.actor:change_character_rank(rank)
	
	-- Impose restrictions at double the minimum and maximum rank values.
	if (db.actor:character_rank() < 0) then db.actor:set_character_rank(0) end
	if (db.actor:character_rank() > 56000) then db.actor:set_character_rank(56000) end
	
	-- Check for actor rank change.
	check_actor_rank_change()
	
	-- Display scripted rank increases if debug hud is enabled.
	if (DEV_DEBUG and axr_main.config:r_value("mm_options","enable_debug_hud", 1, false) == true) then
		news_manager.send_tip(db.actor, game.translate_string("ui_st_rank") .. ": ".. db.actor:character_rank(), nil, "rank_change", nil, nil)
	end
end

-- Check for actor rank change.
function check_actor_rank_change(suppress)
	local current_rank = db.actor:character_rank()
	local new, old = 0, 0
	for i=1,#ranks do
		if current_rank <= ranks[i] then break end
		new = new + 1
	end
	for i=1,#ranks do
		if actor_statistic.actual_rank <= ranks[i] then break end
		old = old + 1
	end
	if not suppress or suppress == false then
		if old > new then
			news_manager.send_tip(db.actor, "st_rank_decreased", nil, "rank_change", nil, nil)
		elseif new > old then
			news_manager.send_tip(db.actor, "st_rank_increased", nil, "rank_change", nil, nil)
		end
	end
	actor_statistic.actual_rank = current_rank
end

-- Increment the actor reputation.
function inc_actor_reputation(reputation)
	-- Update the player reputation.
	reputation = reputation or 0
	db.actor:change_character_reputation(reputation)
	
	-- Impose restrictions at double the minimum and maximum reputation values.
	if (db.actor:character_reputation() < -5000) then db.actor:set_character_reputation(-5000) end
	if (db.actor:character_reputation() > 5000) then db.actor:set_character_reputation(5000) end
	
	-- Check for actor reputation change.
	check_actor_reputation_change()
	
	-- Display scripted reputation increases if debug hud is enabled.
	if (DEV_DEBUG and axr_main.config:r_value("mm_options","enable_debug_hud", 1, false) == true) then
		news_manager.send_tip(db.actor, game.translate_string("ui_st_reputation") .. ": ".. db.actor:character_reputation(), nil, "rep_change", nil, nil)
	end
end

-- Check for actor reputation change.
function check_actor_reputation_change(suppress)
	local current_reputation = db.actor:character_reputation()
	local new, old = 0, 0
	for i=1,#reputations do
		if current_reputation <= reputations[i] then break end
		new = new + 1
	end
	for i=1,#reputations do
		if actor_statistic.actual_reputation <= reputations[i] then break end
		old = old + 1
	end
	if not suppress or suppress == false then
		if old > new then
			news_manager.send_tip(db.actor, "st_reputation_decreased", nil, "rep_change", nil, nil)
		elseif new > old then
			news_manager.send_tip(db.actor, "st_reputation_increased", nil, "rep_change", nil, nil)
		end
	end
	actor_statistic.actual_reputation = current_reputation
 end