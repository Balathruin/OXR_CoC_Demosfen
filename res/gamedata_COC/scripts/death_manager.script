local item_by_community = {}
local item_count = {}
local always_keep_item = {}
local item_by_story_id
local death_ini = ini_file("misc\\death_generic.ltx")

function init_drop_settings()
	-- Create a list by community of the percent chance to spawn an item
	local community_list = { "stalker", "dolg", "freedom", "bandit", "army", "zombied", "ecolog", "killer", "monolith", "csky" }
	for k,v in pairs(community_list) do
		item_by_community[v] = {}
		if death_ini:section_exist(v) then
			local n = death_ini:line_count(v)
			local id, value = "", ""
			for i=0,n-1 do
				result, id, value	= death_ini:r_line_ex(v,i,"","")
				item_by_community[v][id] = tonumber(value) or 0
			end
		end
	end

	local n = death_ini:line_count("item_count")
	local id, value = "", ""
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("item_count",i,"","")
		local p = alun_utils.str_explode(value,",")
		if (p) then
			p[1] = tonumber(p[1]) or 0
			p[2] = tonumber(p[2]) or p[1]
			item_count[id] = {p[1],p[2]}
		end
	end
	
 	-- Create a list of item sections that npc must keep
	local n = death_ini:line_count("keep_items")
	for i=0,n-1 do
		local result, id, value	= death_ini:r_line_ex("keep_items",i,"","")
		if value == "true" then
			always_keep_item[id] = true
		end
	end
	
	-- Create a list of item sections that npc must keep
	local n = death_ini:line_count("spawn_by_story_id")
	for i=0,n-1 do
		if not (item_by_story_id) then 
			item_by_story_id = {}
		end
		local result, id, value	= death_ini:r_line_ex("spawn_by_story_id",i,"","")
		item_by_story_id[id] = value
	end
end

-- this will actually occur every time corpse spawn unless already looted
function decide_items_to_keep(npc)
	local death_dropped = utils.se_obj_load_var(npc:id(),npc:name(),"death_dropped")
	if (death_dropped) then
		return
	end
	npc:iterate_inventory(keep_item, npc)
end

function create_release_item(npc)
	local death_dropped = utils.se_obj_load_var(npc:id(),npc:name(),"death_dropped")
	if (death_dropped) then
		return
	end
	utils.se_obj_save_var(npc:id(),npc:name(),"death_dropped",true)
	
	-- spawn items by story id
	local sid = item_by_story_id and get_object_story_id(npc:id())
	if (sid and item_by_story_id[sid]) then
		local p = xr_logic.pick_section_from_condlist(db.actor,npc,utils.parse_condlist(item_by_story_id[sid]))
		--local p = alun_utils.str_explode(item_by_story_id[sid],",")
		--printf("sid=%s p=%s",sid,p)
		if (p and p ~= "" and p ~= "nil") then
			create_items(npc, p, 1, 100)
		end
	end

	local ini = npc:spawn_ini()
	if ini and ini:section_exist("dont_spawn_loot") then
		return
	end
	
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic,"dont_spawn_loot")) then 
		return
	end

	local spawn_items = item_by_community[character_community(npc)]
	if spawn_items == nil then
		return
	end
	
	npc:iterate_inventory(try_spawn_ammo_for_weapon,npc)
	
	for sec,v in pairs(spawn_items) do
		if (v > 0 and item_count[sec]) then
			local number = math.random(item_count[sec][1], item_count[sec][2])
			
			-- Check if guide is fully unlocked; don't spawn useless memory sticks.
			local ignore_item = nil
			if (sec == "itm_guide_usb_1" or sec == "itm_guide_usb_2") then
				local guide = ui_pda_encyclopedia_tab.get_ui()
				local locked_articles = guide.locked or 0
				if (#locked_articles == 0) then
					ignore_item = true
				end
			end
			
			if not ignore_item then
				create_items(npc, sec, number, v)
			end
		end
	end
end

--' Функция вызывается для каждого предмета, если вернет false то предмет удалится.
function keep_item(npc, item)
	if not (item) then 
		return 
	end 
	
	local section = item:section()
	if (always_keep_item[section]) then 
		return 
	end 
	
	local se_item = alife_object(item:id())
	if not (se_item) then 
		return
	end
	
	local ini = npc:spawn_ini()
	if ini and ini:section_exist("dont_keep_items") then
		alife():release(se_item, true)
		return
	end
	
	local st = db.storage[npc:id()]
	if (st and st.ini and st.section_logic and st.ini:line_exist(st.section_logic,"dont_keep_items")) then
		alife():release(se_item, true)
		return
	end 
	
	-- release all animation objects
	if (section == "bolt" or section == "medkit_script" or section == "guitar_a" or section == "guitar_a2" or section == "harmonica_a" or section == "wpn_binoc" or section == "anim_binoc" or section == "anim_knife" 
		or section == "device_torch" or section == "device_pda" or section == "hand_radio" or section == "hand_radio_r" or section == "stick_bred" or section == "stick_kolbasa" or
		section == "stick_kolbasa_bred") then
		alife():release(se_item, true)
		return 
	end
	
	local m = item:get_max_uses()
	if (m > 0) then 
		local r = math.random(0,m)
		item:set_remaining_uses(r)
		if (r == 0) then 
			alife():release(se_item, true)
		end
		return
	end
	
	if IsArtefact(item) then
		return
	end

	local cls = item:clsid()
	if IsWeapon(item,cls) and not(cls==clsid.wpn_grenade_rgd5_s or cls==clsid.wpn_grenade_f1_s or cls==clsid.wpn_knife_s) then
		set_weapon_drop_condition(npc,item)
		-- Set random ammo in mag
		item:set_ammo_elapsed( math.random(0,item:get_ammo_in_magazine()) )
		return
	end
	
	if (not item:is_Ammo() and xr_corpse_detection.lootable_table and xr_corpse_detection.lootable_table[section] and math.random(1,100) < 65) then
		return
	end
	
	alife():release(se_item, true)
end

function set_weapon_drop_condition(npc,itm)
	local condition  = (math.random(40)+30)/100
	--printf("condition [%s]", tostring(condition))
	itm:set_condition(condition)
	try_spawn_ammo_for_weapon(npc,itm)
end

function try_spawn_ammo_for_weapon(npc,itm)
	local ini = system_ini()

	local ammo_class = ini:r_list(itm:section(),"ammo_class")
	if not (ammo_class and #ammo_class > 0) then 
		return
	end
	
	-- randomly spawn only 1 ammo type per found weapon
	local sec = ammo_class[math.random(1,#ammo_class)]
	if (sec and item_count[sec]) then 
		local number = math.random(item_count[sec][1], item_count[sec][2])
		if (number > 0 and system_ini():section_exist(sec)) then
			create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
		end
	end

	ammo_class = ini:r_list(itm:section(),"grenade_class")
	if not (ammo_class and #ammo_class > 0) then 
		return
	end
	
	-- spawn grenade ammo if there is launcher attached
	if (ini:r_float_ex(itm:section(),"grenade_launcher_status",0) > 0) then
		local se_item = alife_object(itm:id())
		if (se_item) then
			local flags = se_item:get_addon_flags()
			if (flags:is(cse_alife_item_weapon.eWeaponAddonGrenadeLauncher)) then
				for i=1,#ammo_class do
					sec = ammo_class[i]
					if (sec and item_count[sec]) then 
						local number = math.random(item_count[sec][1], item_count[sec][2])
						if (number > 0 and ini:section_exist(sec)) then 
							create_ammo(sec,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
						end
					end
				end
			end
		end
	end
end

--' Функция спавнит необходимое число предметов
function create_items(npc, section, number, rnd)
	if not (system_ini():section_exist(section)) then 
		--printf("death_manager: ERROR: trying to spawn section that doesn't exist! %s",section)
		return 
	end 
	
	--printf("death_dropped: create %s=%s",section,number)
	if (utils.is_ammo(section))then
		if number > 0 then
			create_ammo(section,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id(),number)
		end
	else
		for i=1,number do
			--' Проверяем вероятность появить каждый объект в отдельности
			if (math.random(1,1000)/1000 <=  rnd) then
				alife():create(section,npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			end
		end
	end
end
