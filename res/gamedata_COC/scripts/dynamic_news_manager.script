--[[ Dynamic News by ARS Team, xStream, Red75, Dexxx, Skunk, Xmk
	Re-vamped by Alundaio for Call of Chernobyl
--]]

local show_about_death = true -- show death alerts from other stalkers
local show_about_death_mutant = true -- show death alerts from other stalkers about mutant deaths
local show_death_generic = false -- show generic death alerts (ie. Dead:)
local show_about_something = true  -- show general news tips
local show_about_kill_wounded = true
local show_about_bounty = true

----------------------------------------------------------------------------------------------------
local instance = nil -- don't touch
function get_dynamic_news()
	instance = instance or DynamicNewsManager()
	return instance
end

function destroy_dynamic_news()
	if (instance) then 
		instance:destroy()
	end
	instance = nil
end

function on_game_start()
	
	destroy_dynamic_news()
	
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return 
	end
		
	local function on_game_load()
		get_dynamic_news()
	end 
	RegisterScriptCallback("on_game_load",on_game_load)
end

----------------------------------------------------------------------------------------------------
class "DynamicNewsManager"
function DynamicNewsManager:__init()

	local comm = db.actor:character_community()
	if (comm ~= "actor") then 
		comm = comm:sub(7) -- remove 'actor_' prefix
	end
	
	self.channel_status = {
		["general"]			= true,
		["stalker"]  		= true,
		["monolith"] 		= (comm == "monolith"),
		["csky"]   			= true,
		["army"] 			= (comm == "army"),
		["killer"]   		= true,
		["ecolog"]   		= true,
		["dolg"]    		= true,
		["freedom"]  		= true,
		["bandit"]   		= true,
	}

	self.queue = {
		["general"]			= {},
		["stalker"]  		= {},
		["monolith"] 		= {},
		["csky"]   			= {},
		["army"] 			= {},
		["killer"]   		= {},
		["ecolog"]   		= {},
		["dolg"]    		= {},
		["freedom"]  		= {},
		["bandit"]   		= {}
	}
	
	self.spammer = {	
		["show_about_death"] = 0,
		["show_about_kill_wounded"] = 0,
		["show_about_death_mutant"] = 0
	}
	
	CreateTimeEvent("DynamicNewsManager","NewsTick",10,self.NewsTick,self)
	CreateTimeEvent("DynamicNewsManager","TickSpecialEvent",10,self.TickSpecialEvent,self)

	RegisterScriptCallback("monster_on_death_callback",self)
	--RegisterScriptCallback("monster_on_net_spawn",self)	
	RegisterScriptCallback("npc_on_death_callback",self)
	--RegisterScriptCallback("npc_on_hear_callback",self)
end

function DynamicNewsManager:destroy()
	RemoveTimeEvent("DynamicNewsManager","NewsTick")
	RemoveTimeEvent("DynamicNewsManager","TickSpecialEvent")
	UnregisterScriptCallback("monster_on_death_callback",self)
	--UnregisterScriptCallback("monster_on_net_spawn",self)	
	UnregisterScriptCallback("npc_on_death_callback",self)
end

function DynamicNewsManager:NewsTick()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end
	
	local lname = level.name()
	if not (level_weathers.valid_levels[lname]) then 
		return true
	end
	
	ResetTimeEvent("DynamicNewsManager","NewsTick",math.random(5,20))
	
	if (surge_manager.is_started()) then
		return false
	end
	
	for ch,messages in pairs(self.queue) do
		local c = #messages
		local message = messages[c]
		if (message) then
			dynamic_news_helper.send_tip(message.Mg,message.Se, nil, nil,message.Ic,message.Snd,message.It)
			messages[c] = nil
			return false
		end
	end
	
	return false
end

function DynamicNewsManager:TickSpecialEvent()
	if (axr_main.config:r_value("mm_options","enable_dynamic_news",1,true) == false) then
		return true
	end

	ResetTimeEvent("DynamicNewsManager","TickSpecialEvent",math.random(120,240))
	
	self:GossipBounty()
	
	return false
end

----------------- callbacks
function DynamicNewsManager:monster_on_net_spawn(npc,se_obj)

end 

function DynamicNewsManager:monster_on_death_callback(victim,who)
	if not (who and IsStalker(who) and show_about_death_mutant) then
		return 
	end
	
	local say = false
	if (self.spammer.show_about_death_mutant == 0) then
		local l = math.random(1,2)
		if l == 1 then
			say = self:GossipDeathOfMutant(victim,who)
		elseif l == 2 then 
			say = self:SeenDeathOfMutant(victim,who)
		end
	end
	
	if (say) then
		self.spammer.show_about_death_mutant = self.spammer.show_about_death_mutant + 1
		if (self.spammer.show_about_death_mutant > 3) then
			self.spammer.show_about_death_mutant = 0
		end
	end
end

function DynamicNewsManager:npc_on_death_callback(victim,who)
	if not (db.actor and victim and show_about_death) then 
		return 
	end
	
	local comm = character_community(victim)
	if not (self.channel_status[comm]) then 
		return 
	end
	
	if not (who and who.clsid) then 
		if (show_death_generic and surge_manager.is_killing_all()) then
			self:DeathBySurge(victim,who,comm)
		end 
		return
	end

	local say = false
	if (self.spammer.show_about_death == 0) then
		if (IsStalker(who)) then
			say = self:SOSDeathByStalker(victim,who,comm)
			if not (say) then
				local i = show_death_generic and math.random(1,3) or math.random(2,3)
				if i == 1 then
					self:DeathByStalker(victim,who,comm)
				elseif i == 2 then
					self:GossipDeathByStalker(victim,who)
				elseif i == 3 then
					self:SeenDeathOfStalker(victim,who,comm)
				end
			end
		elseif (IsMonster(who)) then
			say = self:SOSDeathByMutant(victim,who,comm)
			if not (say) then
				local k = show_death_generic and math.random(1,2) or 2
				if k == 1 then
					self:DeathByMutant(victim,who,comm)
				elseif k == 2 then 
					self:SeenDeathByMutant(victim,who,comm)
				end
			end
		end
	end
	
	if (say) then
		self.spammer.show_about_death = self.spammer.show_about_death + 1
		if (self.spammer.show_about_death > 3) then
			self.spammer.show_about_death = 0
		end
	end
end

function DynamicNewsManager:npc_on_hear_callback(npc,who_id,s_type,sound_dist,sound_power,sound_position)

end

------------------------ utility
function DynamicNewsManager:PushToChannel(name,t,fifo)
	local q = self.queue[name]
	if (q) then
		if (t.Mg) then 
			for s in string.gmatch(t.Mg,"(st_dyn_news_ch_[%w%d_]*)") do
				t.Mg = string.gsub(t.Mg,s,game.translate_string(s))
			end
		end
		if (fifo) then
			q[#q+1] = t
		else
			table.insert(q,1,t)
		end
	end
end 

function DynamicNewsManager:FindSpeakerNoVictim(who,same_as_who,not_in_combat)
	local comm_sender
	local comm_who = who and character_community(who) or nil
	local who_id = who and who:id() or nil
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (who_id == nil) or (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
					comm_sender = npc:character_community()
					if (same_as_who == nil) or (comm_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
						if (self.channel_status[comm_sender]) then
							table.insert(t,npc)
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:FindSpeaker(victim,who,same_as_victim,same_as_who,not_in_combat,can_see)
	local comm = character_community(victim)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				if (not_in_combat == nil) or (not_in_combat == true and not npc:best_enemy()) or (not_in_combat ~= true) then
					comm_sender = npc:character_community()
					if (same_as_victim == nil) or (same_as_victim == true and comm_sender == comm) or (same_as_victim == false and comm_sender ~= comm) then
						if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
							if (self.channel_status[comm_sender]) then
								if (can_see == nil) or (can_see and npc:see(victim)) or (can_see == false) then
									table.insert(t,npc)
								end
							end
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:FindSpeakerWithEnemy(victim,who,same_as_victim,same_as_who,can_see)
	local comm = character_community(victim)
	local comm_sender
	local comm_who = character_community(who)
	local who_id = who:id()
	local t = {}
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i]) and npc:best_enemy()) then
				comm_sender = npc:character_community()
				if (same_as_victim == nil) or (same_as_victim == true and comm_sender == comm) or (same_as_victim == false and comm_sender ~= comm) then
					if (same_as_who == nil) or (same_as_who == true and comm_sender == comm_who) or (same_as_who == false and comm_sender ~= comm_who) then
						if (self.channel_status[comm_sender]) then
							if (can_see == nil) or (can_see and npc:see(victim)) or (can_see == false) then
								table.insert(t,npc)
							end
						end
					end
				end
			end
		end
	end
	return t[math.random(#t)]
end

function DynamicNewsManager:GossipBounty()
	if not (show_about_bounty) then 
		return 
	end

	local bounty
	for task_id,npc_id in pairs(axr_task_manager.bounties_by_id) do
		bounty = db.storage[npc_id] and db.storage[npc_id].object
		if (bounty and bounty:alive()) then 
			break 
		end
	end
	
	if not (bounty and bounty:alive()) then
		return false
	end

	local sender = self:FindSpeakerNoVictim(bounty,false,true)
	if not (sender) then
		--printf("GossipBounty can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_gossip_bounty_"..string_count)
		if (tr_s == "st_dyn_news_gossip_bounty_"..string_count) then 
			break 
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	if (#sentences == 0) then 	
		return false
	end
	
	local msg = strformat(sentences[math.random(#sentences)],bounty:character_name(),dynamic_news_helper.GetPointDescription(bounty))
	
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:RadioInHeli(sender,who)
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local msg = ""
	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_gossip_heli_"..string_count)
		if (tr_s == "st_dyn_news_gossip_heli_"..string_count) then 
			break 
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end

	if (#sentences == 0) then
		return false
	end 
	
	local a = dynamic_news_helper.GetPointDescription(who) 
	local b = IsStalker(who) and dynamic_news_helper.GetCommunityDescription(who,math.random(1,2)) or dynamic_news_helper.GetMonsterDescription(who,6)
	
	msg = strformat(sentences[math.random(#sentences)],a,b)

	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	return true
end

function DynamicNewsManager:DeathBySurge(victim,who,comm)
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]st_dyn_news_ch_found %s. st_dyn_news_ch_blowout.",victim:character_name(),game.translate_string(comm),dynamic_news_helper.GetPointDescription(victim))
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se=game.translate_string("st_dyn_news_ch_died"),It="gr"})
	return true
end

function DynamicNewsManager:DeathByStalker(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]st_dyn_news_ch_found %s. %s.",victim:character_name(),game.translate_string(comm),dynamic_news_helper.GetPointDescription(victim),dynamic_news_helper.GetWeaponDescription(victim,1))
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se=game.translate_string("st_dyn_news_ch_died"),It="gr"})
	return true
end

function DynamicNewsManager:DeathByMutant(victim,who,comm)
	local a = victim:character_name()
	local b = game.translate_string(comm)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = string.gsub(dynamic_news_helper.GetMonsterDescription(who,1),"(%l)?",string.upper("%1"),1)
	local msg = strformat("%c[255,160,160,160]%s, %s.\\n%c[default]st_dyn_news_ch_found %s. %s.",a,b,c,d)
	self:PushToChannel("general",{Mg=msg,Ic="deth",Snd="news",Se=game.translate_string("st_dyn_news_ch_died"),It="gr"})
	return true
end 

function DynamicNewsManager:GossipDeathByStalker(victim,who)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,false,nil,true)
	if not (sender) then
		--printf("GossipDeathByStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local TblTime = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_hear_"..string_count)
		if (tr_s == "st_dyn_news_builder_hear_"..string_count) then 
			break 
		else 
			table.insert(TblTime,tr_s)
		end
		string_count = string_count + 1
	end
	
	local TblSaw = {}
	string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_ending_"..string_count)
		if (tr_s == "st_dyn_news_builder_ending_"..string_count) then 
			break 
		else 
			table.insert(TblSaw,tr_s)
		end
		string_count = string_count + 1
	end
	
	local a = #TblTime > 0 and TblTime[math.random(#TblTime)] or ""
	local b = dynamic_news_helper.GetWeaponDescription(who,2)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = #TblSaw > 0 and TblSaw[math.random(#TblSaw)] or ""

	local msg = strformat("%s %s %s. %s",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SOSDeathByStalker(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeakerWithEnemy(victim,who,true,false)
	if not (sender) then
		--printf("SOSDeathByStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local a = dynamic_news_helper.GetCommunityDescription(sender,math.random(11,14))
	local b,c = self:BuildSentenceStalkerEnemy(victim,who,0,30)
	local d = dynamic_news_helper.GetPointDescription(victim)

	local msg = strformat("%s %s %s %s!",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathOfStalker(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,false,false,true)
	if not (sender) then
		--printf("SeenDeathOfStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))

	local sentences = {}
	local string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_sight_"..string_count)
		if (tr_s == "st_dyn_news_builder_sight_"..string_count) then 
			break 
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	local a = #sentences > 0 and sentences[math.random(#sentences)]
	local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
	local c = dynamic_news_helper.GetWeaponDescription(who,math.random(4,8))
	local d = dynamic_news_helper.GetCommunityDescription(sender,math.random(3,4))
	local e = dynamic_news_helper.GetPointDescription(victim)
	
	local msg = strformat("%s %s %s %s %s.",a,b,c,d,e)
	self:PushToChannel("general",{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathOfMutant(victim,who)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,nil,false,true)
	if not (sender) then
		--printf("SeenDeathOfMutant can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local sentences = {}
	local string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_sight_"..string_count)
		if (tr_s == "st_dyn_news_builder_sight_"..string_count) then 
			break 
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	local a = #sentences > 0 and sentences[math.random(#sentences)] or ""
	local b = dynamic_news_helper.GetCommunityDescription(who,math.random(1,2))
	local c = dynamic_news_helper.GetWeaponDescription(who,math.random(4,6))
	local d = dynamic_news_helper.GetMonsterDescription(victim,1)
	local e = dynamic_news_helper.GetPointDescription(victim)
	
	local msg = strformat("%s %s %s %s %s.",a,b,c,d,e)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:SeenDeathByMutant(victim,who,comm)
	local sender = self:FindSpeaker(victim,who,false,nil,true)
	if not (sender) then
		--printf("SeenDeathByMutant can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))

	local start = {}
	local string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_sight_"..string_count)
		if (tr_s == "st_dyn_news_builder_sight_"..string_count) then 
			break 
		else 
			table.insert(start,tr_s)
		end
		string_count = string_count + 1
	end

	local middle = {}
	string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_middle_"..string_count)
		if (tr_s == "st_dyn_news_builder_middle_"..string_count) then 
			break 
		else 
			table.insert(middle,tr_s)
		end
		string_count = string_count + 1
	end

	local ending = {}
	string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_ending_"..string_count)
		if (tr_s == "st_dyn_news_builder_ending_"..string_count) then 
			break 
		else 
			table.insert(ending,tr_s)
		end
		string_count = string_count + 1
	end

	local a = #start > 0 and start[math.random(#start)] or ""
	local b = #middle > 0 and middle[math.random(#middle)] or ""
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = #ending > 0 and ending[math.random(#ending)] or ""
	
	local msg = strformat("%s %s %s.\\n%s",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end 

function DynamicNewsManager:GossipDeathOfMutant(victim,who,comm)
	local cls = dynamic_news_helper.GetWeaponClass(who)
	if (cls == 1 or cls == 9) then 
		return false
	end
	
	local sender = self:FindSpeaker(victim,who,nil,false,true)
	if not (sender) then
		--printf("GossipDeathByStalker can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))

	local TblTime = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_hear_"..string_count)
		if (tr_s == "st_dyn_news_builder_hear_"..string_count) then 
			break 
		else 
			table.insert(TblTime,tr_s)
		end
		string_count = string_count + 1
	end
	
	local TblSaw = {}
	string_count = 1 
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_ending_"..string_count)
		if (tr_s == "st_dyn_news_builder_ending_"..string_count) then 
			break 
		else 
			table.insert(TblSaw,tr_s)
		end
		string_count = string_count + 1
	end	
	
	local a = #TblTime > 0 and TblTime[math.random(#TblTime)] or ""
	local b = dynamic_news_helper.GetWeaponDescription(who,2)
	local c = dynamic_news_helper.GetPointDescription(victim)
	local d = #TblSaw > 0 and TblSaw[math.random(#TblSaw)] or ""

	local msg = strformat("%s %s %s. %s",a,b,c,d)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end 

function DynamicNewsManager:SOSDeathByMutant(victim,who)
	local sender = self:FindSpeakerWithEnemy(victim,who,true,nil)
	if not (sender) then
		--printf("SOSDeathByMutant can't find sender")
		return false
	end
	
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local a = dynamic_news_helper.GetCommunityDescription(sender,math.random(11,14))
	local b = dynamic_news_helper.GetMonsterDescription(who,math.random(2,5))
	local c = dynamic_news_helper.GetPointDescription(victim)

	local msg = strformat("%s %s %s!",a,b,c)
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="danger",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:FoundArtefact(sender,itm)
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))

	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_gossip_arte_"..string_count)
		if (tr_s == "st_dyn_news_gossip_arte_"..string_count) then 
			break 
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	if (#sentences == 0) then 	
		return false
	end
	
	local inv_name = game.translate_string(system_ini():r_string_ex(itm:section(),"inv_name") or "")

	self:PushToChannel(sender:character_community(),{Mg=strformat(sentences[math.random(#sentences)],inv_name),Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	
	return true
end

function DynamicNewsManager:BoughtItems(sender,who,list)
	local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	
	local msg = ""
	local sec = list[math.random(#list)]
	local inv_name = game.translate_string(system_ini():r_string_ex(sec,"inv_name") or "")
	
	local r = math.random(1,2)
	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_gossip_buy_"..r.."_"..string_count)
		if (tr_s == "st_dyn_news_gossip_buy_"..r.."_"..string_count) then 
			break
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	if (#sentences == 0) then 	
		return false
	end
		
	msg = r == 1 and strformat(sentences[math.random(#sentences)],who:character_name(),inv_name) or strformat(sentences[math.random(#sentences)],inv_name,who:character_name())

	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
	return true
end

function DynamicNewsManager:KillWounded(sender,victim,is_hostage)
	if not (show_about_kill_wounded) then 
		return false
	end
	
	local squad = get_object_squad(sender)
	if not (squad and squad:commander_id() == sender:id()) then
		return false
	end
	
	if (self.spammer.show_about_kill_wounded == 0) then
		local Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
		if not (is_hostage) then
			local sentences = {}
			local string_count = 1
			while true do 
				local tr_s = game.translate_string("st_dyn_news_gossip_kill_wounded_"..string_count)
				if (tr_s == "st_dyn_news_gossip_kill_wounded_"..string_count) then 
					break
				else 
					table.insert(sentences,tr_s)
				end
				string_count = string_count + 1
			end
			
			if (#sentences == 0) then 	
				return false
			end
			
			local msg = sentences[math.random(#sentences)]
			self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})
			return true
		else 
			local sentences = {}
			local string_count = 1
			while true do 
				local tr_s = game.translate_string("st_dyn_news_gossip_hostage_"..string_count)
				if (tr_s == "st_dyn_news_gossip_hostage_"..string_count) then 
					break
				else 
					table.insert(sentences,tr_s)
				end
				string_count = string_count + 1
			end
			
			if (#sentences == 0) then 	
				return false
			end
			
			local msg = sentences[math.random(#sentences)]
			self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})			
		end
		
		return true
	end
	
	self.spammer.show_about_kill_wounded = self.spammer.show_about_kill_wounded + 1 
	if (self.spammer.show_about_kill_wounded  > 10) then
		self.spammer.show_about_kill_wounded  = 0
	end
end 

function DynamicNewsManager:GossipTaskRepeatTimeout(task_id)
	local story_id = task_id:sub(1,-8)
	local obj = get_story_object(story_id)
	if not (obj) then 
		return false 
	end
	
	local sender = self:FindSpeakerNoVictim(nil,nil,true)
	if not (sender) then 
		return false 
	end
	
	Se = strformat("%s, %s",sender:character_name(),dynamic_news_helper.GetCommunityDescription(sender,6))
	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_gossip_hostage_"..string_count)
		if (tr_s == "st_dyn_news_gossip_hostage_"..string_count) then 
			break
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	if (#sentences == 0) then 	
		return false
	end

	local msg = strformat(sentences[math.random(#sentences)],obj:character_name())
	self:PushToChannel(sender:character_community(),{Mg=msg,Ic=sender:character_icon(),Snd="news",Se=Se,It="npc"})	
end

----------------------------------- helpers
function DynamicNewsManager:BuildSentenceStalkerEnemy(victim,who,mn,mx)
	local comm_victim = victim:character_community()
	local comm_who = who:character_community()
	local comm, dist
	local c = 0
	for i=1, #db.OnlineStalkers do
		if (db.OnlineStalkers[i] ~= who_id) then
			local st = db.storage[db.OnlineStalkers[i]]
			local npc = st and st.object or level.object_by_id(db.OnlineStalkers[i])
			if (npc and IsStalker(npc,npc:clsid()) and npc:alive() and not get_object_story_id(db.OnlineStalkers[i])) then
				local comm = npc:character_community()
				if (comm == comm_who) then
					dist = victim:position():distance_to(npc:position())
					if (dist < mx) or (dist > mn) then 
						c = c + 1
					end
				end
			end 
		end
		if (c >= 2) then 
			break 
		end
	end

	local sentences = {}
	local string_count = 1
	while true do 
		local tr_s = game.translate_string("st_dyn_news_builder_attacked_"..string_count)
		if (tr_s == "st_dyn_news_builder_attacked_"..string_count) then 
			break
		else 
			table.insert(sentences,tr_s)
		end
		string_count = string_count + 1
	end
	
	if (#sentences == 0) then 	
		return false
	end

	if (c >= 2) then 
		return sentences[math.random(#sentences)], dynamic_news_helper.GetCommunityDescription(who,math.random(9,10))
	end

	return sentences[math.random(#sentences)], dynamic_news_helper.GetCommunityDescription(who,math.random(7,8))
end

