function on_game_start()
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("on_game_load",on_game_load)
end

function on_game_load()
	if not (alife_storage_manager.get_state().enable_azazel_mode) then
		return
	end
	
	if (alife_storage_manager.get_state().azazel_death) then
		alife_storage_manager.get_state().azazel_death = nil
		SetHudMsg(strformat(game.translate_string("st_death_count"), dxr_statistics.get_statistic_count("deaths"), 8))
		
		-- Heal 
		bind_stalker_ext.invulnerable_time = time_global() + 30000
		db.actor:set_health_ex(1)

		-- Transition
		level.disable_input()
		level.remove_cam_effector(210409)
		level.add_cam_effector("camera_effects\\prison_1.anm", 210409, false, "azazel_mode.cam_effector_end")
		level.add_pp_effector("deimos1.ppe", 210410, false)
	end
end

function actor_on_before_death(whoID,flags)
	if not (alife_storage_manager.get_state().enable_azazel_mode) then
		return
	end

	dxr_statistics.increment_statistic("deaths")
	SetHudMsg(strformat(game.translate_string("st_death_count"), dxr_statistics.get_statistic_count("deaths")), 8)
	
	-- find victims
	local sim = alife()
	local gg = game_graph()
	local avail_entities = {}
	local squad_mates = {}
	--local faction_mates = {}
	for id, se_obj in alife():objects() do 
		if (id ~= 0 and IsStalker(nil,se_obj:clsid()) and se_obj:alive() and se_obj:community() ~= "zombied" and se_obj:community() ~= "trader" and se_obj.group_id ~= 65535) then 
			if (IsSurvivalMode() or get_object_story_id(se_obj.group_id) == nil) then
				if (axr_companions.companion_squads[se_obj.group_id]) then 
					squad_mates[#squad_mates+1] = se_obj.id
				--elseif (se_obj:community() == character_community(db.actor):sub(7)) then 
					--table.insert(faction_mates,se_obj.id)
				else
					avail_entities[#avail_entities+1] = se_obj.id
				end
			end
		end
	end

	-- prior for victim is squad or faction or other
	--local t = #squad_mates > 0 and squad_mates or #faction_mates > 0 and faction_mates or avail_entities
	local t = #squad_mates > 0 and squad_mates or avail_entities
	if (#t == 0) then 
		SetHudMsg(strformat(game.translate_string("st_death_count").." " .. game.translate_string("st_nobody_left_to_replace"), dxr_statistics.get_statistic_count("deaths")), 10)
		return
	end
	
	bind_stalker_ext.invulnerable_time = time_global() + 30000
	db.actor:set_health_ex(1)

	local ignore_list = {
--mlr
		["extension_pda"] = true,
		["device_torch_low"] = true,
		["device_torch_normal"] = true,
		["dev_torch_light_better"] = true,
		["dev_torch_light_better_1"] = true,
--mlr		
		["bolt"] = true,
		["device_torch"] = true,
		["device_pda"] = true,
		["wpn_binoc"] = true,
		["medkit_script"] = true,
		["guitar_a"] = true,
		["guitar_a2"] = true,
		["harmonica_a"] = true,
		["anim_binoc"] = true,
		["anim_knife"] = true,
		["hand_radio"] = true,
		["hand_radio_r"] = true,
		["stick_bred"] = true,
		["stick_kolbasa"] = true,
		["stick_kolbasa_bred"] = true,
		["wpn_knife"] = true,
		["wpn_knife_colt"] = true,
		["wpn_knife_extrema"] = true,
		["wpn_knife_hunting"] = true,
		["wpn_knife_spetsnaz"] = true,
		["wpn_knife_survival"] = true,
		["wpn_knife_tanto"] = true,
--		["good_psy_helmet"] = true,
--		["bad_psy_helmet"] = true,
--		["main_story_1_quest_case"] = true,
--		["main_story_2_lab_x18_documents"] = true,
--		["main_story_3_lab_x16_documents"] = true,
--		["main_story_4_lab_x10_documents"] = true,
--		["main_story_5_lab_x8_documents"] = true,
--		["main_story_6_jup_ug_documents"] = true,
--		["main_story_7_mon_con_documents"] = true
	}
	
	axr_companions.remove_all_from_actor_squad()
	
	local se_obj = sim:object(t[math.random(#t)])
	
	-- make squad actor companions
	local squad = sim:object(se_obj.group_id)
	if (squad) then
		SIMBOARD:assign_squad_to_smart(squad, nil)
		axr_companions.companion_squads[squad.id] = squad
		for k in squad:squad_members() do 
			if (k.id ~= se_obj.id) then
				axr_companions.non_task_companions[k.id] = true
				utils.se_obj_save_var(k.id,k.object:name(),"companion",true)
				local member = db.storage[k.id] and db.storage[k.id].object 
				if (member) then
					axr_companions.setup_companion_logic(member,db.storage[k.id],false)
				end
			end
		end
	end
	
	local se_actor = sim:actor()
	
	-- actor corpse 
	local se_mimic = sim:create("stalker_azazel",se_actor.position,se_actor.m_level_vertex_id,se_actor.m_game_vertex_id)
	if (se_mimic) then 
		se_mimic:set_character_name(se_actor:character_name())
		se_mimic:set_profile_name(se_actor:profile_name())
		se_mimic:kill()
		
		local m_data = alife_storage_manager.get_se_obj_state(se_mimic,true)
		if (m_data) then
			m_data.icon_name = se_actor:character_icon()
			m_data.visual = db.actor:get_visual_name()
		end
		
		local function release_actor_item(temp, item)
			if not (ignore_list[item:section()]) then
				local se_item = sim:object(item:id())
				if (se_item) then
					local sec = se_item:section_name()
					sim:release(se_item,true)
					sim:create(sec,se_mimic.position,se_mimic.m_level_vertex_id,se_mimic.m_game_vertex_id,se_mimic.id)
				end
			end
		end
		db.actor:iterate_inventory(release_actor_item,nil)
	end
	
	-- copy data over to player
	if (db.actor_binder and db.actor_binder.character_icon) then 
		db.actor_binder.character_icon = se_obj:character_icon()
		db.actor:set_character_icon(db.actor_binder.character_icon)
	end
	
	se_actor:set_character_name(se_obj:character_name())
	
	local faction = se_obj:community()
	se_actor:set_rank(se_obj:rank())
	db.actor:set_character_rank(se_obj:rank())
	db.actor:set_character_community("actor_"..faction)
	db.actor:set_character_reputation(se_obj:reputation())
	db.actor:give_money(10*math.random(1,250)+500)
	
	game_relations.set_community_goodwill_for_faction("actor_"..faction)
	
	-- Force update of dxr_statistics rank/rept records.
	dxr_statistics.check_for_rank_change(true)
	dxr_statistics.check_for_reputation_change(true)
	
	-- copy all items except ignored
	for id, se_item in alife():objects() do
		if (se_item and se_item.parent_id == se_obj.id) then
			local sec = se_item:section_name()
			if not (ignore_list[sec]) then
				give_object_to_actor(sec)
			end
		end
	end
	
	-- create outfit based on stalker visual type
	local section = se_obj:section_name()
	if (string.find(section,"_4")) then 
		local f = {
			["stalker"] = "exo_outfit",
			["bandit"] = "bandit_exo_outfit",
			["csky"] = "cs_heavy_outfit",
			["killer"] = "exo_outfit",
			["army"] = "military_exo_outfit",
			["dolg"] = "dolg_exo_outfit",
			["freedom"] = "svoboda_exo_outfit",
			["ecolog"] = "ecolog_outfit_orange",
			["monolith"] = "monolith_exo_outfit"
		}
		give_object_to_actor(f[faction] or "novice_outfit")
	elseif (string.find(section,"_3")) then 
		local f = {
			["stalker"] = "exo_outfit",
			["bandit"] = "bandit_exo_outfit",
			["csky"] = "cs_heavy_outfit",
			["killer"] = "merc_scientific_outfit",
			["army"] = "specops_outfit",
			["dolg"] = "dolg_scientific_outfit",
			["freedom"] = "svoboda_heavy_outfit",
			["ecolog"] = "ecolog_outfit_orange",
			["monolith"] = "monolith_scientific_outfit"
		}
		give_object_to_actor(f[faction] or "novice_outfit")		
	elseif (string.find(section,"_2")) then 
		local f = {
			["stalker"] = "stalker_outfit",
			["bandit"] = "trenchcoat_outfit",
			["csky"] = "cs_light_outfit",
			["killer"] = "merc_outfit",
			["army"] = "military_outfit",
			["dolg"] = "dolg_outfit",
			["freedom"] = "svoboda_light_outfit",
			["ecolog"] = "ecolog_outfit_green",
			["monolith"] = "monolith_outfit"
		}
		give_object_to_actor(f[faction] or "novice_outfit")		
	elseif (string.find(section,"_1")) then 
		local f = {
			["stalker"] = "stalker_outfit",
			["bandit"] = "trenchcoat_outfit",
			["csky"] = "cs_light_outfit",
			["killer"] = "merc_outfit",
			["army"] = "military_outfit",
			["dolg"] = "dolg_outfit",
			["freedom"] = "svoboda_light_outfit",
			["ecolog"] = "ecolog_outfit_green",
			["monolith"] = "monolith_outfit"
		}
		give_object_to_actor(f[faction] or "novice_outfit")		
	else 
		local f = {
			["stalker"] = "novice_outfit",
			["bandit"] = "bandit_novice_outfit",
			["csky"] = "cs_novice_outfit",
			["killer"] = "merc_outfit",
			["army"] = "army_outfit",
			["dolg"] = "dolg_novice_outfit",
			["freedom"] = "svoboda_novice_outfit",
			["ecolog"] = "ecolog_guard_outfit",
			["monolith"] = "monolith_outfit"
		}
		give_object_to_actor(f[faction] or "novice_outfit")		
	end 
	
	-- cancel all tasks
	local task_info = task_manager.get_task_manager().task_info
	local task_ini = task_manager.task_ini
	for task_id,tbl in pairs(task_info) do
		--if not (tbl.storyline) then
			tbl.forced_status = "fail"
			tbl.cancelled_by_actor = true
		--end
	end
		
	-- initiate transitition and removal of victim
	local level_name = sim:level_name(game_graph():vertex(se_obj.m_game_vertex_id):level_id())
	if (level_name == level.name()) then 
		local hud = get_hud()
		hud:HidePdaMenu()
		hud:HideActorMenu()
		db.actor:set_actor_position(se_obj.position)
		level.disable_input()
		level.remove_cam_effector(210409)
		level.add_cam_effector("camera_effects\\prison_1.anm", 210409, false, "azazel_mode.cam_effector_end")
		level.add_pp_effector("deimos1.ppe", 210410, false)
		safe_release_manager.release(se_obj)
	else
		local pos = se_obj.position
		local lvid = se_obj.m_level_vertex_id
		local gvid = se_obj.m_game_vertex_id
		level.add_pp_effector("deimos1.ppe", 210410, false)
		safe_release_manager.release(se_obj)
		alife_storage_manager.get_state().azazel_death = true
		local function tele_me_now(id)
			ChangeLevel(pos,lvid,gvid,VEC_ZERO)
			return true
		end
		CreateTimeEvent(0,"tele",0,tele_me_now,se_obj.id)
	end
	
	-- skip surge due to bug with killing actor on switch
	surge_manager.stop_surge()
	if (psi_storm_manager.get_psi_storm_manager().started) then
		psi_storm_manager.get_psi_storm_manager().finish(true)
	end
	
	flags.ret_value = false
end

function cam_effector_end()
	level.enable_input()
	db.actor:set_health_ex(1)
	bind_stalker_ext.invulnerable_time = nil
end