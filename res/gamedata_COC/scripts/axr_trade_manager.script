local ini
------------------------------------------
-- Localized Functions
------------------------------------------
local function npc_on_item_take(npc,item)
	if not (npc:alive()) then
		return
	end

	local id = npc:id()
	local st = db.storage[id]
	if not (st) then
		return
	end

	local com = npc:character_community()
	if (com == "zombied" or com == "army" or com == "monolith") then
		return false
	end

	local sec = item:section()

	local bw = npc:best_weapon() or npc:active_item()
	if (bw and bw:id() == item:id()) then
		return
	end

	local slot
	for i=1,12 do
		slot = npc:item_in_slot(i)
		if (slot and slot:id() == item:id()) then
			return
		end
	end

	if (ini == nil or not ini:line_exist("buy_sell",sec)) then
		return
	end

	local buy_sell = ini:r_string_ex("buy_sell",sec)
	if (buy_sell == nil or buy_sell == "") then
		return
	end

	if not (st.trade_items) then
		st.trade_items = {}
	end
	st.trade_items[sec] = st.trade_items[sec] and st.trade_items[sec] + 1 or 1

	buy_sell = alun_utils.str_explode(buy_sell,",")

	--printf("buy_sell[2]=%s",buy_sell[2])
	if (st.trade_items[sec] >= tonumber(buy_sell[2])) then
		st.has_items_to_sell = true
		--printf("%s: wants to trade surplus items",npc:name())
	end
end

--------------------------------
-- Callback Register
--------------------------------
function on_game_start()
	RegisterScriptCallback("npc_on_item_take",npc_on_item_take)
	ini = ini_file("misc\\trade\\gulag_job_trade_buy_sell.ltx")
end

-------------------------------------------------

function npc_trade_buy_sell(npc)
	local st = npc and db.storage[npc:id()]
	if not (st) then
		return
	end

	if not (st.has_items_to_sell) then
		--printf("st.has_items_to_sell = nil!")
		return
	end

	if not (st.trade_items) then
		--printf("no items to sell")
		return
	end

	local smart = xr_gulag.get_npc_smart(npc)
	local npc_info = smart and smart.npc_info[npc:id()]
	if (npc_info) then
		npc_info.job.idle = time_global() + 6000
	end

	--printf("trade_job_sell_items")

	local sim = alife()

	-- increase NPC rank because he is a good boy
	npc:set_character_rank(npc:character_rank()+math.random(20,30))
	local se_obj = alife_object(npc:id())
	if not (se_obj) then 
		return 
	end
	
	-- SELL ITEMS
	local itm,itm_base_cost,buy_sell, slot, bw,can_sell
	for sec,count in pairs(st.trade_items) do
		for i=count,1 do
			itm = npc:object(sec)
			if (itm) then
				can_sell = true

				-- Make sure item is not his best weapon
				bw = npc:best_weapon()
				if (bw and bw:id() == itm:id()) then
					can_sell = false
				end

				-- Make sure item is not equipped
				for i=1,12 do
					slot = npc:item_in_slot(i)
					if (slot and slot:id() == itm:id()) then
						can_sell = false
						break
					end
				end

				buy_sell = ini:r_string_ex("buy_sell",sec)
				if (buy_sell and buy_sell ~= "" and can_sell) then
					buy_sell = alun_utils.str_explode(buy_sell,",")

					sim:release(sim:object(itm:id()),true)

					--printf("trading %s",sec)
					-- npc_statistic
					if (se_obj) then 
						local m_data = alife_storage_manager.get_se_obj_state(se_obj)
						if (m_data) then
							m_data.items_sold = m_data.items_sold and m_data.items_sold + 1 or 1
						end
					end

					itm_base_cost = system_ini():r_float_ex(sec,"cost") or 30
					npc:money(itm_base_cost * (tonumber(buy_sell[4]) or 1))

					-- Only sell enough till reach keep-in-stock count (param 1)
					if (i <= tonumber(buy_sell[1])) then
						break
					end
				end
			end
		end
	end
	
	empty_table(st.trade_items)
	st.has_items_to_sell = false

	-- BUY ITEMS
	local money = npc:money()
	if (money == nil or money <= 0) then
		return
	end

	local smart = xr_gulag.get_npc_smart(npc)
	if not (smart) then
		return
	end

	local npc_info = smart.npc_info[npc:id()]
	if (npc_info == nil or npc_info.job == nil) then
		return
	end

	-- Get seller so we can use npc:transfer_money()
	local seller_id = npc_info.job.seller_id
	local seller = seller_id and (db.storage[seller_id] and db.storage[seller_id].object or level.object_by_id(seller_id))

	printf("seller = %s", seller and seller:name())
	if not (seller) then
		return
	end

	printf("trade_job_buy_items")

	local valid_items = alun_utils.collect_section(ini,"buy_sell",true)
	local item_list = {}

	local count = 0
	local function itr(npc,itm)
		local sec = itm:section()
		if (sec and valid_items[sec]) then
			-- count all valid items NPC has matching the buy_sell list
			item_list[sec] = item_list[sec] and item_list[sec] + 1 or 1
		end
	end

	npc:iterate_inventory(itr,npc)

	local bw = npc:best_weapon()
	bw = bw and bw:section()

	local bw_ammos = bw and alun_utils.parse_list(system_ini(),bw,"ammo_class",true)
	local buy_sell_items = {}
	local size_t = 0
	local buy_sell,total_cost
	for sec,v in pairs(valid_items) do
		buy_sell = ini:r_string_ex("buy_sell",sec)
		if (buy_sell and buy_sell ~= "") then
			buy_sell = alun_utils.str_explode(buy_sell,",")

			itm_base_cost = system_ini():r_float_ex(sec,"cost") or 30
			total_cost = (itm_base_cost * (tonumber(buy_sell[5]) or 1))

			-- If section is ammo, only buy ammo for best weapon
			if (utils.is_ammo(sec) ~= true) or (bw_ammos and bw_ammos[sec]) then
				if (item_list[sec]) then
					-- only buy enough to reach restock goals (param 3)
					for i=item_list[sec],tonumber(buy_sell[3]) do
						if (money >= total_cost) then
							size_t = size_t + 1
							buy_sell_items[size_t] = sec
							sim:create(sec,npc:position(),0,0,npc:id())
							npc:transfer_money(total_cost,seller)
							--printf("%s bought %s for %s",npc:name(),sec,total_cost)
							money = money - total_cost
						end
					end
				else
					-- only buy enough to reach restock goals (param 3)
					for i=1,tonumber(buy_sell[3]) do
						if (money >= total_cost) then
							size_t = size_t + 1
							buy_sell_items[size_t] = sec
							sim:create(sec,npc:position(),0,0,npc:id())
							npc:transfer_money(total_cost,seller)
							printf("%s bought %s for %s",npc:name(),sec,total_cost)
							money = money - total_cost
						end
					end
				end
			end
		end

		-- NPC ran out of money, end loop
		if (money <= 0) then
			break
		end
	end
	
	if (#buy_sell_items > 0) then 
		if (dynamic_news_manager and axr_main.config:r_value("mm_options","enable_dynamic_news",1)) then 
			dynamic_news_manager.get_dynamic_news():BoughtItems(npc,seller,buy_sell_items)
		end
	end
end
