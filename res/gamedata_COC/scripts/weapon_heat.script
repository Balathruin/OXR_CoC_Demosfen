--    	Weapon Overheating 1.01.6 -- created by Nuor 6-1-2011
--		last edit 12-11-2016 for CoC [Nuor]
--###########################################################
local wpn_attr_table,default_ammo_heat,default_ammo_wear,display_bar,disp_inv_bar,display_icon
local sys_ini,time_check,heat
local HUD,new_weap_id,temp_cond,loaded,weap_table,smoke_tbl
feature_is_active,UI_BAR = nil,nil
new_wpn_id,del_wpn_id = nil,nil
--/ ---------------------------------------------------------------
function get_heat()
	if (feature_is_active) then
		return 
	end
	feature_is_active = true
	
	wpn_attr_table = {	--//add these to weapon section in ltx for custom heating (ex. heating_rates = nato2)
		default = {cool_rate = 0.0017, heat_rate = 0.0100, heat_dec_fac = 0.0007},
		ak1		= {cool_rate = 0.0017, heat_rate = 0.0098, heat_dec_fac = 0.0007},
		ak2		= {cool_rate = 0.0017, heat_rate = 0.0105, heat_dec_fac = 0.0007},
		ak3		= {cool_rate = 0.0016, heat_rate = 0.0117, heat_dec_fac = 0.0007},
		nato1	= {cool_rate = 0.0016, heat_rate = 0.0100, heat_dec_fac = 0.0006},
		nato2	= {cool_rate = 0.0016, heat_rate = 0.0115, heat_dec_fac = 0.0006},
		m134	= {cool_rate = 0.0020, heat_rate = 0.0025, heat_dec_fac = 0.0006}
		}

	default_ammo_heat = 1.0	-- default heating factor ammo type - add to ammo section (ex. ammo_heat = 1.1)
	default_ammo_wear = 1.0	-- default wear factor ammo type 	- add to ammo section (ex. ammo_wear = 1.1)
--/ -----------------------------------------------------------
	display_bar, disp_inv_bar, display_icon = 5, 1, 10	-- % that trigger heating bar and icon on hud/inv
	UI_BAR = axr_main.config:r_value("mm_options","enable_weapon_heat_ui",1,true)
	sys_ini = system_ini()
	cool_cyc = 1000				-- milliseconds between cooling checks
	weap_table = weap_table or alife_storage_manager.get_state().weap_table or {}
	smoke_tbl = {}
--/	------------------------------------------------------------
	if (USE_MARSHAL) then
		RegisterScriptCallback("save_state",save_state)
		RegisterScriptCallback("load_state",load_state)
	end
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	if HUD == nil then
		HUD = heat_ui()
		get_hud():AddDialogToRender(HUD)
	end
end

function CloseHud()
	if HUD ~= nil then
		get_hud():RemoveDialogToRender(HUD)
		HUD = nil
	end
end
	
function stop_heat()
	if not (feature_is_active) then
		return 
	end
	feature_is_active = false
	
	if weapon_table then
		for w_id,v in pairs (weap_table) do
			local wpn = level.object_by_id(w_id)
			if wpn then
				wpn:set_condition(v.real)
			else
				local s_obj = alife_object(w_id)
				local t = s_obj and stpk_utils.get_object_data(s_obj)
				if t then
					t.condition = v.real
					stpk_utils.set_object_data(t,s_obj)
				end
			end
		end
		weap_table = nil
	end
	smoke_tbl = nil
	UI_BAR = nil
	CloseHud()
	if (USE_MARSHAL) then
		UnregisterScriptCallback("save_state",save_state)
		UnregisterScriptCallback("load_state",load_state)
	end
	UnregisterScriptCallback("actor_on_before_death",actor_on_before_death)
	UnregisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	alife_storage_manager.get_state().weap_table = nil
end

--/ -------------------------------------------------------------
function on_game_start()
	if (axr_main.config:r_value("mm_options","enable_weapon_heat",1,false) == false) then return end
	local function actor_on_first_update()
		get_heat()
	end
	if (USE_MARSHAL) then
		RegisterScriptCallback("save_state",save_state)
		RegisterScriptCallback("load_state",load_state)
	end
	RegisterScriptCallback("actor_on_before_death",actor_on_before_death)
	RegisterScriptCallback("actor_on_net_destroy",actor_on_net_destroy)
	RegisterScriptCallback("actor_on_first_update",actor_on_first_update)
end

function actor_on_before_death()
	CloseHud()
end

function actor_on_net_destroy()
	if weapon_table then
		for w_id,v in pairs (weap_table) do
			if not level.object_by_id(w_id) then
				local s_obj = alife_object(w_id)
				local t = s_obj and stpk_utils.get_object_data(s_obj)
				if t then
					t.condition = v.real
					stpk_utils.set_object_data(t,s_obj)
				end
				weap_table[w_id] = nil
			end
		end
	end
	CloseHud()
end
--/ ============================================================
--/ ====================   Marshal Storage  ====================

function save_state(m_data)
	m_data.weap_table = weap_table and table.size(weap_table) > 0 and weap_table or nil
end

function load_state(m_data)
	weap_table = m_data.weap_table or weap_table or {}
	loaded = true
end
--/	----------------------------------------------------------
class "heat_ui" (CUIScriptWnd)

function heat_ui:__init() super()
	heat = 0
	self.inv_hud = ActorMenu.get_actor_menu()
	self._timer = time_global()
	self:InitControls()
end

function heat_ui:__finalize()
end

function heat_ui:InitControls()
	self:SetWndRect(Frect():set(0, 0, device().width, device().height))
	xml = CScriptXmlInit()
	xml:ParseFile("ui_heating.xml")
	
	--// hud
	self.overlay = xml:InitStatic("static_weap_condition", self)
	self.pbar = xml:InitProgressBar("static_weap_condition:heat_progress", self.overlay)
	self.icon = xml:InitStatic("static_weap_condition:heat_icon", self.overlay)
	self.picon = xml:InitProgressBar("static_weap_condition:heat_icon_progress", self.overlay)
	
	self.overlay:Show(false)
	self.pbar:Show(false)
	self.icon:Show(false)
	self.picon:Show(false)
	
	--// inventory
	self.inv_static2 = xml:InitStatic("inv_static2",self.inv_hud)
	self.inv_static3 = xml:InitStatic("inv_static3",self.inv_hud)
	self.inv_pbar2 = xml:InitProgressBar("inv_static2:inv_heat_progress2",self.inv_static2)
	self.inv_pbar3 = xml:InitProgressBar("inv_static3:inv_heat_progress3",self.inv_static3)
	
	self.inv_static2:Show(false)
	self.inv_static3:Show(false)
	self.inv_pbar2:Show(false)
	self.inv_pbar3:Show(false)

end

function heat_ui:Update()
	if not(loaded and db.actor:alive()) or (device():is_paused()) then return end
--	
	if new_wpn_id and weap_table[del_wpn_id] then 	--fix for AO parent weapons
		weap_table[new_wpn_id] = weap_table[del_wpn_id]
		weap_table[del_wpn_id] = nil
		new_wpn_id = nil
		del_wpn_id = nil
	end
--
	CUIScriptWnd.Update(self)
	self:get_act_wpn()
	self:fill_tbl()
	if table.size(weap_table) > 0 then
		self:heating()
	end
end

function heat_ui:clear_hud(w_id)
	if (self.inv_hud and self.inv_hud:IsShown()) then
		self.overlay:Show(false)
		self.pbar:Show(false)
		self.icon:Show(false)
		self.picon:Show(false)
	else
		self.inv_static2:Show(false)
		self.inv_static3:Show(false)
		self.inv_pbar2:Show(false)
		self.inv_pbar3:Show(false)

		if self.wpn_id ~= w_id then
			self.overlay:Show(false)
			self.pbar:Show(false)
			self.icon:Show(false)
			self.picon:Show(false)
		end
	end
end

function heat_ui:id_heat_check(id)
	if id == nil then return 0 end
	local stats = weap_table[id]
	return stats and (stats.real - stats.cond) * 100 or 0
end

function heat_ui:progress_bars(w_id, w_obj)
	self:clear_hud(w_id)
	local smk_lvl = 15	-- % increments that increase smoke
	local heat_lvl = self:id_heat_check(w_id) or 0
	if (self.inv_hud and self.inv_hud:IsShown()) then	-- show in inventory
		local heat2 = self:id_heat_check(self.slot2_id)
		local heat3 = self:id_heat_check(self.slot3_id)
		local bar2, bar3 = heat2 > disp_inv_bar, heat3 > disp_inv_bar
		self.inv_static2:Show(bar2)
		self.inv_pbar2:Show(bar2)
		if bar2 then self.inv_pbar2:SetProgressPos(heat2) end
		self.inv_static3:Show(bar3)
		self.inv_pbar3:Show(bar3)
		if bar3 then self.inv_pbar3:SetProgressPos(heat3) end
		if smoke_tbl and smoke_tbl[w_id] then
			--for k, v in ipairs(smoke_tbl[w_id]) do
			for k=1, #smoke_tbl[w_id] do
				local v = smoke_tbl[w_id][k]
				if v and (heat_lvl < k*smk_lvl) and v:playing() then
					v:stop()
				end
			end
		end
	else											-- show on HUD
--//---------------------	progress bar and icon on hud	--------------------
		if UI_BAR == true then
			if self.wpn_id == w_id then
				local di, d_b = heat_lvl > display_icon, heat_lvl > display_bar
				self.icon:Show(di)
				self.picon:Show(di)
				if di then self.picon:SetProgressPos(heat_lvl) end
				self.overlay:Show(d_b)
				self.pbar:Show(d_b)
				if d_b then self.pbar:SetProgressPos(heat_lvl) end
			end
		end
--//----------------------	smoking weapon	-------------------------------
		if heat_lvl > smk_lvl and not (smoke_tbl[w_id]) then
			smoke_tbl[w_id] = {}
		end
		if smoke_tbl[w_id] then
			local bone_pos = w_obj and weap_table[w_id] and alun_utils.safe_bone_pos(w_obj,weap_table[w_id].bone)
			local v1 = bone_pos and alun_utils.string_to_vector(weap_table[w_id].offset) or VEC_ZERO --vector()
			if heat_lvl < 100 and heat_lvl > (smk_lvl*(#smoke_tbl[w_id]+1)) then
--				table.insert(smoke_tbl[w_id], particles_object("industrial_particles\\exhaust_workshop_1_small"))
--				table.insert(smoke_tbl[w_id], particles_object("industrial_particles\\weapon_smoke"))
				smoke_tbl[w_id][#smoke_tbl[w_id]+1] = particles_object("industrial_particles\\weapon_smoke")
			end
--			for k, v in ipairs(smoke_tbl[w_id]) do
			for k=1, #smoke_tbl[w_id] do
				local v = smoke_tbl[w_id][k]
				if bone_pos and heat_lvl >= k*smk_lvl then
					if not (v:playing()) then
						v:play_at_pos(bone_pos)
					end
					
					local vec = w_id == self.wpn_id and device().cam_dir or VEC_ZERO --vector():set(0,0,0)
					bone_pos = vector():set(bone_pos.x+v1.x,bone_pos.y+v1.y,bone_pos.z+v1.z) or VEC_ZERO --vector():set(0,0,0)
					v:move_to(bone_pos:add(vec), VEC_ZERO) --vector():set(0,0,0)
				else
					if v:playing() then
						v:stop()
					end
				end
			end
		end
--//----------------------------------------------------------------------------
	end
end

function heat_ui:get_act_wpn()
	local slot2_obj, slot3_obj = db.actor:item_in_slot(2), db.actor:item_in_slot(3)
	self.slot2_id, self.slot3_id = slot2_obj and slot2_obj:id(), slot3_obj and slot3_obj:id()
	local active_slot = db.actor:active_slot()
	if slot2_obj and active_slot == 2 then
		self.wpn = slot2_obj
		self.wpn_id = self.slot2_id
	elseif slot3_obj and active_slot == 3 then
		self.wpn = slot3_obj
		self.wpn_id = self.slot3_id
	else
		self.wpn = nil
		self.wpn_id = nil
	end
end

function heat_ui:fill_tbl()
	function set_tbl_attr()
		local active_section = self.wpn:section()
		local h_tbl = wpn_attr_table[sys_ini:r_string_ex(active_section,"heating_rates") or "default"]
		h_tbl.heat_rate = sys_ini:r_float_ex(active_section,"heating") or h_tbl.heat_rate
		h_tbl.cool_rate = sys_ini:r_float_ex(active_section,"cooling") or h_tbl.cool_rate
		h_tbl.heat_dec_fac = sys_ini:r_float_ex(active_section,"heat_damage") or h_tbl.heat_dec_fac
		local real_cond = self.wpn:condition()
		temp_cond = real_cond - h_tbl.heat_rate + h_tbl.cool_rate
		self.wpn:set_condition(temp_cond)
		local hud = sys_ini:r_string_ex(active_section,"hud")
		weap_table[self.wpn_id] = {
			real = real_cond,
			cond = temp_cond,
			heat = h_tbl.heat_rate,
			cool = h_tbl.cool_rate,
			hdf = h_tbl.heat_dec_fac,
	--//----------------------  smoking weapon	---------------------------------
			bone = sys_ini:r_string_ex(hud,"fire_bone") or "wpn_body",
			offset = sys_ini:r_string_ex(hud,"fire_point") or ""
			}
	end

	if self.wpn_id and weap_table[self.wpn_id] == nil then					-- weapon in table check
--[[	
		local s_obj = alife_object(self.wpn_id)
		local t = stpk_utils.get_object_data(s_obj)
		if t then alun_utils.print_table(t,"data for "..self.wpn:section()) end
--]]		
		if new_weap_id ~= self.wpn_id then									-- change active weapon check
			new_weap_id = self.wpn_id
			temp_cond = self.wpn:condition()								-- initial unfired condition
			return
		end
		if temp_cond and temp_cond > self.wpn:condition() then				-- active weapon has been fired
			set_tbl_attr()
			new_weap_id = nil
			temp_cond = nil
		end
	end
end

function heat_ui:heating()

	local function governor(val, sw)
		if val == nil then return 0 end
		if sw == nil then sw = "both" end
		if sw ~= "low" and val >= 1 then val = 0.99999999999 end				-- max
		if sw ~= "high" and val < 0 then val = 0 end 						-- min
		return val
	end

	local function heating()
		local w_data = self.wpn and self.wpn_id and weap_table[self.wpn_id]
		if not w_data then return end
		local w_cond = self.wpn:condition()
		if w_data.cond - w_cond > 0 then									-- gun has been fired
			local ammo_heat, ammo_wear = ammo_factors(self.wpn)				-- ammo modifiers
			heat = (w_data.real - w_data.cond)/w_data.real * ammo_heat		-- condition decline from heat
			local h_dec = math.pow(heat,3)*w_data.hdf*ammo_wear*math.sqrt(w_data.real) -- accel. real decline
			w_data.real = w_data.real - h_dec - w_data.cond + w_cond		-- real condition after decline
			w_data.real = governor(w_data.real)
			w_data.cond = w_data.cond - w_data.heat - h_dec					-- temporary condition before cooling
			weap_table[self.wpn_id] = w_data
		end
	end

	local temp = time_global()
	if self._timer and (temp - self._timer) > cool_cyc then
		self._timer = temp
	else
		return heating()
	end

	for w_id,v in pairs (weap_table) do
		local active_id = obj_id and w_id == self.wpn_id
		local weap_obj = level.object_by_id(w_id)
		if weap_obj then														-- weapon is online
			local heating = v.real - v.cond
			if heating > 0 then													-- weapon is hot
				v.cond = v.cond + v.cool + (v.cool * heating)					-- condition after cooling
				v.cond = governor(v.cond)
				weap_table[w_id] = v
				weap_obj:set_condition(v.cond)									-- set temporary condition
				
				if active_id then heat = governor(v.real-v.cond,"high")	end		-- governor
				self:progress_bars(w_id, weap_obj)								-- display inactive weapon
			else																-- clear cool weapons
				weap_obj:set_condition(v.real)
				weap_table[w_id] = nil
				smoke_tbl[w_id] = nil		--smoking weapon
				if active_id then heat = 0	end
			end
		else
			local s_obj = alife_object(w_id)
			local t = stpk_utils.get_object_data(s_obj)
			if (t) then															-- weapon is offline
				if v.real then
					t.condition = v.real
					stpk_utils.set_object_data(t,s_obj)							-- reset condition
				end
				weap_table[w_id] = nil
				smoke_tbl[w_id] = nil		--smoking weapon
			end
		end
	end
end

function ammo_factors(wpn)
	local at_tbl = wpn and utils.parse_names(sys_ini:r_string_ex(wpn:section(),"ammo_class"))
	local at = at_tbl and at_tbl[wpn:get_ammo_type()+1]
	return sys_ini:r_string_ex(at,"heating_factor") or default_ammo_heat,sys_ini:r_string_ex(at,"wear_factor") or default_ammo_wear
end