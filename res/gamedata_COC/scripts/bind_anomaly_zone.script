--'******************************************************
--'*  Биндер объекта зоны аномалий .
--'******************************************************
artefact_ways_by_id					= {}
artefact_points_by_id				= {}
parent_zones_by_artefact_id			= {}

function bind(obj)
	obj:bind_object(anomaly_zone_binder(obj))
end

local anom_sect = "anomal_zone"

class "anomaly_zone_binder" (object_binder)
function anomaly_zone_binder:__init(obj) super(obj)
	local spawn_ini = obj:spawn_ini()
	local filename = spawn_ini and spawn_ini:r_string_ex(anom_sect,"cfg")
	if not filename then
		printf("WARNING: anomaly_zone_binder: 'anomal_zone' section missing from spawn ini")
		self.disabled = true
		return
	end
	
	self.ini = ini_file(filename)
	if not (self.ini) then
		printf("WARNING: anomaly_zone_binder: not setup properly! can't load cfg %s",filename)
		self.disabled = true
		return		
	end

	self.artefact_ways_by_id = {}
	self.artefact_points_by_id = {}
	self.disabled = false
	self.turned_off = false
	self.artefacts_table = {}
	self.start_artefacts_table = {}
	self.artefacts_coeff_table = {}
	self.path_table = {}
	self.fields_table = {}
	self.mines_table = {}
	self.respawn_tries_table = {}
	self.max_artefacts_table = {}
	self.forces_table = {}
	self.spawned_count = 0
	self.s_chance = 1

	self.respawn_artefacts = math.random() <= 0.10
	self.forced_spawn = false
	self.forced_spawn_override = false
	self.forced_artefact = ""
	self.layers_count = self.ini:r_float_ex(anom_sect,"layers_count") or 1
	self.cur_layer = "layer_"..math.random(1,self.layers_count)
	self.custom_placement = self.layers_count>1

	local def_respawn_tries		= self.ini:r_float_ex(anom_sect,"respawn_tries") or 1
	local def_max_artefacts		= self.ini:r_float_ex(anom_sect,"max_artefacts") or 1
	local def_app_force_xz 		= self.ini:r_float_ex(anom_sect,"applying_force_xz") or 200
	local def_app_force_y 		= self.ini:r_float_ex(anom_sect,"applying_force_y") or 400
	local def_arts 				= self.ini:r_string_ex(anom_sect,"artefacts")
	local def_start_arts		= self.ini:r_string_ex(anom_sect,"start_artefact")
	local def_ways 				= self.ini:r_string_ex(anom_sect,"artefact_ways")
 	local def_field_name		= self.ini:r_string_ex(anom_sect,"field_name")
 	local def_coeff_sect_name	= self.ini:r_string_ex(anom_sect,"coeffs_section") or "coeff"
	local def_coeffs			= self.ini:r_string_ex(anom_sect,"coeff")


	local section, arts, start_arts, parsed_condlist, coeffs_sect_name, coeffs, path, field, mines_section
	for i = 1, self.layers_count do
		section = "layer_"..i

		self.respawn_tries_table[section] = self.ini:r_float_ex(section,"respawn_tries") or self.ini:r_float_ex(section,"artefact_count") or def_respawn_tries
		self.max_artefacts_table[section] = self.ini:r_float_ex(section,"max_artefacts") or def_max_artefacts

		self.forces_table[section] = {}
		self.forces_table[section].xz = self.ini:r_float_ex(section,"applying_force_xz") or def_app_force_xz
		self.forces_table[section].y = self.ini:r_float_ex(section,"applying_force_y") or def_app_force_y
		arts = self.ini:r_string_ex(section,"artefacts") or def_arts
		
		if arts == nil then
			printf("There is no field 'artefacts' in section [%s] in obj [%s]", section, obj:name())
		end
		
		self.artefacts_table[section] = parse_names(arts)

		start_arts = self.ini:r_string_ex(section,"start_artefact") or def_start_arts
		if start_arts ~= nil then
			self.forced_spawn = true
			self.start_artefacts_table[section] = parse_names(start_arts)
		end

		coeffs_sect_name = def_coeff_sect_name
		parsed_condlist = self.ini:r_string_to_condlist(section,"coeffs_section")
		if (parsed_condlist) then
			local str = xr_logic.pick_section_from_condlist(get_story_object("actor"), nil, parsed_condlist)
			if (str and str ~= "" and str ~= "nil") then 
				coeffs_sect_name = str
			end
		end

		coeffs = self.ini:r_string_ex(section,coeffs_sect_name) or def_coeffs
		if coeffs ~= nil then
			self.artefacts_coeff_table[section] = parse_nums(coeffs)
		else
			self.artefacts_coeff_table[section] = {}
		end

		path = self.ini:r_string_ex(section,"artefact_ways") or def_ways
		if path == nil then
			printf("There is no field 'artefact_ways' in section [%s] in obj [%s]", section, obj:name())
		end
		self.path_table[section] = parse_names(path)

		if #self.path_table[section] < self.max_artefacts_table[section] then
			--printf("Not enough ways for anomal zone [%s], in section [%s], must be at least [%s]", tostring(obj:name()), tostring(section), tostring(self.max_artefacts_table[section]))
		end

		if(self.custom_placement) then
			field = self.ini:r_string_ex(section,"field_name") or def_field_name
			if field == nil then
				--printf("There is no field 'field_name' in section [%s] in obj [%s]", section, obj:name())
				self.fields_table[section] = {}
			else
				self.fields_table[section] = parse_names(field)--field
			end

			mines_section = self.ini:r_string_ex(section,"mines_section")
			if mines_section == nil then
				printf("There is no field 'mines_section' in section [%s] in obj [%s]", section, obj:name())
			end

			if self.ini:line_count(mines_section) == 0 then
				--printf("There is no 'mines_names' in section [%s] in obj [%s]", mines_section, obj:name())
			end

			local t = empty_table(self.mines_table[section])
			if self.ini:line_count(mines_section) > 0 then
				for i = 0, self.ini:line_count(mines_section)-1 do
					temp1, mine_name, temp2 = self.ini:r_line(mines_section, i, "", "")
					t[#t+1] = mine_name
				end
			end
			self.mines_table[section] = t
		end
	end
	self.respawn_tries = self.respawn_tries_table[self.cur_layer]
	self.max_artefacts = self.max_artefacts_table[self.cur_layer]
	self.applying_force_xz = self.forces_table[self.cur_layer].xz
	self.applying_force_y = self.forces_table[self.cur_layer].y
end

function anomaly_zone_binder:disable_anomaly_fields()
	if not(self.custom_placement) then
		self.disabled = true
		return
	end
	local layer = self.cur_layer
	local anom_fields = bind_anomaly_field.fields_by_names
	local counter = 0
	for k,v in pairs(self.fields_table) do
		if(k~=layer) then
			for kk, vv in pairs(self.fields_table[k]) do
				if(anom_fields[vv]~=nil) then
					anom_fields[vv]:set_enable(false)
				else
					counter = counter + 1
				end
			end
		end
	end
	for k,v in pairs(self.mines_table) do
		if(k~=layer) then
			for kk,vv in pairs(self.mines_table[k]) do
				if(anom_fields[vv]~=nil) then
					anom_fields[vv]:set_enable(false)
				else
					counter = counter + 1
				end
			end
		end
	end
	if(counter==0) then
		self.disabled = true
	end

	if not self.turned_off then
		for kk, vv in pairs(self.fields_table[layer]) do
			if(anom_fields[vv]~=nil) then
				anom_fields[vv]:set_enable(true)
			end
		end
		for kk,vv in pairs(self.mines_table[layer]) do
			if(anom_fields[vv]~=nil) then
				anom_fields[vv]:set_enable(true)
			end
		end
	end
end

function anomaly_zone_binder:respawn_artefacts_and_replace_anomaly_zone()
	local surge, storm = 1.4, 0.6
	local s_mgr, p_mgr = surge_manager.get_surge_manager(), psi_storm_manager.get_psi_storm_manager()
	self.s_chance = (s_mgr.started and surge) or (p_mgr.started and storm) or 1
	
	local anom_fields = bind_anomaly_field.fields_by_names
	self.respawn_artefacts = true
	if(self.custom_placement) then
		local layer = self.cur_layer
		for k,v in pairs(self.fields_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(false)
			end
		end
		for k,v in pairs(self.mines_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(false)
			end
		end
		layer = "layer_"..math.random(1,self.layers_count)
		for k,v in pairs(self.fields_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(true)
			end
		end
		for k,v in pairs(self.mines_table[layer]) do
			if(anom_fields[v]~=nil) then
				anom_fields[v]:set_enable(true)
			end
		end
		self.cur_layer = layer
		self.respawn_tries = self.respawn_tries_table[self.cur_layer]
		self.max_artefacts = self.max_artefacts_table[self.cur_layer]
		self.applying_force_xz = self.forces_table[self.cur_layer].xz
		self.applying_force_y = self.forces_table[self.cur_layer].y
	end
end

function anomaly_zone_binder:spawn_artefact_randomly()
	local layer = self.cur_layer
	local rnd_artefact
	if self.forced_spawn_override then
		rnd_artefact = self.forced_artefact
		self.forced_spawn_override = false
	elseif self.forced_spawn then
		rnd_artefact = self.start_artefacts_table[layer][#self.start_artefacts_table[layer]]
		self.forced_spawn = false
	else
		local spawn_chance = dxr_achievements.has_achievement("geologist") and 20 or 15
		spawn_chance = self.s_chance * spawn_chance
--		printf("storm arty chance %s", spawn_chance)
		if math.random(1,100) > spawn_chance then
			return
		end

		local t_layer = self.artefacts_table[layer]
		utils.shuffle(t_layer)
		local size = #t_layer
		
		local coeff_total = 0
		for k, v in pairs(self.artefacts_coeff_table[layer]) do
			coeff_total = coeff_total + v
		end
		if coeff_total == 0 then
			for i = 1, size do
				self.artefacts_coeff_table[layer][i] = 1
				coeff_total = coeff_total + 1
			end
		end

		local rnd = math.random(1, coeff_total)
		for i = 1, size do
			local chance = self.artefacts_coeff_table[layer][i]
			if rnd <= chance then
				rnd_artefact = t_layer[i]
				break
			end
			rnd = rnd - chance
		end
	end
	
	if not (rnd_artefact) then
		return
	end

	local rnd_path_name			= self:get_artefact_path()
	local rnd_path				= patrol(rnd_path_name)
	local rnd_path_point		= math.random(0, rnd_path:count() - 1)
	local artefact_obj			= alife():create( rnd_artefact,
										rnd_path:point(rnd_path_point),
										self.object:level_vertex_id(),
										self.object:game_vertex_id())

	artefact_ways_by_id[artefact_obj.id] = rnd_path_name
	artefact_points_by_id[artefact_obj.id] = rnd_path_point
	self.artefact_ways_by_id[artefact_obj.id] = rnd_path_name
	self.artefact_points_by_id[artefact_obj.id] = rnd_path_point
	parent_zones_by_artefact_id[artefact_obj.id] = self
	self.spawned_count = self.spawned_count + 1

end

function anomaly_zone_binder:get_artefact_path()
	local temp_table = {}
	local size_t = 0
	for k,v in pairs(self.path_table[self.cur_layer]) do
		local f_spawned = false
		for kk,vv in pairs(self.artefact_ways_by_id) do
			if vv ~= nil and v == vv then
				f_spawned = true
			end
		end
		if not f_spawned then
			size_t = size_t + 1
			temp_table[size_t] = v
		end
	end

	if size_t < 1 then
		--printf("No free way to spawn artefact in anomal zone [%s]", tostring(self.object:name()))
		return self.path_table[self.cur_layer][math.random(1, #self.path_table[self.cur_layer])]
	end

	local rnd_path_name	= temp_table[math.random(1, size_t)]

	return rnd_path_name
end

function anomaly_zone_binder:set_forced_override(artefact_name)
	self.forced_artefact = artefact_name
	self.forced_spawn_override = true
	printf("set forced override for zone [%s], artefact [%s]", tostring(self.object:name()), tostring(artefact_name))
end

function anomaly_zone_binder:reload(section)
	object_binder.reload(self, section)
end

function anomaly_zone_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.object:id()] = db.storage[self.object:id()] and empty_table(db.storage[self.object:id()]) or {}
	self.st = db.storage[self.object:id()]
end

function anomaly_zone_binder:net_spawn(se_abstract)
	if not object_binder.net_spawn(self, se_abstract) then
		return false
	end
	db.add_anomaly(self)
	db.add_obj(self.object)
	return true
end

function anomaly_zone_binder:net_destroy()
	db.del_anomaly(self)
	db.del_obj(self.object)
	object_binder.net_destroy(self)
end

function anomaly_zone_binder:update(delta)
	object_binder.update(self, delta)
 	if (not self.turned_off) and (self.spawned_count < self.max_artefacts) and self.respawn_artefacts then
 		local cnt = self.respawn_tries
 		if cnt > self.max_artefacts - self.spawned_count then
 			cnt = self.max_artefacts - self.spawned_count
 		end
		if cnt ~= 0 then
			for i=1, cnt do
				self:spawn_artefact_randomly()
			end
		end
		self.respawn_artefacts = false
	elseif (not self.turned_off) and (self.spawned_count >= self.max_artefacts) and self.respawn_artefacts then
		self.respawn_artefacts = false
	end

	if not(self.disabled) then
		self:disable_anomaly_fields()
	end
end

function anomaly_zone_binder:cleanup()
    self:turn_off()
    self:turn_on()
    
    for k,v in pairs(parent_zones_by_artefact_id) do
        if (v and v.object:id() == self.object:id()) then
            parent_zones_by_artefact_id[k] = nil
        end
    end
end

function anomaly_zone_binder:turn_off()
	self.turned_off = true
	self:disable_anomaly_fields()
	for k,v in pairs(self.artefact_ways_by_id) do
		local se_obj = alife_object(tonumber(k))
		if (se_obj) then
			alife():release(se_obj)
		end
		artefact_ways_by_id[k] = nil
		artefact_points_by_id[k] = nil
		parent_zones_by_artefact_id[k] = nil
	end
	self.spawned_count = 0
	self.artefact_ways_by_id = {}
	self.artefact_points_by_id = {}
end

function anomaly_zone_binder:turn_on(f_af)
	self.turned_off = false
	self:disable_anomaly_fields()
	if f_af then
		self.respawn_artefacts = true
	else
		self.respawn_artefacts = false
	end
end

function anomaly_zone_binder:on_artefact_take(obj)
	local id
	if(type(obj.id)=="number") then
		id = obj.id
	else
		id = obj:id()
	end

    parent_zones_by_artefact_id[id] = nil
	artefact_ways_by_id[id] = nil
	artefact_points_by_id[id] = nil
	self.artefact_ways_by_id[id] = nil
	self.artefact_points_by_id[id] = nil
	self.spawned_count = self.spawned_count - 1
	if (self.spawned_count < 0) then
		self.spawned_count = 0
	end
end

-- Standart function for save
function anomaly_zone_binder:net_save_relevant()
	return true
end
-- Saving anomaly zone
function anomaly_zone_binder:save(thread)
	set_save_marker(thread, "save", false, "anomaly_zone_binder")
	object_binder.save(self, thread)

	local count = table.size(self.artefact_ways_by_id)
	thread:w_u16(count)
	for k,v in pairs(self.artefact_ways_by_id) do
		thread:w_u16(k)
		thread:w_stringZ(v)
	end

	count = table.size(self.artefact_points_by_id)
	thread:w_u16(count)
	for k,v in pairs(self.artefact_points_by_id) do
		thread:w_u16(k)
		thread:w_u8(v)
	end

	thread:w_u8(self.spawned_count)
	thread:w_bool(self.respawn_artefacts)
	thread:w_bool(self.forced_spawn)
	thread:w_bool(self.forced_spawn_override)
	thread:w_stringZ(self.forced_artefact)
	local layer_num = tonumber(string.sub(self.cur_layer, string.find(self.cur_layer, "_")+1, string.len(self.cur_layer)))
	if(layer_num) then
		thread:w_u8(layer_num)
	else
		thread:w_u8(255)
	end
	thread:w_bool(self.turned_off)
	set_save_marker(thread, "save", true, "anomaly_zone_binder")
end
-- Loading anomaly zone
function anomaly_zone_binder:load(thread)
	set_save_marker(thread, "load", false, "anomaly_zone_binder")
	object_binder.load(self, thread)

	local count = thread:r_u16()
	for i=1,count do
		local art_id = thread:r_u16()
		local way_name = thread:r_stringZ()
		artefact_ways_by_id[art_id] = way_name
		self.artefact_ways_by_id[art_id] = way_name
		parent_zones_by_artefact_id[art_id] = self
	end
----------------optimize this---------------------------------------------------
	local count = thread:r_u16()
	for i=1,count do
		local art_id = thread:r_u16()
		local point_name = thread:r_u8()
		artefact_points_by_id[art_id] = point_name
		self.artefact_points_by_id[art_id] = point_name
	end
--------------------------------------------------------------------------------
	self.spawned_count = thread:r_u8()
	self.respawn_artefacts = thread:r_bool()
	self.forced_spawn = thread:r_bool()
	self.forced_spawn_override = thread:r_bool()
	self.forced_artefact = thread:r_stringZ()
	local layer_num = thread:r_u8()
	if(layer_num~=255) then
		self.cur_layer = "layer_"..layer_num
	end
	self.turned_off = thread:r_bool()
	set_save_marker(thread, "load", true, "anomaly_zone_binder")
    
    if (self.spawned_count < 0 or self.spawned_count > 200) then
        self:cleanup()
    end
end
