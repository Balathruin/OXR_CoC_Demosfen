local ammos = {}
function aggregate(npc,obj)
	if not (IsAmmo(obj)) then
		return 
	end 
	
	local size = obj:ammo_get_count()
	local box_size = obj:ammo_box_size()
	
	if (size == box_size) then 
		return 
	end

	iempty_table(ammos)
	local size_t = 0
	
	local section = obj:section()
	
	npc:inventory_for_each(
		function (item)
			-- collect ammos except this one; we use it for remainder
			if (section == item:section() and item:id() ~= obj:id() and item:ammo_get_count() < box_size) then
				size_t = size_t + 1
				ammos[size_t] = item:id()
				size = size + item:ammo_get_count()
			end
		end
	)
	
	-- didn't find any others
	if (size == obj:ammo_get_count()) then 
		return
	end

	local fill = math.floor(size/box_size)
	local remainder = size - (box_size*fill)
	if (remainder > 0) then 
		obj:ammo_set_count(remainder)
	else
		size_t = size_t + 1
		ammos[size_t] = obj:id()
	end
	
	local sim = alife()
	for i=1,#ammos do 
		local item = level.object_by_id(ammos[i])
		if (item) then
			if (fill > 0) then
				item:ammo_set_count(box_size)
				fill = fill - 1
			else
				local se_obj = sim:object(ammos[i])
				if (se_obj) then
					sim:release(se_obj)
				end
			end
		end
	end
end

function actor_on_item_take(item)
	-- commented out because it's done in engine when inventory window is closed now
	--aggregate(db.actor,item)
end

function on_game_start()
	RegisterScriptCallback("actor_on_item_take", actor_on_item_take)
end
