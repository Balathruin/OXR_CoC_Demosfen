local npc_role = {noone=0, listener=1, director=2}
local camp_ini = ini_file("scripts\\camp.ltx")
local story_table = parse_names(camp_ini:r_string_ex("camp", "stories") or "test_story")
local guitar_table = parse_names(camp_ini:r_string_ex("camp", "guitar_themes") or "test_guitar")
local harmonica_table = parse_names(camp_ini:r_string_ex("camp", "harmonica_themes") or "test_harmonica")
local sr_camp_states = {
				idle = {
							director_state = nil,
							general_state = "idle",
							min_time = 30000,
							max_time = 30000,
							timeout = 0,
							transitions = {"harmonica","guitar","story"},
							precondition = function(camp)
								return true
							end
						 },
				harmonica = {
							director_state = "play_harmonica",
							general_state = "listen",
							min_time = 30000,
							max_time = 120000,
							timeout = 0,
							transitions = {"idle","story"},
							precondition = function (camp)
								if(#harmonica_table>0) then
									for id,v in pairs(camp.npc) do
										local st = db.storage[id]
										local npc = st and st.object
										if (npc) then
											local scheme = st and st.active_scheme and st[st.active_scheme]
											if(v.harmonica==npc_role.director) and (scheme ~= nil and scheme.base_action == scheme.description) and not xr_meet.is_meet(npc) then
												return true
											end
										end
									end
								end
								return false
							end
							},
				guitar = {
							director_state = "play_guitar",
							general_state = "listen",
							min_time = 30000,
							max_time = 120000,
							timeout = 0,
							transitions = {"idle","story"},
							precondition = function (camp)
								if(#guitar_table>0) then
									for id,v in pairs(camp.npc) do
										local st = db.storage[id]
										local npc = st and st.object
										if (npc) then
											local scheme = st and st.active_scheme and st[st.active_scheme]
											if(v.guitar==npc_role.director) and (scheme ~= nil and scheme.base_action == scheme.description) and not xr_meet.is_meet(npc) then
												return true
											end
										end
									end
								end
								return false
							end
						 },
				story = {
							director_state = "tell",
							general_state = "listen",
							min_time = 30000,
							max_time = 120000,
							timeout = 0,
							transitions = {"idle","harmonica","guitar","story"},
							precondition = function (camp)
								if(#story_table>0) then
									for id,v in pairs(camp.npc) do
										local st = db.storage[id]
										local npc = st and st.object
										if (npc) then
											local scheme = st and st.active_scheme and st[st.active_scheme]
											if (v.story==npc_role.director) then
												if (scheme == nil or scheme.base_action ~= scheme.description) or (xr_meet.is_meet(npc)) then 
													return false
												end
											else
												return true
											end
										end
									end
									return true
								end
								return false
							end
						},
}

--------------------------------------------------------------------------------
-- Класс CCampManager
--------------------------------------------------------------------------------
-- Кемп содержит свои действия в терминах состояния кемпа (рассказ истории, музыка, ожидание), а не в терминах анимаций персонажей
-- Кемп возвращает свое состояние, а решение какую именно анимацию играть принимает финальная схема, например xr_animpoint
class "CCampManager"
function CCampManager:__init(object)
	self.object = object

	self.npc = {}
	self.schemes = {}
	-- Хранилище для режиссера лагеря. Режиссерем является сталкер, затеявший необычное поведение
	self.director = nil
	-- Текущее состояние
	self.active_state = "idle"
	--' Для теста создаем объект истории
	self.sound_manager = sound_manager.get_sound_manager("camp"..self.object:id())
	self.sound_manager_started = true
	-- Состояния кемпа

	self.active_state_time = 0
	self.timeout = 0
	self.idle_talker = nil
end
-- Переключает состояния кемпа
function CCampManager:update()

	-- Если саундменеджер говорит какую то историю - ждем окончания.
	if not self.sound_manager:is_finished() then
		self.sound_manager:update()
		return
	end

	if self.sound_manager_started == false then
		return
	end

	-- To stop air guitar
	if (self.active_state == "guitar" or self.active_state == "harmonica") then
		self.director = nil
		self.active_state_time = 0
	end
	
	-- Если кто-то говорит айдловую фразу, ждем пока он договорит.
	if(self.idle_talker~=nil) then
		if(xr_sound.sound_table[self.idle_talker]) then
			return
		else
			self.idle_talker = nil
		end
	end
	
	-- Выбор состояния кемпа. Тут решается что делать дальше.
	--printf("camp time %s", tostring(self.active_state_time - time_global()))
	if (self.active_state_time < time_global()) then
		self:set_next_state()
		if not self:get_director() then
			self.active_state = "idle"
			for k,v in pairs(self.npc) do
				v.state = self.active_state
			end
		end

		self.sound_manager_started = false
		for k,v in pairs(self.npc) do
			if(db.storage[k]) then
				xr_logic.issue_event(db.storage[k].object, db.storage[k][db.storage[k].active_scheme], "update")
			end

			local meet = db.storage[k] and db.storage[k].meet and db.storage[k].meet.meet_manager
			if meet then
				meet.npc_is_camp_director = self.director == k
			end
		end
	end

	-- Выбираем новую тему для саундменеджера (Для гитары и гармошки нужно будет юзать другой метод, чтобы не начали играть звук до того, как достанут инструмент)
	if(self.timeout~=0) and (self.timeout<=time_global()) then
		self:set_story()
		self.timeout = 0
	end

	-- Болтовня в айдле
	if(self.active_state=="idle") then
		local npc_count = 0
		local talkers = {}
		for k,v in pairs(self.npc) do
			npc_count = npc_count + 1
			talkers[npc_count] = k
		end
		if(npc_count > 0) then
			self.idle_talker = talkers[math.random(npc_count)]
			xr_sound.set_sound_play(self.idle_talker, "state")
		end
	end
end
function CCampManager:set_next_state()

	-- altered to just be completely random choice, the old way just skews chance to whatever was first in table
	local transitions = sr_camp_states[self.active_state].transitions
	local new_state = transitions[math.random(#transitions)]
	
	-- We could technically check precondition for each state before choosing, 
	-- but it is very likely if one precondition fails the others will too (xr_meet) so it would be a waste
	self.active_state = sr_camp_states[new_state].precondition(self) and new_state or "idle"
	
	for k,v in pairs(self.npc) do
		v.state = self.active_state
	end
	
	self.active_state_time = time_global()+math.random(sr_camp_states[self.active_state].min_time, sr_camp_states[self.active_state].max_time)
	self.timeout = time_global()+sr_camp_states[self.active_state].timeout
end
function CCampManager:get_director()
	if(self.active_state=="idle") then
		self.director = nil
		return
	end
	local directors = {}
	local npc_count = 0
	for k,v in pairs(self.npc) do
		npc_count = npc_count + 1
		local storage = db.storage[k]
		if storage ~= nil then
			local scheme = storage.active_scheme and storage[storage.active_scheme]
			local npc = storage.object
			if(v[self.active_state]==npc_role.director) and (scheme ~= nil and scheme.base_action == scheme.description) and not xr_meet.is_meet(npc) then
				table.insert(directors, k)
			end
		end
	end
	if(npc_count==0) then
		self.director = nil
		return
	end
	if(#directors<1) then
		return
	elseif(#directors==1) then
		self.director = directors[1]
	else
		self.director = directors[math.random(#directors)]
	end
	return self.director
end
function CCampManager:set_story()
	if(self.active_state=="story") then
		self.sound_manager:set_storyteller(self.director)
		self.sound_manager:set_story(story_table[math.random(#story_table)])
		self.sound_manager_started = true
	elseif(self.active_state=="idle") then
		self.sound_manager_started = true
	end
end
-- Возвращает текущее действие кемпа
function CCampManager:get_camp_action(npc_id)
	if(npc_id==nil) then
		printf("Trying to use destroyed object!")
	end
	if(self.npc[npc_id]==nil) then
		return
	end
	return self.npc[npc_id].state, self.director==npc_id
end
-- Регистрит персонажа в кемп
function CCampManager:register_npc(npc_id)
--	local npc_id = npc:id()
	--printf("Register NPC to camp %s", self.object:id())
	self.npc[npc_id] = {state = self.active_state}
	db.storage[npc_id].registred_camp = self.object:id()

	-- При регистрации персонажа, проверяем какие роли он может выполнять.
	for k,v in pairs(sr_camp_states) do
		local role = self:get_npc_role(npc_id, k)
		if(role==npc_role.noone) then
			printf("Wrong role for npc[%s] with id[%d] in camp [%s]!!!", npc:name(), npc_id, self.object:name())
		end
		self.npc[npc_id][k] = role
	end
	self.sound_manager:register_npc(npc_id)

	xr_logic.issue_event(db.storage[npc_id].object, db.storage[npc_id][db.storage[npc_id].active_scheme], "update")
end
-- Убирает персонажа из кемпа
function CCampManager:unregister_npc(npc_id)
	-- Если удаляется режиссер лагеря
	if self.director == npc_id then
		self.sound_manager_started = false
		self.active_state_time = 0
		self.director = nil
		
		self.active_state = "idle"
		for k,v in pairs(self.npc) do
			v.state = self.active_state
		end		
	end


	db.storage[npc_id].registred_camp = nil
	self.npc[npc_id] = nil
	self.sound_manager:unregister_npc(npc_id)
end
function CCampManager:get_npc_role(npc_id, state)
	local st = db.storage[npc_id]
	local scheme = st and st.active_scheme and st[st.active_scheme]
	if scheme == nil then
		return npc_role.noone
	end

	local npc_actions = scheme.approved_actions
	if not (npc_actions) then 
		return npc_role.noone
	end 
	
	local descr = scheme.description
	if(state=="harmonica") or (state=="guitar") then
		descr = descr and descr.."_"..state or state
		for i = 1,#npc_actions do
			--printf("check action [%s]", npc_actions[i].name)
			if(npc_actions[i].name==descr) then
				return npc_role.director
			end
		end
		return npc_role.listener
	elseif(state=="story") then
		for i = 1,#npc_actions do
			if(npc_actions[i].name==descr) or (npc_actions[i].name==descr.."_weapon") then
				--printf("DIRECTOR FOUND story")
				return npc_role.director
			end
		end
		return npc_role.listener
	elseif(state=="idle") then
		return npc_role.listener
	end
	return npc_role.noone
end
--------------------------------------------------------------------------------
function get_current_camp(position)
	for k,v in pairs(bind_camp.camps) do
		if v.object:inside(position) then
			return v.camp
		end
	end
	return nil
end

function start_guitar(npc)
	local camp_id = db.storage[npc:id()].registred_camp
	if camp_id == nil then
		return	
	end
	local camp = bind_camp.camps[camp_id].camp

	camp.sound_manager:set_storyteller(camp.director)
	camp.sound_manager:set_story(guitar_table[math.random(#guitar_table)])
	camp.sound_manager_started = true
	camp.sound_manager:update()
end

function start_harmonica(npc)
	local camp_id = db.storage[npc:id()].registred_camp
	if camp_id == nil then	
		return
	end
	local camp = bind_camp.camps[camp_id].camp

	camp.sound_manager:set_storyteller(camp.director)
	camp.sound_manager:set_story(harmonica_table[math.random(#harmonica_table)])
	camp.sound_manager_started = true
	camp.sound_manager:update()
end